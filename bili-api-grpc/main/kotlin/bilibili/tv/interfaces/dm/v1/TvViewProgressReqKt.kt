// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/tv/interfaces/dm/v1/dm.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.tv.interfaces.dm.v1;

@kotlin.jvm.JvmName("-initializetvViewProgressReq")
public inline fun tvViewProgressReq(block: bilibili.tv.interfaces.dm.v1.TvViewProgressReqKt.Dsl.() -> kotlin.Unit): bilibili.tv.interfaces.dm.v1.TvViewProgressReq =
  bilibili.tv.interfaces.dm.v1.TvViewProgressReqKt.Dsl._create(bilibili.tv.interfaces.dm.v1.TvViewProgressReq.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.tv.interfaces.dm.v1.TvViewProgressReq`
 */
public object TvViewProgressReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.tv.interfaces.dm.v1.TvViewProgressReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.tv.interfaces.dm.v1.TvViewProgressReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.tv.interfaces.dm.v1.TvViewProgressReq = _builder.build()

    /**
     * ```
     * ```
     *
     * `int64 aid = 1;`
     */
    public var aid: kotlin.Long
      @JvmName("getAid")
      get() = _builder.getAid()
      @JvmName("setAid")
      set(value) {
        _builder.setAid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 aid = 1;`
     */
    public fun clearAid() {
      _builder.clearAid()
    }

    /**
     * ```
     * ```
     *
     * `int64 cid = 2;`
     */
    public var cid: kotlin.Long
      @JvmName("getCid")
      get() = _builder.getCid()
      @JvmName("setCid")
      set(value) {
        _builder.setCid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 cid = 2;`
     */
    public fun clearCid() {
      _builder.clearCid()
    }

    /**
     * ```
     * ```
     *
     * `int64 up_mid = 3;`
     */
    public var upMid: kotlin.Long
      @JvmName("getUpMid")
      get() = _builder.getUpMid()
      @JvmName("setUpMid")
      set(value) {
        _builder.setUpMid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 up_mid = 3;`
     */
    public fun clearUpMid() {
      _builder.clearUpMid()
    }

    /**
     * ```
     * ```
     *
     * `string engine_version = 4;`
     */
    public var engineVersion: kotlin.String
      @JvmName("getEngineVersion")
      get() = _builder.getEngineVersion()
      @JvmName("setEngineVersion")
      set(value) {
        _builder.setEngineVersion(value)
      }
    /**
     * ```
     * ```
     *
     * `string engine_version = 4;`
     */
    public fun clearEngineVersion() {
      _builder.clearEngineVersion()
    }

    /**
     * ```
     * ```
     *
     * `string message_protocol = 5;`
     */
    public var messageProtocol: kotlin.String
      @JvmName("getMessageProtocol")
      get() = _builder.getMessageProtocol()
      @JvmName("setMessageProtocol")
      set(value) {
        _builder.setMessageProtocol(value)
      }
    /**
     * ```
     * ```
     *
     * `string message_protocol = 5;`
     */
    public fun clearMessageProtocol() {
      _builder.clearMessageProtocol()
    }

    /**
     * ```
     * ```
     *
     * `string service_key = 6;`
     */
    public var serviceKey: kotlin.String
      @JvmName("getServiceKey")
      get() = _builder.getServiceKey()
      @JvmName("setServiceKey")
      set(value) {
        _builder.setServiceKey(value)
      }
    /**
     * ```
     * ```
     *
     * `string service_key = 6;`
     */
    public fun clearServiceKey() {
      _builder.clearServiceKey()
    }

    /**
     * ```
     * ```
     *
     * `int64 sid = 7;`
     */
    public var sid: kotlin.Long
      @JvmName("getSid")
      get() = _builder.getSid()
      @JvmName("setSid")
      set(value) {
        _builder.setSid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 sid = 7;`
     */
    public fun clearSid() {
      _builder.clearSid()
    }

    /**
     * ```
     * ```
     *
     * `int64 pid = 8;`
     */
    public var pid: kotlin.Long
      @JvmName("getPid")
      get() = _builder.getPid()
      @JvmName("setPid")
      set(value) {
        _builder.setPid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 pid = 8;`
     */
    public fun clearPid() {
      _builder.clearPid()
    }

    /**
     * ```
     * ```
     *
     * `int64 from = 9;`
     */
    public var from: kotlin.Long
      @JvmName("getFrom")
      get() = _builder.getFrom()
      @JvmName("setFrom")
      set(value) {
        _builder.setFrom(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 from = 9;`
     */
    public fun clearFrom() {
      _builder.clearFrom()
    }

    /**
     * ```
     * ```
     *
     * `string guest_access_key = 10;`
     */
    public var guestAccessKey: kotlin.String
      @JvmName("getGuestAccessKey")
      get() = _builder.getGuestAccessKey()
      @JvmName("setGuestAccessKey")
      set(value) {
        _builder.setGuestAccessKey(value)
      }
    /**
     * ```
     * ```
     *
     * `string guest_access_key = 10;`
     */
    public fun clearGuestAccessKey() {
      _builder.clearGuestAccessKey()
    }

    /**
     * ```
     * ```
     *
     * `int64 epid = 11;`
     */
    public var epid: kotlin.Long
      @JvmName("getEpid")
      get() = _builder.getEpid()
      @JvmName("setEpid")
      set(value) {
        _builder.setEpid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 epid = 11;`
     */
    public fun clearEpid() {
      _builder.clearEpid()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.tv.interfaces.dm.v1.TvViewProgressReq.copy(block: `bilibili.tv.interfaces.dm.v1`.TvViewProgressReqKt.Dsl.() -> kotlin.Unit): bilibili.tv.interfaces.dm.v1.TvViewProgressReq =
  `bilibili.tv.interfaces.dm.v1`.TvViewProgressReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

