// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/tv/interfaces/dm/v1/dm.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.tv.interfaces.dm.v1;

@kotlin.jvm.JvmName("-initializedanmuDefaultPlayerConfig")
public inline fun danmuDefaultPlayerConfig(block: bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfigKt.Dsl.() -> kotlin.Unit): bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig =
  bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfigKt.Dsl._create(bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.newBuilder()).apply { block() }._build()
/**
 * ```
 * 弹幕默认配置
 * ```
 *
 * Protobuf type `bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig`
 */
public object DanmuDefaultPlayerConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig = _builder.build()

    /**
     * ```
     * 是否使用推荐弹幕设置
     * ```
     *
     * `bool player_danmaku_use_default_config = 1;`
     */
    public var playerDanmakuUseDefaultConfig: kotlin.Boolean
      @JvmName("getPlayerDanmakuUseDefaultConfig")
      get() = _builder.getPlayerDanmakuUseDefaultConfig()
      @JvmName("setPlayerDanmakuUseDefaultConfig")
      set(value) {
        _builder.setPlayerDanmakuUseDefaultConfig(value)
      }
    /**
     * ```
     * 是否使用推荐弹幕设置
     * ```
     *
     * `bool player_danmaku_use_default_config = 1;`
     */
    public fun clearPlayerDanmakuUseDefaultConfig() {
      _builder.clearPlayerDanmakuUseDefaultConfig()
    }

    /**
     * ```
     * 是否开启智能云屏蔽
     * ```
     *
     * `bool player_danmaku_ai_recommended_switch = 4;`
     */
    public var playerDanmakuAiRecommendedSwitch: kotlin.Boolean
      @JvmName("getPlayerDanmakuAiRecommendedSwitch")
      get() = _builder.getPlayerDanmakuAiRecommendedSwitch()
      @JvmName("setPlayerDanmakuAiRecommendedSwitch")
      set(value) {
        _builder.setPlayerDanmakuAiRecommendedSwitch(value)
      }
    /**
     * ```
     * 是否开启智能云屏蔽
     * ```
     *
     * `bool player_danmaku_ai_recommended_switch = 4;`
     */
    public fun clearPlayerDanmakuAiRecommendedSwitch() {
      _builder.clearPlayerDanmakuAiRecommendedSwitch()
    }

    /**
     * ```
     * 智能云屏蔽等级
     * ```
     *
     * `int32 player_danmaku_ai_recommended_level = 5;`
     */
    public var playerDanmakuAiRecommendedLevel: kotlin.Int
      @JvmName("getPlayerDanmakuAiRecommendedLevel")
      get() = _builder.getPlayerDanmakuAiRecommendedLevel()
      @JvmName("setPlayerDanmakuAiRecommendedLevel")
      set(value) {
        _builder.setPlayerDanmakuAiRecommendedLevel(value)
      }
    /**
     * ```
     * 智能云屏蔽等级
     * ```
     *
     * `int32 player_danmaku_ai_recommended_level = 5;`
     */
    public fun clearPlayerDanmakuAiRecommendedLevel() {
      _builder.clearPlayerDanmakuAiRecommendedLevel()
    }

    /**
     * ```
     * 是否屏蔽顶端弹幕
     * ```
     *
     * `bool player_danmaku_blocktop = 6;`
     */
    public var playerDanmakuBlocktop: kotlin.Boolean
      @JvmName("getPlayerDanmakuBlocktop")
      get() = _builder.getPlayerDanmakuBlocktop()
      @JvmName("setPlayerDanmakuBlocktop")
      set(value) {
        _builder.setPlayerDanmakuBlocktop(value)
      }
    /**
     * ```
     * 是否屏蔽顶端弹幕
     * ```
     *
     * `bool player_danmaku_blocktop = 6;`
     */
    public fun clearPlayerDanmakuBlocktop() {
      _builder.clearPlayerDanmakuBlocktop()
    }

    /**
     * ```
     * 是否屏蔽滚动弹幕
     * ```
     *
     * `bool player_danmaku_blockscroll = 7;`
     */
    public var playerDanmakuBlockscroll: kotlin.Boolean
      @JvmName("getPlayerDanmakuBlockscroll")
      get() = _builder.getPlayerDanmakuBlockscroll()
      @JvmName("setPlayerDanmakuBlockscroll")
      set(value) {
        _builder.setPlayerDanmakuBlockscroll(value)
      }
    /**
     * ```
     * 是否屏蔽滚动弹幕
     * ```
     *
     * `bool player_danmaku_blockscroll = 7;`
     */
    public fun clearPlayerDanmakuBlockscroll() {
      _builder.clearPlayerDanmakuBlockscroll()
    }

    /**
     * ```
     * 是否屏蔽底端弹幕
     * ```
     *
     * `bool player_danmaku_blockbottom = 8;`
     */
    public var playerDanmakuBlockbottom: kotlin.Boolean
      @JvmName("getPlayerDanmakuBlockbottom")
      get() = _builder.getPlayerDanmakuBlockbottom()
      @JvmName("setPlayerDanmakuBlockbottom")
      set(value) {
        _builder.setPlayerDanmakuBlockbottom(value)
      }
    /**
     * ```
     * 是否屏蔽底端弹幕
     * ```
     *
     * `bool player_danmaku_blockbottom = 8;`
     */
    public fun clearPlayerDanmakuBlockbottom() {
      _builder.clearPlayerDanmakuBlockbottom()
    }

    /**
     * ```
     * 是否屏蔽彩色弹幕
     * ```
     *
     * `bool player_danmaku_blockcolorful = 9;`
     */
    public var playerDanmakuBlockcolorful: kotlin.Boolean
      @JvmName("getPlayerDanmakuBlockcolorful")
      get() = _builder.getPlayerDanmakuBlockcolorful()
      @JvmName("setPlayerDanmakuBlockcolorful")
      set(value) {
        _builder.setPlayerDanmakuBlockcolorful(value)
      }
    /**
     * ```
     * 是否屏蔽彩色弹幕
     * ```
     *
     * `bool player_danmaku_blockcolorful = 9;`
     */
    public fun clearPlayerDanmakuBlockcolorful() {
      _builder.clearPlayerDanmakuBlockcolorful()
    }

    /**
     * ```
     * 是否屏蔽重复弹幕
     * ```
     *
     * `bool player_danmaku_blockrepeat = 10;`
     */
    public var playerDanmakuBlockrepeat: kotlin.Boolean
      @JvmName("getPlayerDanmakuBlockrepeat")
      get() = _builder.getPlayerDanmakuBlockrepeat()
      @JvmName("setPlayerDanmakuBlockrepeat")
      set(value) {
        _builder.setPlayerDanmakuBlockrepeat(value)
      }
    /**
     * ```
     * 是否屏蔽重复弹幕
     * ```
     *
     * `bool player_danmaku_blockrepeat = 10;`
     */
    public fun clearPlayerDanmakuBlockrepeat() {
      _builder.clearPlayerDanmakuBlockrepeat()
    }

    /**
     * ```
     * 是否屏蔽高级弹幕
     * ```
     *
     * `bool player_danmaku_blockspecial = 11;`
     */
    public var playerDanmakuBlockspecial: kotlin.Boolean
      @JvmName("getPlayerDanmakuBlockspecial")
      get() = _builder.getPlayerDanmakuBlockspecial()
      @JvmName("setPlayerDanmakuBlockspecial")
      set(value) {
        _builder.setPlayerDanmakuBlockspecial(value)
      }
    /**
     * ```
     * 是否屏蔽高级弹幕
     * ```
     *
     * `bool player_danmaku_blockspecial = 11;`
     */
    public fun clearPlayerDanmakuBlockspecial() {
      _builder.clearPlayerDanmakuBlockspecial()
    }

    /**
     * ```
     * 弹幕不透明度
     * ```
     *
     * `float player_danmaku_opacity = 12;`
     */
    public var playerDanmakuOpacity: kotlin.Float
      @JvmName("getPlayerDanmakuOpacity")
      get() = _builder.getPlayerDanmakuOpacity()
      @JvmName("setPlayerDanmakuOpacity")
      set(value) {
        _builder.setPlayerDanmakuOpacity(value)
      }
    /**
     * ```
     * 弹幕不透明度
     * ```
     *
     * `float player_danmaku_opacity = 12;`
     */
    public fun clearPlayerDanmakuOpacity() {
      _builder.clearPlayerDanmakuOpacity()
    }

    /**
     * ```
     * 弹幕缩放比例
     * ```
     *
     * `float player_danmaku_scalingfactor = 13;`
     */
    public var playerDanmakuScalingfactor: kotlin.Float
      @JvmName("getPlayerDanmakuScalingfactor")
      get() = _builder.getPlayerDanmakuScalingfactor()
      @JvmName("setPlayerDanmakuScalingfactor")
      set(value) {
        _builder.setPlayerDanmakuScalingfactor(value)
      }
    /**
     * ```
     * 弹幕缩放比例
     * ```
     *
     * `float player_danmaku_scalingfactor = 13;`
     */
    public fun clearPlayerDanmakuScalingfactor() {
      _builder.clearPlayerDanmakuScalingfactor()
    }

    /**
     * ```
     * 弹幕显示区域
     * ```
     *
     * `float player_danmaku_domain = 14;`
     */
    public var playerDanmakuDomain: kotlin.Float
      @JvmName("getPlayerDanmakuDomain")
      get() = _builder.getPlayerDanmakuDomain()
      @JvmName("setPlayerDanmakuDomain")
      set(value) {
        _builder.setPlayerDanmakuDomain(value)
      }
    /**
     * ```
     * 弹幕显示区域
     * ```
     *
     * `float player_danmaku_domain = 14;`
     */
    public fun clearPlayerDanmakuDomain() {
      _builder.clearPlayerDanmakuDomain()
    }

    /**
     * ```
     * 弹幕速度
     * ```
     *
     * `int32 player_danmaku_speed = 15;`
     */
    public var playerDanmakuSpeed: kotlin.Int
      @JvmName("getPlayerDanmakuSpeed")
      get() = _builder.getPlayerDanmakuSpeed()
      @JvmName("setPlayerDanmakuSpeed")
      set(value) {
        _builder.setPlayerDanmakuSpeed(value)
      }
    /**
     * ```
     * 弹幕速度
     * ```
     *
     * `int32 player_danmaku_speed = 15;`
     */
    public fun clearPlayerDanmakuSpeed() {
      _builder.clearPlayerDanmakuSpeed()
    }

    /**
     * ```
     * 是否开启弹幕
     * ```
     *
     * `bool inline_player_danmaku_switch = 16;`
     */
    public var inlinePlayerDanmakuSwitch: kotlin.Boolean
      @JvmName("getInlinePlayerDanmakuSwitch")
      get() = _builder.getInlinePlayerDanmakuSwitch()
      @JvmName("setInlinePlayerDanmakuSwitch")
      set(value) {
        _builder.setInlinePlayerDanmakuSwitch(value)
      }
    /**
     * ```
     * 是否开启弹幕
     * ```
     *
     * `bool inline_player_danmaku_switch = 16;`
     */
    public fun clearInlinePlayerDanmakuSwitch() {
      _builder.clearInlinePlayerDanmakuSwitch()
    }

    /**
     * ```
     * ```
     *
     * `int32 player_danmaku_senior_mode_switch = 17;`
     */
    public var playerDanmakuSeniorModeSwitch: kotlin.Int
      @JvmName("getPlayerDanmakuSeniorModeSwitch")
      get() = _builder.getPlayerDanmakuSeniorModeSwitch()
      @JvmName("setPlayerDanmakuSeniorModeSwitch")
      set(value) {
        _builder.setPlayerDanmakuSeniorModeSwitch(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 player_danmaku_senior_mode_switch = 17;`
     */
    public fun clearPlayerDanmakuSeniorModeSwitch() {
      _builder.clearPlayerDanmakuSeniorModeSwitch()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.copy(block: `bilibili.tv.interfaces.dm.v1`.DanmuDefaultPlayerConfigKt.Dsl.() -> kotlin.Unit): bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig =
  `bilibili.tv.interfaces.dm.v1`.DanmuDefaultPlayerConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

