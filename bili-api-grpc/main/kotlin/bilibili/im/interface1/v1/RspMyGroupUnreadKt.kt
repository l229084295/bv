// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/im/interfaces/v1/im.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.im.interface1.v1;

@kotlin.jvm.JvmName("-initializerspMyGroupUnread")
public inline fun rspMyGroupUnread(block: bilibili.im.interface1.v1.RspMyGroupUnreadKt.Dsl.() -> kotlin.Unit): bilibili.im.interface1.v1.RspMyGroupUnread =
  bilibili.im.interface1.v1.RspMyGroupUnreadKt.Dsl._create(bilibili.im.interface1.v1.RspMyGroupUnread.newBuilder()).apply { block() }._build()
/**
 * ```
 * 我创建的应援团未读数-响应
 * ```
 *
 * Protobuf type `bilibili.im.interface.v1.RspMyGroupUnread`
 */
public object RspMyGroupUnreadKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.im.interface1.v1.RspMyGroupUnread.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.im.interface1.v1.RspMyGroupUnread.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.im.interface1.v1.RspMyGroupUnread = _builder.build()

    /**
     * ```
     * 未读消息数
     * ```
     *
     * `uint32 unread_count = 1;`
     */
    public var unreadCount: kotlin.Int
      @JvmName("getUnreadCount")
      get() = _builder.getUnreadCount()
      @JvmName("setUnreadCount")
      set(value) {
        _builder.setUnreadCount(value)
      }
    /**
     * ```
     * 未读消息数
     * ```
     *
     * `uint32 unread_count = 1;`
     */
    public fun clearUnreadCount() {
      _builder.clearUnreadCount()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.im.interface1.v1.RspMyGroupUnread.copy(block: `bilibili.im.interface1.v1`.RspMyGroupUnreadKt.Dsl.() -> kotlin.Unit): bilibili.im.interface1.v1.RspMyGroupUnread =
  `bilibili.im.interface1.v1`.RspMyGroupUnreadKt.Dsl._create(this.toBuilder()).apply { block() }._build()

