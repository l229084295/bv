// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/im/type/im.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.im.type;

@kotlin.jvm.JvmName("-initializegroupRelation")
public inline fun groupRelation(block: bilibili.im.type.GroupRelationKt.Dsl.() -> kotlin.Unit): bilibili.im.type.GroupRelation =
  bilibili.im.type.GroupRelationKt.Dsl._create(bilibili.im.type.GroupRelation.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.im.type.GroupRelation`
 */
public object GroupRelationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.im.type.GroupRelation.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.im.type.GroupRelation.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.im.type.GroupRelation = _builder.build()

    /**
     * ```
     * ```
     *
     * `uint64 group_id = 1;`
     */
    public var groupId: kotlin.Long
      @JvmName("getGroupId")
      get() = _builder.getGroupId()
      @JvmName("setGroupId")
      set(value) {
        _builder.setGroupId(value)
      }
    /**
     * ```
     * ```
     *
     * `uint64 group_id = 1;`
     */
    public fun clearGroupId() {
      _builder.clearGroupId()
    }

    /**
     * ```
     * ```
     *
     * `uint64 owner_uid = 2;`
     */
    public var ownerUid: kotlin.Long
      @JvmName("getOwnerUid")
      get() = _builder.getOwnerUid()
      @JvmName("setOwnerUid")
      set(value) {
        _builder.setOwnerUid(value)
      }
    /**
     * ```
     * ```
     *
     * `uint64 owner_uid = 2;`
     */
    public fun clearOwnerUid() {
      _builder.clearOwnerUid()
    }

    /**
     * ```
     * ```
     *
     * `uint32 group_type = 3;`
     */
    public var groupType: kotlin.Int
      @JvmName("getGroupType")
      get() = _builder.getGroupType()
      @JvmName("setGroupType")
      set(value) {
        _builder.setGroupType(value)
      }
    /**
     * ```
     * ```
     *
     * `uint32 group_type = 3;`
     */
    public fun clearGroupType() {
      _builder.clearGroupType()
    }

    /**
     * ```
     * ```
     *
     * `uint32 group_level = 4;`
     */
    public var groupLevel: kotlin.Int
      @JvmName("getGroupLevel")
      get() = _builder.getGroupLevel()
      @JvmName("setGroupLevel")
      set(value) {
        _builder.setGroupLevel(value)
      }
    /**
     * ```
     * ```
     *
     * `uint32 group_level = 4;`
     */
    public fun clearGroupLevel() {
      _builder.clearGroupLevel()
    }

    /**
     * ```
     * ```
     *
     * `string group_cover = 5;`
     */
    public var groupCover: kotlin.String
      @JvmName("getGroupCover")
      get() = _builder.getGroupCover()
      @JvmName("setGroupCover")
      set(value) {
        _builder.setGroupCover(value)
      }
    /**
     * ```
     * ```
     *
     * `string group_cover = 5;`
     */
    public fun clearGroupCover() {
      _builder.clearGroupCover()
    }

    /**
     * ```
     * ```
     *
     * `string group_name = 6;`
     */
    public var groupName: kotlin.String
      @JvmName("getGroupName")
      get() = _builder.getGroupName()
      @JvmName("setGroupName")
      set(value) {
        _builder.setGroupName(value)
      }
    /**
     * ```
     * ```
     *
     * `string group_name = 6;`
     */
    public fun clearGroupName() {
      _builder.clearGroupName()
    }

    /**
     * ```
     * ```
     *
     * `string group_notice = 7;`
     */
    public var groupNotice: kotlin.String
      @JvmName("getGroupNotice")
      get() = _builder.getGroupNotice()
      @JvmName("setGroupNotice")
      set(value) {
        _builder.setGroupNotice(value)
      }
    /**
     * ```
     * ```
     *
     * `string group_notice = 7;`
     */
    public fun clearGroupNotice() {
      _builder.clearGroupNotice()
    }

    /**
     * ```
     * ```
     *
     * `int32 status = 8;`
     */
    public var status: kotlin.Int
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 status = 8;`
     */
    public fun clearStatus() {
      _builder.clearStatus()
    }

    /**
     * ```
     * ```
     *
     * `int32 member_role = 9;`
     */
    public var memberRole: kotlin.Int
      @JvmName("getMemberRole")
      get() = _builder.getMemberRole()
      @JvmName("setMemberRole")
      set(value) {
        _builder.setMemberRole(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 member_role = 9;`
     */
    public fun clearMemberRole() {
      _builder.clearMemberRole()
    }

    /**
     * ```
     * ```
     *
     * `string fans_medal_name = 10;`
     */
    public var fansMedalName: kotlin.String
      @JvmName("getFansMedalName")
      get() = _builder.getFansMedalName()
      @JvmName("setFansMedalName")
      set(value) {
        _builder.setFansMedalName(value)
      }
    /**
     * ```
     * ```
     *
     * `string fans_medal_name = 10;`
     */
    public fun clearFansMedalName() {
      _builder.clearFansMedalName()
    }

    /**
     * ```
     * ```
     *
     * `uint64 room_id = 11;`
     */
    public var roomId: kotlin.Long
      @JvmName("getRoomId")
      get() = _builder.getRoomId()
      @JvmName("setRoomId")
      set(value) {
        _builder.setRoomId(value)
      }
    /**
     * ```
     * ```
     *
     * `uint64 room_id = 11;`
     */
    public fun clearRoomId() {
      _builder.clearRoomId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.im.type.GroupRelation.copy(block: `bilibili.im.type`.GroupRelationKt.Dsl.() -> kotlin.Unit): bilibili.im.type.GroupRelation =
  `bilibili.im.type`.GroupRelationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

