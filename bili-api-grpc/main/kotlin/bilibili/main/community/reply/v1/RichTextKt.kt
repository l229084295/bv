// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/main/community/reply/v1/reply.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.main.community.reply.v1;

@kotlin.jvm.JvmName("-initializerichText")
public inline fun richText(block: bilibili.main.community.reply.v1.RichTextKt.Dsl.() -> kotlin.Unit): bilibili.main.community.reply.v1.RichText =
  bilibili.main.community.reply.v1.RichTextKt.Dsl._create(bilibili.main.community.reply.v1.RichText.newBuilder()).apply { block() }._build()
/**
 * ```
 * 富文本
 * ```
 *
 * Protobuf type `bilibili.main.community.reply.v1.RichText`
 */
public object RichTextKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.main.community.reply.v1.RichText.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.main.community.reply.v1.RichText.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.main.community.reply.v1.RichText = _builder.build()

    /**
     * ```
     * 笔记
     * ```
     *
     * `.bilibili.main.community.reply.v1.RichTextNote note = 1;`
     */
    public var note: bilibili.main.community.reply.v1.RichTextNote
      @JvmName("getNote")
      get() = _builder.getNote()
      @JvmName("setNote")
      set(value) {
        _builder.setNote(value)
      }
    /**
     * ```
     * 笔记
     * ```
     *
     * `.bilibili.main.community.reply.v1.RichTextNote note = 1;`
     */
    public fun clearNote() {
      _builder.clearNote()
    }
    /**
     * ```
     * 笔记
     * ```
     *
     * `.bilibili.main.community.reply.v1.RichTextNote note = 1;`
     * @return Whether the note field is set.
     */
    public fun hasNote(): kotlin.Boolean {
      return _builder.hasNote()
    }
    public val itemCase: bilibili.main.community.reply.v1.RichText.ItemCase
      @JvmName("getItemCase")
      get() = _builder.getItemCase()

    public fun clearItem() {
      _builder.clearItem()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.main.community.reply.v1.RichText.copy(block: `bilibili.main.community.reply.v1`.RichTextKt.Dsl.() -> kotlin.Unit): bilibili.main.community.reply.v1.RichText =
  `bilibili.main.community.reply.v1`.RichTextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.main.community.reply.v1.RichTextOrBuilder.noteOrNull: bilibili.main.community.reply.v1.RichTextNote?
  get() = if (hasNote()) getNote() else null

