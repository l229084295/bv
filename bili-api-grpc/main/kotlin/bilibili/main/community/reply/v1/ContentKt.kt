// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/main/community/reply/v1/reply.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.main.community.reply.v1;

@kotlin.jvm.JvmName("-initializecontent")
public inline fun content(block: bilibili.main.community.reply.v1.ContentKt.Dsl.() -> kotlin.Unit): bilibili.main.community.reply.v1.Content =
  bilibili.main.community.reply.v1.ContentKt.Dsl._create(bilibili.main.community.reply.v1.Content.newBuilder()).apply { block() }._build()
/**
 * ```
 * 评论主体信息
 * ```
 *
 * Protobuf type `bilibili.main.community.reply.v1.Content`
 */
public object ContentKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.main.community.reply.v1.Content.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.main.community.reply.v1.Content.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.main.community.reply.v1.Content = _builder.build()

    /**
     * ```
     * 评论文本
     * ```
     *
     * `string message = 1;`
     */
    public var message: kotlin.String
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * ```
     * 评论文本
     * ```
     *
     * `string message = 1;`
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MenberProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 需要渲染的用户转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Member> menber = 2;`
     */
     public val menber: com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Member, MenberProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getMenberMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getMenberMap()
      )
    /**
     * ```
     * 需要渲染的用户转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Member> menber = 2;`
     */
    @JvmName("putMenber")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Member, MenberProxy>
      .put(key: kotlin.String, value: bilibili.main.community.reply.v1.Member) {
         _builder.putMenber(key, value)
       }
    /**
     * ```
     * 需要渲染的用户转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Member> menber = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setMenber")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Member, MenberProxy>
      .set(key: kotlin.String, value: bilibili.main.community.reply.v1.Member) {
         put(key, value)
       }
    /**
     * ```
     * 需要渲染的用户转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Member> menber = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeMenber")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Member, MenberProxy>
      .remove(key: kotlin.String) {
         _builder.removeMenber(key)
       }
    /**
     * ```
     * 需要渲染的用户转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Member> menber = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllMenber")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Member, MenberProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, bilibili.main.community.reply.v1.Member>) {
         _builder.putAllMenber(map)
       }
    /**
     * ```
     * 需要渲染的用户转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Member> menber = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearMenber")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Member, MenberProxy>
      .clear() {
         _builder.clearMenber()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class EmoteProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 需要渲染的表情转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Emote> emote = 3;`
     */
     public val emote: com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Emote, EmoteProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getEmoteMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getEmoteMap()
      )
    /**
     * ```
     * 需要渲染的表情转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Emote> emote = 3;`
     */
    @JvmName("putEmote")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Emote, EmoteProxy>
      .put(key: kotlin.String, value: bilibili.main.community.reply.v1.Emote) {
         _builder.putEmote(key, value)
       }
    /**
     * ```
     * 需要渲染的表情转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Emote> emote = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setEmote")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Emote, EmoteProxy>
      .set(key: kotlin.String, value: bilibili.main.community.reply.v1.Emote) {
         put(key, value)
       }
    /**
     * ```
     * 需要渲染的表情转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Emote> emote = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeEmote")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Emote, EmoteProxy>
      .remove(key: kotlin.String) {
         _builder.removeEmote(key)
       }
    /**
     * ```
     * 需要渲染的表情转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Emote> emote = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllEmote")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Emote, EmoteProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, bilibili.main.community.reply.v1.Emote>) {
         _builder.putAllEmote(map)
       }
    /**
     * ```
     * 需要渲染的表情转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Emote> emote = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearEmote")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Emote, EmoteProxy>
      .clear() {
         _builder.clearEmote()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TopicProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 需要高亮的话题转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Topic> topic = 4;`
     */
     public val topic: com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Topic, TopicProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getTopicMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getTopicMap()
      )
    /**
     * ```
     * 需要高亮的话题转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Topic> topic = 4;`
     */
    @JvmName("putTopic")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Topic, TopicProxy>
      .put(key: kotlin.String, value: bilibili.main.community.reply.v1.Topic) {
         _builder.putTopic(key, value)
       }
    /**
     * ```
     * 需要高亮的话题转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Topic> topic = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setTopic")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Topic, TopicProxy>
      .set(key: kotlin.String, value: bilibili.main.community.reply.v1.Topic) {
         put(key, value)
       }
    /**
     * ```
     * 需要高亮的话题转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Topic> topic = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeTopic")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Topic, TopicProxy>
      .remove(key: kotlin.String) {
         _builder.removeTopic(key)
       }
    /**
     * ```
     * 需要高亮的话题转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Topic> topic = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllTopic")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Topic, TopicProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, bilibili.main.community.reply.v1.Topic>) {
         _builder.putAllTopic(map)
       }
    /**
     * ```
     * 需要高亮的话题转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Topic> topic = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearTopic")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Topic, TopicProxy>
      .clear() {
         _builder.clearTopic()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class UrlProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 需要高亮的超链转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Url> url = 5;`
     */
     public val url: com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Url, UrlProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getUrlMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getUrlMap()
      )
    /**
     * ```
     * 需要高亮的超链转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Url> url = 5;`
     */
    @JvmName("putUrl")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Url, UrlProxy>
      .put(key: kotlin.String, value: bilibili.main.community.reply.v1.Url) {
         _builder.putUrl(key, value)
       }
    /**
     * ```
     * 需要高亮的超链转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Url> url = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setUrl")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Url, UrlProxy>
      .set(key: kotlin.String, value: bilibili.main.community.reply.v1.Url) {
         put(key, value)
       }
    /**
     * ```
     * 需要高亮的超链转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Url> url = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeUrl")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Url, UrlProxy>
      .remove(key: kotlin.String) {
         _builder.removeUrl(key)
       }
    /**
     * ```
     * 需要高亮的超链转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Url> url = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllUrl")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Url, UrlProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, bilibili.main.community.reply.v1.Url>) {
         _builder.putAllUrl(map)
       }
    /**
     * ```
     * 需要高亮的超链转义
     * ```
     *
     * `map<string, .bilibili.main.community.reply.v1.Url> url = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearUrl")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, bilibili.main.community.reply.v1.Url, UrlProxy>
      .clear() {
         _builder.clearUrl()
       }

    /**
     * ```
     * 投票信息
     * ```
     *
     * `.bilibili.main.community.reply.v1.Vote vote = 6;`
     */
    public var vote: bilibili.main.community.reply.v1.Vote
      @JvmName("getVote")
      get() = _builder.getVote()
      @JvmName("setVote")
      set(value) {
        _builder.setVote(value)
      }
    /**
     * ```
     * 投票信息
     * ```
     *
     * `.bilibili.main.community.reply.v1.Vote vote = 6;`
     */
    public fun clearVote() {
      _builder.clearVote()
    }
    /**
     * ```
     * 投票信息
     * ```
     *
     * `.bilibili.main.community.reply.v1.Vote vote = 6;`
     * @return Whether the vote field is set.
     */
    public fun hasVote(): kotlin.Boolean {
      return _builder.hasVote()
    }
    public val ContentKt.Dsl.voteOrNull: bilibili.main.community.reply.v1.Vote?
      get() = _builder.voteOrNull

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class AtNameToMidProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * at到的用户mid列表
     * ```
     *
     * `map<string, int64> at_name_to_mid = 7;`
     */
     public val atNameToMid: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Long, AtNameToMidProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getAtNameToMidMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getAtNameToMidMap()
      )
    /**
     * ```
     * at到的用户mid列表
     * ```
     *
     * `map<string, int64> at_name_to_mid = 7;`
     */
    @JvmName("putAtNameToMid")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Long, AtNameToMidProxy>
      .put(key: kotlin.String, value: kotlin.Long) {
         _builder.putAtNameToMid(key, value)
       }
    /**
     * ```
     * at到的用户mid列表
     * ```
     *
     * `map<string, int64> at_name_to_mid = 7;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setAtNameToMid")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Long, AtNameToMidProxy>
      .set(key: kotlin.String, value: kotlin.Long) {
         put(key, value)
       }
    /**
     * ```
     * at到的用户mid列表
     * ```
     *
     * `map<string, int64> at_name_to_mid = 7;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeAtNameToMid")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Long, AtNameToMidProxy>
      .remove(key: kotlin.String) {
         _builder.removeAtNameToMid(key)
       }
    /**
     * ```
     * at到的用户mid列表
     * ```
     *
     * `map<string, int64> at_name_to_mid = 7;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllAtNameToMid")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Long, AtNameToMidProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.Long>) {
         _builder.putAllAtNameToMid(map)
       }
    /**
     * ```
     * at到的用户mid列表
     * ```
     *
     * `map<string, int64> at_name_to_mid = 7;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearAtNameToMid")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Long, AtNameToMidProxy>
      .clear() {
         _builder.clearAtNameToMid()
       }

    /**
     * ```
     * 富文本
     * ```
     *
     * `.bilibili.main.community.reply.v1.RichText rich_text = 8;`
     */
    public var richText: bilibili.main.community.reply.v1.RichText
      @JvmName("getRichText")
      get() = _builder.getRichText()
      @JvmName("setRichText")
      set(value) {
        _builder.setRichText(value)
      }
    /**
     * ```
     * 富文本
     * ```
     *
     * `.bilibili.main.community.reply.v1.RichText rich_text = 8;`
     */
    public fun clearRichText() {
      _builder.clearRichText()
    }
    /**
     * ```
     * 富文本
     * ```
     *
     * `.bilibili.main.community.reply.v1.RichText rich_text = 8;`
     * @return Whether the richText field is set.
     */
    public fun hasRichText(): kotlin.Boolean {
      return _builder.hasRichText()
    }
    public val ContentKt.Dsl.richTextOrNull: bilibili.main.community.reply.v1.RichText?
      get() = _builder.richTextOrNull

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PicturesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 评论图片
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.Picture pictures = 9;`
     */
     public val pictures: com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.Picture, PicturesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPicturesList()
      )
    /**
     * ```
     * 评论图片
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.Picture pictures = 9;`
     * @param value The pictures to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPictures")
    public fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.Picture, PicturesProxy>.add(value: bilibili.main.community.reply.v1.Picture) {
      _builder.addPictures(value)
    }
    /**
     * ```
     * 评论图片
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.Picture pictures = 9;`
     * @param value The pictures to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPictures")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.Picture, PicturesProxy>.plusAssign(value: bilibili.main.community.reply.v1.Picture) {
      add(value)
    }
    /**
     * ```
     * 评论图片
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.Picture pictures = 9;`
     * @param values The pictures to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPictures")
    public fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.Picture, PicturesProxy>.addAll(values: kotlin.collections.Iterable<bilibili.main.community.reply.v1.Picture>) {
      _builder.addAllPictures(values)
    }
    /**
     * ```
     * 评论图片
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.Picture pictures = 9;`
     * @param values The pictures to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPictures")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.Picture, PicturesProxy>.plusAssign(values: kotlin.collections.Iterable<bilibili.main.community.reply.v1.Picture>) {
      addAll(values)
    }
    /**
     * ```
     * 评论图片
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.Picture pictures = 9;`
     * @param index The index to set the value at.
     * @param value The pictures to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPictures")
    public operator fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.Picture, PicturesProxy>.set(index: kotlin.Int, value: bilibili.main.community.reply.v1.Picture) {
      _builder.setPictures(index, value)
    }
    /**
     * ```
     * 评论图片
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.Picture pictures = 9;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPictures")
    public fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.Picture, PicturesProxy>.clear() {
      _builder.clearPictures()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.main.community.reply.v1.Content.copy(block: `bilibili.main.community.reply.v1`.ContentKt.Dsl.() -> kotlin.Unit): bilibili.main.community.reply.v1.Content =
  `bilibili.main.community.reply.v1`.ContentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.main.community.reply.v1.ContentOrBuilder.voteOrNull: bilibili.main.community.reply.v1.Vote?
  get() = if (hasVote()) getVote() else null

public val bilibili.main.community.reply.v1.ContentOrBuilder.richTextOrNull: bilibili.main.community.reply.v1.RichText?
  get() = if (hasRichText()) getRichText() else null

