// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/main/community/reply/v1/reply.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.main.community.reply.v1;

@kotlin.jvm.JvmName("-initializereplyControl")
public inline fun replyControl(block: bilibili.main.community.reply.v1.ReplyControlKt.Dsl.() -> kotlin.Unit): bilibili.main.community.reply.v1.ReplyControl =
  bilibili.main.community.reply.v1.ReplyControlKt.Dsl._create(bilibili.main.community.reply.v1.ReplyControl.newBuilder()).apply { block() }._build()
/**
 * ```
 * 评论条目控制字段
 * ```
 *
 * Protobuf type `bilibili.main.community.reply.v1.ReplyControl`
 */
public object ReplyControlKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.main.community.reply.v1.ReplyControl.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.main.community.reply.v1.ReplyControl.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.main.community.reply.v1.ReplyControl = _builder.build()

    /**
     * ```
     * 操作行为标志
     * 0:无 1:已点赞 2:已点踩
     * ```
     *
     * `int64 action = 1;`
     */
    public var action: kotlin.Long
      @JvmName("getAction")
      get() = _builder.getAction()
      @JvmName("setAction")
      set(value) {
        _builder.setAction(value)
      }
    /**
     * ```
     * 操作行为标志
     * 0:无 1:已点赞 2:已点踩
     * ```
     *
     * `int64 action = 1;`
     */
    public fun clearAction() {
      _builder.clearAction()
    }

    /**
     * ```
     * 是否UP觉得很赞
     * ```
     *
     * `bool up_like = 2;`
     */
    public var upLike: kotlin.Boolean
      @JvmName("getUpLike")
      get() = _builder.getUpLike()
      @JvmName("setUpLike")
      set(value) {
        _builder.setUpLike(value)
      }
    /**
     * ```
     * 是否UP觉得很赞
     * ```
     *
     * `bool up_like = 2;`
     */
    public fun clearUpLike() {
      _builder.clearUpLike()
    }

    /**
     * ```
     * 是否存在UP回复
     * ```
     *
     * `bool up_reply = 3;`
     */
    public var upReply: kotlin.Boolean
      @JvmName("getUpReply")
      get() = _builder.getUpReply()
      @JvmName("setUpReply")
      set(value) {
        _builder.setUpReply(value)
      }
    /**
     * ```
     * 是否存在UP回复
     * ```
     *
     * `bool up_reply = 3;`
     */
    public fun clearUpReply() {
      _builder.clearUpReply()
    }

    /**
     * ```
     * 是否显示关注按钮
     * ```
     *
     * `bool show_follow_btn = 4;`
     */
    public var showFollowBtn: kotlin.Boolean
      @JvmName("getShowFollowBtn")
      get() = _builder.getShowFollowBtn()
      @JvmName("setShowFollowBtn")
      set(value) {
        _builder.setShowFollowBtn(value)
      }
    /**
     * ```
     * 是否显示关注按钮
     * ```
     *
     * `bool show_follow_btn = 4;`
     */
    public fun clearShowFollowBtn() {
      _builder.clearShowFollowBtn()
    }

    /**
     * ```
     * 是否协管
     * ```
     *
     * `bool is_assist = 5;`
     */
    public var isAssist: kotlin.Boolean
      @JvmName("getIsAssist")
      get() = _builder.getIsAssist()
      @JvmName("setIsAssist")
      set(value) {
        _builder.setIsAssist(value)
      }
    /**
     * ```
     * 是否协管
     * ```
     *
     * `bool is_assist = 5;`
     */
    public fun clearIsAssist() {
      _builder.clearIsAssist()
    }

    /**
     * ```
     * 是否展示标签
     * ```
     *
     * `string label_text = 6;`
     */
    public var labelText: kotlin.String
      @JvmName("getLabelText")
      get() = _builder.getLabelText()
      @JvmName("setLabelText")
      set(value) {
        _builder.setLabelText(value)
      }
    /**
     * ```
     * 是否展示标签
     * ```
     *
     * `string label_text = 6;`
     */
    public fun clearLabelText() {
      _builder.clearLabelText()
    }

    /**
     * ```
     * 是否关注
     * ```
     *
     * `bool following = 7;`
     */
    public var following: kotlin.Boolean
      @JvmName("getFollowing")
      get() = _builder.getFollowing()
      @JvmName("setFollowing")
      set(value) {
        _builder.setFollowing(value)
      }
    /**
     * ```
     * 是否关注
     * ```
     *
     * `bool following = 7;`
     */
    public fun clearFollowing() {
      _builder.clearFollowing()
    }

    /**
     * ```
     * 是否粉丝
     * ```
     *
     * `bool followed = 8;`
     */
    public var followed: kotlin.Boolean
      @JvmName("getFollowed")
      get() = _builder.getFollowed()
      @JvmName("setFollowed")
      set(value) {
        _builder.setFollowed(value)
      }
    /**
     * ```
     * 是否粉丝
     * ```
     *
     * `bool followed = 8;`
     */
    public fun clearFollowed() {
      _builder.clearFollowed()
    }

    /**
     * ```
     * 是否被自己拉黑
     * ```
     *
     * `bool blocked = 9;`
     */
    public var blocked: kotlin.Boolean
      @JvmName("getBlocked")
      get() = _builder.getBlocked()
      @JvmName("setBlocked")
      set(value) {
        _builder.setBlocked(value)
      }
    /**
     * ```
     * 是否被自己拉黑
     * ```
     *
     * `bool blocked = 9;`
     */
    public fun clearBlocked() {
      _builder.clearBlocked()
    }

    /**
     * ```
     * 是否存在折叠的二级评论
     * ```
     *
     * `bool has_folded_reply = 10;`
     */
    public var hasFoldedReply: kotlin.Boolean
      @JvmName("getHasFoldedReply")
      get() = _builder.getHasFoldedReply()
      @JvmName("setHasFoldedReply")
      set(value) {
        _builder.setHasFoldedReply(value)
      }
    /**
     * ```
     * 是否存在折叠的二级评论
     * ```
     *
     * `bool has_folded_reply = 10;`
     */
    public fun clearHasFoldedReply() {
      _builder.clearHasFoldedReply()
    }

    /**
     * ```
     * 是否折叠
     * ```
     *
     * `bool is_folded_reply = 11;`
     */
    public var isFoldedReply: kotlin.Boolean
      @JvmName("getIsFoldedReply")
      get() = _builder.getIsFoldedReply()
      @JvmName("setIsFoldedReply")
      set(value) {
        _builder.setIsFoldedReply(value)
      }
    /**
     * ```
     * 是否折叠
     * ```
     *
     * `bool is_folded_reply = 11;`
     */
    public fun clearIsFoldedReply() {
      _builder.clearIsFoldedReply()
    }

    /**
     * ```
     * 是否UP置顶
     * ```
     *
     * `bool is_up_top = 12;`
     */
    public var isUpTop: kotlin.Boolean
      @JvmName("getIsUpTop")
      get() = _builder.getIsUpTop()
      @JvmName("setIsUpTop")
      set(value) {
        _builder.setIsUpTop(value)
      }
    /**
     * ```
     * 是否UP置顶
     * ```
     *
     * `bool is_up_top = 12;`
     */
    public fun clearIsUpTop() {
      _builder.clearIsUpTop()
    }

    /**
     * ```
     * 是否管理置顶
     * ```
     *
     * `bool is_admin_top = 13;`
     */
    public var isAdminTop: kotlin.Boolean
      @JvmName("getIsAdminTop")
      get() = _builder.getIsAdminTop()
      @JvmName("setIsAdminTop")
      set(value) {
        _builder.setIsAdminTop(value)
      }
    /**
     * ```
     * 是否管理置顶
     * ```
     *
     * `bool is_admin_top = 13;`
     */
    public fun clearIsAdminTop() {
      _builder.clearIsAdminTop()
    }

    /**
     * ```
     * 是否置顶投票评论
     * ```
     *
     * `bool is_vote_top = 14;`
     */
    public var isVoteTop: kotlin.Boolean
      @JvmName("getIsVoteTop")
      get() = _builder.getIsVoteTop()
      @JvmName("setIsVoteTop")
      set(value) {
        _builder.setIsVoteTop(value)
      }
    /**
     * ```
     * 是否置顶投票评论
     * ```
     *
     * `bool is_vote_top = 14;`
     */
    public fun clearIsVoteTop() {
      _builder.clearIsVoteTop()
    }

    /**
     * ```
     * 最大收起显示行数
     * ```
     *
     * `int64 max_line = 15;`
     */
    public var maxLine: kotlin.Long
      @JvmName("getMaxLine")
      get() = _builder.getMaxLine()
      @JvmName("setMaxLine")
      set(value) {
        _builder.setMaxLine(value)
      }
    /**
     * ```
     * 最大收起显示行数
     * ```
     *
     * `int64 max_line = 15;`
     */
    public fun clearMaxLine() {
      _builder.clearMaxLine()
    }

    /**
     * ```
     * 该条评论可不可见
     * ```
     *
     * `bool invisible = 16;`
     */
    public var invisible: kotlin.Boolean
      @JvmName("getInvisible")
      get() = _builder.getInvisible()
      @JvmName("setInvisible")
      set(value) {
        _builder.setInvisible(value)
      }
    /**
     * ```
     * 该条评论可不可见
     * ```
     *
     * `bool invisible = 16;`
     */
    public fun clearInvisible() {
      _builder.clearInvisible()
    }

    /**
     * ```
     * 是否和up签订契约
     * ```
     *
     * `bool is_contractor = 17;`
     */
    public var isContractor: kotlin.Boolean
      @JvmName("getIsContractor")
      get() = _builder.getIsContractor()
      @JvmName("setIsContractor")
      set(value) {
        _builder.setIsContractor(value)
      }
    /**
     * ```
     * 是否和up签订契约
     * ```
     *
     * `bool is_contractor = 17;`
     */
    public fun clearIsContractor() {
      _builder.clearIsContractor()
    }

    /**
     * ```
     * 是否是笔记评论
     * ```
     *
     * `bool is_note = 18;`
     */
    public var isNote: kotlin.Boolean
      @JvmName("getIsNote")
      get() = _builder.getIsNote()
      @JvmName("setIsNote")
      set(value) {
        _builder.setIsNote(value)
      }
    /**
     * ```
     * 是否是笔记评论
     * ```
     *
     * `bool is_note = 18;`
     */
    public fun clearIsNote() {
      _builder.clearIsNote()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class CardLabelsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 评论条目标签列表
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.ReplyCardLabel card_labels = 19;`
     */
     public val cardLabels: com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.ReplyCardLabel, CardLabelsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getCardLabelsList()
      )
    /**
     * ```
     * 评论条目标签列表
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.ReplyCardLabel card_labels = 19;`
     * @param value The cardLabels to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addCardLabels")
    public fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.ReplyCardLabel, CardLabelsProxy>.add(value: bilibili.main.community.reply.v1.ReplyCardLabel) {
      _builder.addCardLabels(value)
    }
    /**
     * ```
     * 评论条目标签列表
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.ReplyCardLabel card_labels = 19;`
     * @param value The cardLabels to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignCardLabels")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.ReplyCardLabel, CardLabelsProxy>.plusAssign(value: bilibili.main.community.reply.v1.ReplyCardLabel) {
      add(value)
    }
    /**
     * ```
     * 评论条目标签列表
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.ReplyCardLabel card_labels = 19;`
     * @param values The cardLabels to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllCardLabels")
    public fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.ReplyCardLabel, CardLabelsProxy>.addAll(values: kotlin.collections.Iterable<bilibili.main.community.reply.v1.ReplyCardLabel>) {
      _builder.addAllCardLabels(values)
    }
    /**
     * ```
     * 评论条目标签列表
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.ReplyCardLabel card_labels = 19;`
     * @param values The cardLabels to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllCardLabels")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.ReplyCardLabel, CardLabelsProxy>.plusAssign(values: kotlin.collections.Iterable<bilibili.main.community.reply.v1.ReplyCardLabel>) {
      addAll(values)
    }
    /**
     * ```
     * 评论条目标签列表
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.ReplyCardLabel card_labels = 19;`
     * @param index The index to set the value at.
     * @param value The cardLabels to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setCardLabels")
    public operator fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.ReplyCardLabel, CardLabelsProxy>.set(index: kotlin.Int, value: bilibili.main.community.reply.v1.ReplyCardLabel) {
      _builder.setCardLabels(index, value)
    }
    /**
     * ```
     * 评论条目标签列表
     * ```
     *
     * `repeated .bilibili.main.community.reply.v1.ReplyCardLabel card_labels = 19;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearCardLabels")
    public fun com.google.protobuf.kotlin.DslList<bilibili.main.community.reply.v1.ReplyCardLabel, CardLabelsProxy>.clear() {
      _builder.clearCardLabels()
    }


    /**
     * ```
     * 子评论数文案 "共x条回复"
     * ```
     *
     * `string sub_reply_entry_text = 20;`
     */
    public var subReplyEntryText: kotlin.String
      @JvmName("getSubReplyEntryText")
      get() = _builder.getSubReplyEntryText()
      @JvmName("setSubReplyEntryText")
      set(value) {
        _builder.setSubReplyEntryText(value)
      }
    /**
     * ```
     * 子评论数文案 "共x条回复"
     * ```
     *
     * `string sub_reply_entry_text = 20;`
     */
    public fun clearSubReplyEntryText() {
      _builder.clearSubReplyEntryText()
    }

    /**
     * ```
     * 子评论数文案 "相关回复共x条"
     * ```
     *
     * `string sub_reply_title_text = 21;`
     */
    public var subReplyTitleText: kotlin.String
      @JvmName("getSubReplyTitleText")
      get() = _builder.getSubReplyTitleText()
      @JvmName("setSubReplyTitleText")
      set(value) {
        _builder.setSubReplyTitleText(value)
      }
    /**
     * ```
     * 子评论数文案 "相关回复共x条"
     * ```
     *
     * `string sub_reply_title_text = 21;`
     */
    public fun clearSubReplyTitleText() {
      _builder.clearSubReplyTitleText()
    }

    /**
     * ```
     * 契约显示文案
     * ```
     *
     * `string contract_desc = 22;`
     */
    public var contractDesc: kotlin.String
      @JvmName("getContractDesc")
      get() = _builder.getContractDesc()
      @JvmName("setContractDesc")
      set(value) {
        _builder.setContractDesc(value)
      }
    /**
     * ```
     * 契约显示文案
     * ```
     *
     * `string contract_desc = 22;`
     */
    public fun clearContractDesc() {
      _builder.clearContractDesc()
    }

    /**
     * ```
     * 发布时间文案 "x天前发布"
     * ```
     *
     * `string time_desc = 23;`
     */
    public var timeDesc: kotlin.String
      @JvmName("getTimeDesc")
      get() = _builder.getTimeDesc()
      @JvmName("setTimeDesc")
      set(value) {
        _builder.setTimeDesc(value)
      }
    /**
     * ```
     * 发布时间文案 "x天前发布"
     * ```
     *
     * `string time_desc = 23;`
     */
    public fun clearTimeDesc() {
      _builder.clearTimeDesc()
    }

    /**
     * ```
     * ```
     *
     * `string biz_scene = 24;`
     */
    public var bizScene: kotlin.String
      @JvmName("getBizScene")
      get() = _builder.getBizScene()
      @JvmName("setBizScene")
      set(value) {
        _builder.setBizScene(value)
      }
    /**
     * ```
     * ```
     *
     * `string biz_scene = 24;`
     */
    public fun clearBizScene() {
      _builder.clearBizScene()
    }

    /**
     * ```
     * IP属地信息 "IP属地：xxx"
     * ```
     *
     * `string location = 25;`
     */
    public var location: kotlin.String
      @JvmName("getLocation")
      get() = _builder.getLocation()
      @JvmName("setLocation")
      set(value) {
        _builder.setLocation(value)
      }
    /**
     * ```
     * IP属地信息 "IP属地：xxx"
     * ```
     *
     * `string location = 25;`
     */
    public fun clearLocation() {
      _builder.clearLocation()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.main.community.reply.v1.ReplyControl.copy(block: `bilibili.main.community.reply.v1`.ReplyControlKt.Dsl.() -> kotlin.Unit): bilibili.main.community.reply.v1.ReplyControl =
  `bilibili.main.community.reply.v1`.ReplyControlKt.Dsl._create(this.toBuilder()).apply { block() }._build()

