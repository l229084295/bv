// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/playershared/playershared.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.playershared;

@kotlin.jvm.JvmName("-initializelossLessItem")
public inline fun lossLessItem(block: bilibili.playershared.LossLessItemKt.Dsl.() -> kotlin.Unit): bilibili.playershared.LossLessItem =
  bilibili.playershared.LossLessItemKt.Dsl._create(bilibili.playershared.LossLessItem.newBuilder()).apply { block() }._build()
/**
 * ```
 * HIRES伴音流信息
 * ```
 *
 * Protobuf type `bilibili.playershared.LossLessItem`
 */
public object LossLessItemKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.playershared.LossLessItem.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.playershared.LossLessItem.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.playershared.LossLessItem = _builder.build()

    /**
     * ```
     * 是否为hires
     * ```
     *
     * `bool is_lossless_audio = 1;`
     */
    public var isLosslessAudio: kotlin.Boolean
      @JvmName("getIsLosslessAudio")
      get() = _builder.getIsLosslessAudio()
      @JvmName("setIsLosslessAudio")
      set(value) {
        _builder.setIsLosslessAudio(value)
      }
    /**
     * ```
     * 是否为hires
     * ```
     *
     * `bool is_lossless_audio = 1;`
     */
    public fun clearIsLosslessAudio() {
      _builder.clearIsLosslessAudio()
    }

    /**
     * ```
     * 音频流信息
     * ```
     *
     * `.bilibili.playershared.DashItem audio = 2;`
     */
    public var audio: bilibili.playershared.DashItem
      @JvmName("getAudio")
      get() = _builder.getAudio()
      @JvmName("setAudio")
      set(value) {
        _builder.setAudio(value)
      }
    /**
     * ```
     * 音频流信息
     * ```
     *
     * `.bilibili.playershared.DashItem audio = 2;`
     */
    public fun clearAudio() {
      _builder.clearAudio()
    }
    /**
     * ```
     * 音频流信息
     * ```
     *
     * `.bilibili.playershared.DashItem audio = 2;`
     * @return Whether the audio field is set.
     */
    public fun hasAudio(): kotlin.Boolean {
      return _builder.hasAudio()
    }
    public val LossLessItemKt.Dsl.audioOrNull: bilibili.playershared.DashItem?
      get() = _builder.audioOrNull

    /**
     * ```
     * 是否需要大会员
     * ```
     *
     * `bool need_vip = 3;`
     */
    public var needVip: kotlin.Boolean
      @JvmName("getNeedVip")
      get() = _builder.getNeedVip()
      @JvmName("setNeedVip")
      set(value) {
        _builder.setNeedVip(value)
      }
    /**
     * ```
     * 是否需要大会员
     * ```
     *
     * `bool need_vip = 3;`
     */
    public fun clearNeedVip() {
      _builder.clearNeedVip()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.playershared.LossLessItem.copy(block: `bilibili.playershared`.LossLessItemKt.Dsl.() -> kotlin.Unit): bilibili.playershared.LossLessItem =
  `bilibili.playershared`.LossLessItemKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.playershared.LossLessItemOrBuilder.audioOrNull: bilibili.playershared.DashItem?
  get() = if (hasAudio()) getAudio() else null

