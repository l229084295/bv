// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/playershared/playershared.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.playershared;

@kotlin.jvm.JvmName("-initializestreamInfo")
public inline fun streamInfo(block: bilibili.playershared.StreamInfoKt.Dsl.() -> kotlin.Unit): bilibili.playershared.StreamInfo =
  bilibili.playershared.StreamInfoKt.Dsl._create(bilibili.playershared.StreamInfo.newBuilder()).apply { block() }._build()
/**
 * ```
 * 视频流信息: 元数据
 * ```
 *
 * Protobuf type `bilibili.playershared.StreamInfo`
 */
public object StreamInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.playershared.StreamInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.playershared.StreamInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.playershared.StreamInfo = _builder.build()

    /**
     * ```
     * 清晰度
     * ```
     *
     * `uint32 quality = 1;`
     */
    public var quality: kotlin.Int
      @JvmName("getQuality")
      get() = _builder.getQuality()
      @JvmName("setQuality")
      set(value) {
        _builder.setQuality(value)
      }
    /**
     * ```
     * 清晰度
     * ```
     *
     * `uint32 quality = 1;`
     */
    public fun clearQuality() {
      _builder.clearQuality()
    }

    /**
     * ```
     * 格式
     * ```
     *
     * `string format = 2;`
     */
    public var format: kotlin.String
      @JvmName("getFormat")
      get() = _builder.getFormat()
      @JvmName("setFormat")
      set(value) {
        _builder.setFormat(value)
      }
    /**
     * ```
     * 格式
     * ```
     *
     * `string format = 2;`
     */
    public fun clearFormat() {
      _builder.clearFormat()
    }

    /**
     * ```
     * 格式描述
     * ```
     *
     * `string description = 3;`
     */
    public var description: kotlin.String
      @JvmName("getDescription")
      get() = _builder.getDescription()
      @JvmName("setDescription")
      set(value) {
        _builder.setDescription(value)
      }
    /**
     * ```
     * 格式描述
     * ```
     *
     * `string description = 3;`
     */
    public fun clearDescription() {
      _builder.clearDescription()
    }

    /**
     * ```
     * 错误码
     * ```
     *
     * `uint32 err_code = 4;`
     */
    public var errCode: kotlin.Int
      @JvmName("getErrCode")
      get() = _builder.getErrCode()
      @JvmName("setErrCode")
      set(value) {
        _builder.setErrCode(value)
      }
    /**
     * ```
     * 错误码
     * ```
     *
     * `uint32 err_code = 4;`
     */
    public fun clearErrCode() {
      _builder.clearErrCode()
    }

    /**
     * ```
     * 不满足条件信息
     * ```
     *
     * `.bilibili.playershared.StreamLimit limit = 5;`
     */
    public var limit: bilibili.playershared.StreamLimit
      @JvmName("getLimit")
      get() = _builder.getLimit()
      @JvmName("setLimit")
      set(value) {
        _builder.setLimit(value)
      }
    /**
     * ```
     * 不满足条件信息
     * ```
     *
     * `.bilibili.playershared.StreamLimit limit = 5;`
     */
    public fun clearLimit() {
      _builder.clearLimit()
    }
    /**
     * ```
     * 不满足条件信息
     * ```
     *
     * `.bilibili.playershared.StreamLimit limit = 5;`
     * @return Whether the limit field is set.
     */
    public fun hasLimit(): kotlin.Boolean {
      return _builder.hasLimit()
    }
    public val StreamInfoKt.Dsl.limitOrNull: bilibili.playershared.StreamLimit?
      get() = _builder.limitOrNull

    /**
     * ```
     * 是否需要vip
     * ```
     *
     * `bool need_vip = 6;`
     */
    public var needVip: kotlin.Boolean
      @JvmName("getNeedVip")
      get() = _builder.getNeedVip()
      @JvmName("setNeedVip")
      set(value) {
        _builder.setNeedVip(value)
      }
    /**
     * ```
     * 是否需要vip
     * ```
     *
     * `bool need_vip = 6;`
     */
    public fun clearNeedVip() {
      _builder.clearNeedVip()
    }

    /**
     * ```
     * 是否需要登录
     * ```
     *
     * `bool need_login = 7;`
     */
    public var needLogin: kotlin.Boolean
      @JvmName("getNeedLogin")
      get() = _builder.getNeedLogin()
      @JvmName("setNeedLogin")
      set(value) {
        _builder.setNeedLogin(value)
      }
    /**
     * ```
     * 是否需要登录
     * ```
     *
     * `bool need_login = 7;`
     */
    public fun clearNeedLogin() {
      _builder.clearNeedLogin()
    }

    /**
     * ```
     * 是否完整
     * ```
     *
     * `bool intact = 8;`
     */
    public var intact: kotlin.Boolean
      @JvmName("getIntact")
      get() = _builder.getIntact()
      @JvmName("setIntact")
      set(value) {
        _builder.setIntact(value)
      }
    /**
     * ```
     * 是否完整
     * ```
     *
     * `bool intact = 8;`
     */
    public fun clearIntact() {
      _builder.clearIntact()
    }

    /**
     * ```
     * 是否非全二压
     * ```
     *
     * `bool no_rexcode = 9;`
     */
    public var noRexcode: kotlin.Boolean
      @JvmName("getNoRexcode")
      get() = _builder.getNoRexcode()
      @JvmName("setNoRexcode")
      set(value) {
        _builder.setNoRexcode(value)
      }
    /**
     * ```
     * 是否非全二压
     * ```
     *
     * `bool no_rexcode = 9;`
     */
    public fun clearNoRexcode() {
      _builder.clearNoRexcode()
    }

    /**
     * ```
     * 清晰度属性位
     * ```
     *
     * `int64 attribute = 10;`
     */
    public var attribute: kotlin.Long
      @JvmName("getAttribute")
      get() = _builder.getAttribute()
      @JvmName("setAttribute")
      set(value) {
        _builder.setAttribute(value)
      }
    /**
     * ```
     * 清晰度属性位
     * ```
     *
     * `int64 attribute = 10;`
     */
    public fun clearAttribute() {
      _builder.clearAttribute()
    }

    /**
     * ```
     * 新版格式描述
     * ```
     *
     * `string new_description = 11;`
     */
    public var newDescription: kotlin.String
      @JvmName("getNewDescription")
      get() = _builder.getNewDescription()
      @JvmName("setNewDescription")
      set(value) {
        _builder.setNewDescription(value)
      }
    /**
     * ```
     * 新版格式描述
     * ```
     *
     * `string new_description = 11;`
     */
    public fun clearNewDescription() {
      _builder.clearNewDescription()
    }

    /**
     * ```
     * 格式文字
     * ```
     *
     * `string display_desc = 12;`
     */
    public var displayDesc: kotlin.String
      @JvmName("getDisplayDesc")
      get() = _builder.getDisplayDesc()
      @JvmName("setDisplayDesc")
      set(value) {
        _builder.setDisplayDesc(value)
      }
    /**
     * ```
     * 格式文字
     * ```
     *
     * `string display_desc = 12;`
     */
    public fun clearDisplayDesc() {
      _builder.clearDisplayDesc()
    }

    /**
     * ```
     * 新版格式描述备注
     * ```
     *
     * `string superscript = 13;`
     */
    public var superscript: kotlin.String
      @JvmName("getSuperscript")
      get() = _builder.getSuperscript()
      @JvmName("setSuperscript")
      set(value) {
        _builder.setSuperscript(value)
      }
    /**
     * ```
     * 新版格式描述备注
     * ```
     *
     * `string superscript = 13;`
     */
    public fun clearSuperscript() {
      _builder.clearSuperscript()
    }

    /**
     * ```
     * ```
     *
     * `bool vip_free = 14;`
     */
    public var vipFree: kotlin.Boolean
      @JvmName("getVipFree")
      get() = _builder.getVipFree()
      @JvmName("setVipFree")
      set(value) {
        _builder.setVipFree(value)
      }
    /**
     * ```
     * ```
     *
     * `bool vip_free = 14;`
     */
    public fun clearVipFree() {
      _builder.clearVipFree()
    }

    /**
     * ```
     * ```
     *
     * `string subtitle = 15;`
     */
    public var subtitle: kotlin.String
      @JvmName("getSubtitle")
      get() = _builder.getSubtitle()
      @JvmName("setSubtitle")
      set(value) {
        _builder.setSubtitle(value)
      }
    /**
     * ```
     * ```
     *
     * `string subtitle = 15;`
     */
    public fun clearSubtitle() {
      _builder.clearSubtitle()
    }

    /**
     * ```
     * 方案
     * ```
     *
     * `.bilibili.playershared.Scheme scheme = 16;`
     */
    public var scheme: bilibili.playershared.Scheme
      @JvmName("getScheme")
      get() = _builder.getScheme()
      @JvmName("setScheme")
      set(value) {
        _builder.setScheme(value)
      }
    /**
     * ```
     * 方案
     * ```
     *
     * `.bilibili.playershared.Scheme scheme = 16;`
     */
    public fun clearScheme() {
      _builder.clearScheme()
    }
    /**
     * ```
     * 方案
     * ```
     *
     * `.bilibili.playershared.Scheme scheme = 16;`
     * @return Whether the scheme field is set.
     */
    public fun hasScheme(): kotlin.Boolean {
      return _builder.hasScheme()
    }
    public val StreamInfoKt.Dsl.schemeOrNull: bilibili.playershared.Scheme?
      get() = _builder.schemeOrNull

    /**
     * ```
     * 支持drm
     * ```
     *
     * `bool support_drm = 17;`
     */
    public var supportDrm: kotlin.Boolean
      @JvmName("getSupportDrm")
      get() = _builder.getSupportDrm()
      @JvmName("setSupportDrm")
      set(value) {
        _builder.setSupportDrm(value)
      }
    /**
     * ```
     * 支持drm
     * ```
     *
     * `bool support_drm = 17;`
     */
    public fun clearSupportDrm() {
      _builder.clearSupportDrm()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.playershared.StreamInfo.copy(block: `bilibili.playershared`.StreamInfoKt.Dsl.() -> kotlin.Unit): bilibili.playershared.StreamInfo =
  `bilibili.playershared`.StreamInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.playershared.StreamInfoOrBuilder.limitOrNull: bilibili.playershared.StreamLimit?
  get() = if (hasLimit()) getLimit() else null

public val bilibili.playershared.StreamInfoOrBuilder.schemeOrNull: bilibili.playershared.Scheme?
  get() = if (hasScheme()) getScheme() else null

