// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/playershared/playershared.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.playershared;

@kotlin.jvm.JvmName("-initializeevent")
public inline fun event(block: bilibili.playershared.EventKt.Dsl.() -> kotlin.Unit): bilibili.playershared.Event =
  bilibili.playershared.EventKt.Dsl._create(bilibili.playershared.Event.newBuilder()).apply { block() }._build()
/**
 * ```
 * 事件
 * ```
 *
 * Protobuf type `bilibili.playershared.Event`
 */
public object EventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.playershared.Event.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.playershared.Event.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.playershared.Event = _builder.build()

    /**
     * ```
     * 震动
     * ```
     *
     * `.bilibili.playershared.Shake shake = 1;`
     */
    public var shake: bilibili.playershared.Shake
      @JvmName("getShake")
      get() = _builder.getShake()
      @JvmName("setShake")
      set(value) {
        _builder.setShake(value)
      }
    /**
     * ```
     * 震动
     * ```
     *
     * `.bilibili.playershared.Shake shake = 1;`
     */
    public fun clearShake() {
      _builder.clearShake()
    }
    /**
     * ```
     * 震动
     * ```
     *
     * `.bilibili.playershared.Shake shake = 1;`
     * @return Whether the shake field is set.
     */
    public fun hasShake(): kotlin.Boolean {
      return _builder.hasShake()
    }
    public val EventKt.Dsl.shakeOrNull: bilibili.playershared.Shake?
      get() = _builder.shakeOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.playershared.Event.copy(block: `bilibili.playershared`.EventKt.Dsl.() -> kotlin.Unit): bilibili.playershared.Event =
  `bilibili.playershared`.EventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.playershared.EventOrBuilder.shakeOrNull: bilibili.playershared.Shake?
  get() = if (hasShake()) getShake() else null

