// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/community/service/dm/v1/dm.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.community.service.dm.v1;

@kotlin.jvm.JvmName("-initializedanmuWebPlayerConfig")
public inline fun danmuWebPlayerConfig(block: bilibili.community.service.dm.v1.DanmuWebPlayerConfigKt.Dsl.() -> kotlin.Unit): bilibili.community.service.dm.v1.DanmuWebPlayerConfig =
  bilibili.community.service.dm.v1.DanmuWebPlayerConfigKt.Dsl._create(bilibili.community.service.dm.v1.DanmuWebPlayerConfig.newBuilder()).apply { block() }._build()
/**
 * ```
 * web端用户弹幕配置
 * ```
 *
 * Protobuf type `bilibili.community.service.dm.v1.DanmuWebPlayerConfig`
 */
public object DanmuWebPlayerConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.community.service.dm.v1.DanmuWebPlayerConfig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.community.service.dm.v1.DanmuWebPlayerConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.community.service.dm.v1.DanmuWebPlayerConfig = _builder.build()

    /**
     * ```
     * 是否开启弹幕
     * ```
     *
     * `bool dm_switch = 1;`
     */
    public var dmSwitch: kotlin.Boolean
      @JvmName("getDmSwitch")
      get() = _builder.getDmSwitch()
      @JvmName("setDmSwitch")
      set(value) {
        _builder.setDmSwitch(value)
      }
    /**
     * ```
     * 是否开启弹幕
     * ```
     *
     * `bool dm_switch = 1;`
     */
    public fun clearDmSwitch() {
      _builder.clearDmSwitch()
    }

    /**
     * ```
     * 是否开启智能云屏蔽
     * ```
     *
     * `bool ai_switch = 2;`
     */
    public var aiSwitch: kotlin.Boolean
      @JvmName("getAiSwitch")
      get() = _builder.getAiSwitch()
      @JvmName("setAiSwitch")
      set(value) {
        _builder.setAiSwitch(value)
      }
    /**
     * ```
     * 是否开启智能云屏蔽
     * ```
     *
     * `bool ai_switch = 2;`
     */
    public fun clearAiSwitch() {
      _builder.clearAiSwitch()
    }

    /**
     * ```
     * 智能云屏蔽等级
     * ```
     *
     * `int32 ai_level = 3;`
     */
    public var aiLevel: kotlin.Int
      @JvmName("getAiLevel")
      get() = _builder.getAiLevel()
      @JvmName("setAiLevel")
      set(value) {
        _builder.setAiLevel(value)
      }
    /**
     * ```
     * 智能云屏蔽等级
     * ```
     *
     * `int32 ai_level = 3;`
     */
    public fun clearAiLevel() {
      _builder.clearAiLevel()
    }

    /**
     * ```
     * 是否屏蔽顶端弹幕
     * ```
     *
     * `bool blocktop = 4;`
     */
    public var blocktop: kotlin.Boolean
      @JvmName("getBlocktop")
      get() = _builder.getBlocktop()
      @JvmName("setBlocktop")
      set(value) {
        _builder.setBlocktop(value)
      }
    /**
     * ```
     * 是否屏蔽顶端弹幕
     * ```
     *
     * `bool blocktop = 4;`
     */
    public fun clearBlocktop() {
      _builder.clearBlocktop()
    }

    /**
     * ```
     * 是否屏蔽滚动弹幕
     * ```
     *
     * `bool blockscroll = 5;`
     */
    public var blockscroll: kotlin.Boolean
      @JvmName("getBlockscroll")
      get() = _builder.getBlockscroll()
      @JvmName("setBlockscroll")
      set(value) {
        _builder.setBlockscroll(value)
      }
    /**
     * ```
     * 是否屏蔽滚动弹幕
     * ```
     *
     * `bool blockscroll = 5;`
     */
    public fun clearBlockscroll() {
      _builder.clearBlockscroll()
    }

    /**
     * ```
     * 是否屏蔽底端弹幕
     * ```
     *
     * `bool blockbottom = 6;`
     */
    public var blockbottom: kotlin.Boolean
      @JvmName("getBlockbottom")
      get() = _builder.getBlockbottom()
      @JvmName("setBlockbottom")
      set(value) {
        _builder.setBlockbottom(value)
      }
    /**
     * ```
     * 是否屏蔽底端弹幕
     * ```
     *
     * `bool blockbottom = 6;`
     */
    public fun clearBlockbottom() {
      _builder.clearBlockbottom()
    }

    /**
     * ```
     * 是否屏蔽彩色弹幕
     * ```
     *
     * `bool blockcolor = 7;`
     */
    public var blockcolor: kotlin.Boolean
      @JvmName("getBlockcolor")
      get() = _builder.getBlockcolor()
      @JvmName("setBlockcolor")
      set(value) {
        _builder.setBlockcolor(value)
      }
    /**
     * ```
     * 是否屏蔽彩色弹幕
     * ```
     *
     * `bool blockcolor = 7;`
     */
    public fun clearBlockcolor() {
      _builder.clearBlockcolor()
    }

    /**
     * ```
     * 是否屏蔽重复弹幕
     * ```
     *
     * `bool blockspecial = 8;`
     */
    public var blockspecial: kotlin.Boolean
      @JvmName("getBlockspecial")
      get() = _builder.getBlockspecial()
      @JvmName("setBlockspecial")
      set(value) {
        _builder.setBlockspecial(value)
      }
    /**
     * ```
     * 是否屏蔽重复弹幕
     * ```
     *
     * `bool blockspecial = 8;`
     */
    public fun clearBlockspecial() {
      _builder.clearBlockspecial()
    }

    /**
     * ```
     *
     * ```
     *
     * `bool preventshade = 9;`
     */
    public var preventshade: kotlin.Boolean
      @JvmName("getPreventshade")
      get() = _builder.getPreventshade()
      @JvmName("setPreventshade")
      set(value) {
        _builder.setPreventshade(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `bool preventshade = 9;`
     */
    public fun clearPreventshade() {
      _builder.clearPreventshade()
    }

    /**
     * ```
     *
     * ```
     *
     * `bool dmask = 10;`
     */
    public var dmask: kotlin.Boolean
      @JvmName("getDmask")
      get() = _builder.getDmask()
      @JvmName("setDmask")
      set(value) {
        _builder.setDmask(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `bool dmask = 10;`
     */
    public fun clearDmask() {
      _builder.clearDmask()
    }

    /**
     * ```
     *
     * ```
     *
     * `float opacity = 11;`
     */
    public var opacity: kotlin.Float
      @JvmName("getOpacity")
      get() = _builder.getOpacity()
      @JvmName("setOpacity")
      set(value) {
        _builder.setOpacity(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `float opacity = 11;`
     */
    public fun clearOpacity() {
      _builder.clearOpacity()
    }

    /**
     * ```
     *
     * ```
     *
     * `int32 dmarea = 12;`
     */
    public var dmarea: kotlin.Int
      @JvmName("getDmarea")
      get() = _builder.getDmarea()
      @JvmName("setDmarea")
      set(value) {
        _builder.setDmarea(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `int32 dmarea = 12;`
     */
    public fun clearDmarea() {
      _builder.clearDmarea()
    }

    /**
     * ```
     *
     * ```
     *
     * `float speedplus = 13;`
     */
    public var speedplus: kotlin.Float
      @JvmName("getSpeedplus")
      get() = _builder.getSpeedplus()
      @JvmName("setSpeedplus")
      set(value) {
        _builder.setSpeedplus(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `float speedplus = 13;`
     */
    public fun clearSpeedplus() {
      _builder.clearSpeedplus()
    }

    /**
     * ```
     * 弹幕字号
     * ```
     *
     * `float fontsize = 14;`
     */
    public var fontsize: kotlin.Float
      @JvmName("getFontsize")
      get() = _builder.getFontsize()
      @JvmName("setFontsize")
      set(value) {
        _builder.setFontsize(value)
      }
    /**
     * ```
     * 弹幕字号
     * ```
     *
     * `float fontsize = 14;`
     */
    public fun clearFontsize() {
      _builder.clearFontsize()
    }

    /**
     * ```
     *
     * ```
     *
     * `bool screensync = 15;`
     */
    public var screensync: kotlin.Boolean
      @JvmName("getScreensync")
      get() = _builder.getScreensync()
      @JvmName("setScreensync")
      set(value) {
        _builder.setScreensync(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `bool screensync = 15;`
     */
    public fun clearScreensync() {
      _builder.clearScreensync()
    }

    /**
     * ```
     *
     * ```
     *
     * `bool speedsync = 16;`
     */
    public var speedsync: kotlin.Boolean
      @JvmName("getSpeedsync")
      get() = _builder.getSpeedsync()
      @JvmName("setSpeedsync")
      set(value) {
        _builder.setSpeedsync(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `bool speedsync = 16;`
     */
    public fun clearSpeedsync() {
      _builder.clearSpeedsync()
    }

    /**
     * ```
     *
     * ```
     *
     * `string fontfamily = 17;`
     */
    public var fontfamily: kotlin.String
      @JvmName("getFontfamily")
      get() = _builder.getFontfamily()
      @JvmName("setFontfamily")
      set(value) {
        _builder.setFontfamily(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `string fontfamily = 17;`
     */
    public fun clearFontfamily() {
      _builder.clearFontfamily()
    }

    /**
     * ```
     * 是否使用加粗
     * ```
     *
     * `bool bold = 18;`
     */
    public var bold: kotlin.Boolean
      @JvmName("getBold")
      get() = _builder.getBold()
      @JvmName("setBold")
      set(value) {
        _builder.setBold(value)
      }
    /**
     * ```
     * 是否使用加粗
     * ```
     *
     * `bool bold = 18;`
     */
    public fun clearBold() {
      _builder.clearBold()
    }

    /**
     * ```
     *
     * ```
     *
     * `int32 fontborder = 19;`
     */
    public var fontborder: kotlin.Int
      @JvmName("getFontborder")
      get() = _builder.getFontborder()
      @JvmName("setFontborder")
      set(value) {
        _builder.setFontborder(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `int32 fontborder = 19;`
     */
    public fun clearFontborder() {
      _builder.clearFontborder()
    }

    /**
     * ```
     * 弹幕渲染类型
     * ```
     *
     * `string draw_type = 20;`
     */
    public var drawType: kotlin.String
      @JvmName("getDrawType")
      get() = _builder.getDrawType()
      @JvmName("setDrawType")
      set(value) {
        _builder.setDrawType(value)
      }
    /**
     * ```
     * 弹幕渲染类型
     * ```
     *
     * `string draw_type = 20;`
     */
    public fun clearDrawType() {
      _builder.clearDrawType()
    }

    /**
     * ```
     * ```
     *
     * `int32 senior_mode_switch = 21;`
     */
    public var seniorModeSwitch: kotlin.Int
      @JvmName("getSeniorModeSwitch")
      get() = _builder.getSeniorModeSwitch()
      @JvmName("setSeniorModeSwitch")
      set(value) {
        _builder.setSeniorModeSwitch(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 senior_mode_switch = 21;`
     */
    public fun clearSeniorModeSwitch() {
      _builder.clearSeniorModeSwitch()
    }

    /**
     * ```
     * ```
     *
     * `int32 ai_level_v2 = 22;`
     */
    public var aiLevelV2: kotlin.Int
      @JvmName("getAiLevelV2")
      get() = _builder.getAiLevelV2()
      @JvmName("setAiLevelV2")
      set(value) {
        _builder.setAiLevelV2(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 ai_level_v2 = 22;`
     */
    public fun clearAiLevelV2() {
      _builder.clearAiLevelV2()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class AiLevelV2MapProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * ```
     *
     * `map<int32, int32> ai_level_v2_map = 23;`
     */
     public val aiLevelV2Map: com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, AiLevelV2MapProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getAiLevelV2MapMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getAiLevelV2MapMap()
      )
    /**
     * ```
     * ```
     *
     * `map<int32, int32> ai_level_v2_map = 23;`
     */
    @JvmName("putAiLevelV2Map")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, AiLevelV2MapProxy>
      .put(key: kotlin.Int, value: kotlin.Int) {
         _builder.putAiLevelV2Map(key, value)
       }
    /**
     * ```
     * ```
     *
     * `map<int32, int32> ai_level_v2_map = 23;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setAiLevelV2Map")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, AiLevelV2MapProxy>
      .set(key: kotlin.Int, value: kotlin.Int) {
         put(key, value)
       }
    /**
     * ```
     * ```
     *
     * `map<int32, int32> ai_level_v2_map = 23;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeAiLevelV2Map")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, AiLevelV2MapProxy>
      .remove(key: kotlin.Int) {
         _builder.removeAiLevelV2Map(key)
       }
    /**
     * ```
     * ```
     *
     * `map<int32, int32> ai_level_v2_map = 23;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllAiLevelV2Map")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, AiLevelV2MapProxy>
      .putAll(map: kotlin.collections.Map<kotlin.Int, kotlin.Int>) {
         _builder.putAllAiLevelV2Map(map)
       }
    /**
     * ```
     * ```
     *
     * `map<int32, int32> ai_level_v2_map = 23;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearAiLevelV2Map")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, AiLevelV2MapProxy>
      .clear() {
         _builder.clearAiLevelV2Map()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.community.service.dm.v1.DanmuWebPlayerConfig.copy(block: `bilibili.community.service.dm.v1`.DanmuWebPlayerConfigKt.Dsl.() -> kotlin.Unit): bilibili.community.service.dm.v1.DanmuWebPlayerConfig =
  `bilibili.community.service.dm.v1`.DanmuWebPlayerConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

