// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/pgc/gateway/player/v1/playurl.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.pgc.gateway.player.v1;

@kotlin.jvm.JvmName("-initializeprojectReq")
public inline fun projectReq(block: bilibili.pgc.gateway.player.v1.ProjectReqKt.Dsl.() -> kotlin.Unit): bilibili.pgc.gateway.player.v1.ProjectReq =
  bilibili.pgc.gateway.player.v1.ProjectReqKt.Dsl._create(bilibili.pgc.gateway.player.v1.ProjectReq.newBuilder()).apply { block() }._build()
/**
 * ```
 * 投屏地址-请求
 * ```
 *
 * Protobuf type `bilibili.pgc.gateway.player.v1.ProjectReq`
 */
public object ProjectReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.pgc.gateway.player.v1.ProjectReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.pgc.gateway.player.v1.ProjectReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.pgc.gateway.player.v1.ProjectReq = _builder.build()

    /**
     * ```
     * 剧集epid
     * ```
     *
     * `int64 ep_id = 1;`
     */
    public var epId: kotlin.Long
      @JvmName("getEpId")
      get() = _builder.getEpId()
      @JvmName("setEpId")
      set(value) {
        _builder.setEpId(value)
      }
    /**
     * ```
     * 剧集epid
     * ```
     *
     * `int64 ep_id = 1;`
     */
    public fun clearEpId() {
      _builder.clearEpId()
    }

    /**
     * ```
     * 视频cid
     * ```
     *
     * `int64 cid = 2;`
     */
    public var cid: kotlin.Long
      @JvmName("getCid")
      get() = _builder.getCid()
      @JvmName("setCid")
      set(value) {
        _builder.setCid(value)
      }
    /**
     * ```
     * 视频cid
     * ```
     *
     * `int64 cid = 2;`
     */
    public fun clearCid() {
      _builder.clearCid()
    }

    /**
     * ```
     * 清晰度
     * ```
     *
     * `int64 qn = 3;`
     */
    public var qn: kotlin.Long
      @JvmName("getQn")
      get() = _builder.getQn()
      @JvmName("setQn")
      set(value) {
        _builder.setQn(value)
      }
    /**
     * ```
     * 清晰度
     * ```
     *
     * `int64 qn = 3;`
     */
    public fun clearQn() {
      _builder.clearQn()
    }

    /**
     * ```
     * 视频流版本
     * ```
     *
     * `int32 fnver = 4;`
     */
    public var fnver: kotlin.Int
      @JvmName("getFnver")
      get() = _builder.getFnver()
      @JvmName("setFnver")
      set(value) {
        _builder.setFnver(value)
      }
    /**
     * ```
     * 视频流版本
     * ```
     *
     * `int32 fnver = 4;`
     */
    public fun clearFnver() {
      _builder.clearFnver()
    }

    /**
     * ```
     * 视频流格式
     * ```
     *
     * `int32 fnval = 5;`
     */
    public var fnval: kotlin.Int
      @JvmName("getFnval")
      get() = _builder.getFnval()
      @JvmName("setFnval")
      set(value) {
        _builder.setFnval(value)
      }
    /**
     * ```
     * 视频流格式
     * ```
     *
     * `int32 fnval = 5;`
     */
    public fun clearFnval() {
      _builder.clearFnval()
    }

    /**
     * ```
     * 下载模式
     * 0:播放 1:flv下载 2:dash下载
     * ```
     *
     * `uint32 download = 6;`
     */
    public var download: kotlin.Int
      @JvmName("getDownload")
      get() = _builder.getDownload()
      @JvmName("setDownload")
      set(value) {
        _builder.setDownload(value)
      }
    /**
     * ```
     * 下载模式
     * 0:播放 1:flv下载 2:dash下载
     * ```
     *
     * `uint32 download = 6;`
     */
    public fun clearDownload() {
      _builder.clearDownload()
    }

    /**
     * ```
     * 流url强制是用域名
     * 0:允许使用ip 1:使用http 2:使用https
     * ```
     *
     * `int32 forceHost = 7;`
     */
    public var forceHost: kotlin.Int
      @JvmName("getForceHost")
      get() = _builder.getForceHost()
      @JvmName("setForceHost")
      set(value) {
        _builder.setForceHost(value)
      }
    /**
     * ```
     * 流url强制是用域名
     * 0:允许使用ip 1:使用http 2:使用https
     * ```
     *
     * `int32 forceHost = 7;`
     */
    public fun clearForceHost() {
      _builder.clearForceHost()
    }

    /**
     * ```
     * 是否4K
     * ```
     *
     * `bool fourk = 8;`
     */
    public var fourk: kotlin.Boolean
      @JvmName("getFourk")
      get() = _builder.getFourk()
      @JvmName("setFourk")
      set(value) {
        _builder.setFourk(value)
      }
    /**
     * ```
     * 是否4K
     * ```
     *
     * `bool fourk = 8;`
     */
    public fun clearFourk() {
      _builder.clearFourk()
    }

    /**
     * ```
     * 当前页spm
     * ```
     *
     * `string spmid = 9;`
     */
    public var spmid: kotlin.String
      @JvmName("getSpmid")
      get() = _builder.getSpmid()
      @JvmName("setSpmid")
      set(value) {
        _builder.setSpmid(value)
      }
    /**
     * ```
     * 当前页spm
     * ```
     *
     * `string spmid = 9;`
     */
    public fun clearSpmid() {
      _builder.clearSpmid()
    }

    /**
     * ```
     * 上一页spm
     * ```
     *
     * `string fromSpmid = 10;`
     */
    public var fromSpmid: kotlin.String
      @JvmName("getFromSpmid")
      get() = _builder.getFromSpmid()
      @JvmName("setFromSpmid")
      set(value) {
        _builder.setFromSpmid(value)
      }
    /**
     * ```
     * 上一页spm
     * ```
     *
     * `string fromSpmid = 10;`
     */
    public fun clearFromSpmid() {
      _builder.clearFromSpmid()
    }

    /**
     * ```
     * 使用协议
     * 0:默认乐播 1:自建协议 2:云投屏 3:airplay
     * ```
     *
     * `int32 protocol = 11;`
     */
    public var protocol: kotlin.Int
      @JvmName("getProtocol")
      get() = _builder.getProtocol()
      @JvmName("setProtocol")
      set(value) {
        _builder.setProtocol(value)
      }
    /**
     * ```
     * 使用协议
     * 0:默认乐播 1:自建协议 2:云投屏 3:airplay
     * ```
     *
     * `int32 protocol = 11;`
     */
    public fun clearProtocol() {
      _builder.clearProtocol()
    }

    /**
     * ```
     * 投屏设备
     * 0:默认其他 1:OTT设备
     * ```
     *
     * `int32 device_type = 12;`
     */
    public var deviceType: kotlin.Int
      @JvmName("getDeviceType")
      get() = _builder.getDeviceType()
      @JvmName("setDeviceType")
      set(value) {
        _builder.setDeviceType(value)
      }
    /**
     * ```
     * 投屏设备
     * 0:默认其他 1:OTT设备
     * ```
     *
     * `int32 device_type = 12;`
     */
    public fun clearDeviceType() {
      _builder.clearDeviceType()
    }

    /**
     * ```
     * ```
     *
     * `bool use_new_project_code = 13;`
     */
    public var useNewProjectCode: kotlin.Boolean
      @JvmName("getUseNewProjectCode")
      get() = _builder.getUseNewProjectCode()
      @JvmName("setUseNewProjectCode")
      set(value) {
        _builder.setUseNewProjectCode(value)
      }
    /**
     * ```
     * ```
     *
     * `bool use_new_project_code = 13;`
     */
    public fun clearUseNewProjectCode() {
      _builder.clearUseNewProjectCode()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.pgc.gateway.player.v1.ProjectReq.copy(block: `bilibili.pgc.gateway.player.v1`.ProjectReqKt.Dsl.() -> kotlin.Unit): bilibili.pgc.gateway.player.v1.ProjectReq =
  `bilibili.pgc.gateway.player.v1`.ProjectReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

