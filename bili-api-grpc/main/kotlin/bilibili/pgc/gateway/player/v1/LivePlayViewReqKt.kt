// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/pgc/gateway/player/v1/playurl.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.pgc.gateway.player.v1;

@kotlin.jvm.JvmName("-initializelivePlayViewReq")
public inline fun livePlayViewReq(block: bilibili.pgc.gateway.player.v1.LivePlayViewReqKt.Dsl.() -> kotlin.Unit): bilibili.pgc.gateway.player.v1.LivePlayViewReq =
  bilibili.pgc.gateway.player.v1.LivePlayViewReqKt.Dsl._create(bilibili.pgc.gateway.player.v1.LivePlayViewReq.newBuilder()).apply { block() }._build()
/**
 * ```
 * 直播播放页信息-请求
 * ```
 *
 * Protobuf type `bilibili.pgc.gateway.player.v1.LivePlayViewReq`
 */
public object LivePlayViewReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.pgc.gateway.player.v1.LivePlayViewReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.pgc.gateway.player.v1.LivePlayViewReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.pgc.gateway.player.v1.LivePlayViewReq = _builder.build()

    /**
     * ```
     * 剧集epid
     * ```
     *
     * `int64 ep_id = 1;`
     */
    public var epId: kotlin.Long
      @JvmName("getEpId")
      get() = _builder.getEpId()
      @JvmName("setEpId")
      set(value) {
        _builder.setEpId(value)
      }
    /**
     * ```
     * 剧集epid
     * ```
     *
     * `int64 ep_id = 1;`
     */
    public fun clearEpId() {
      _builder.clearEpId()
    }

    /**
     * ```
     * 清晰度
     * 0,10000:原画 400:蓝光 250:超清 150:高清 80:流畅
     * ```
     *
     * `uint32 quality = 2;`
     */
    public var quality: kotlin.Int
      @JvmName("getQuality")
      get() = _builder.getQuality()
      @JvmName("setQuality")
      set(value) {
        _builder.setQuality(value)
      }
    /**
     * ```
     * 清晰度
     * 0,10000:原画 400:蓝光 250:超清 150:高清 80:流畅
     * ```
     *
     * `uint32 quality = 2;`
     */
    public fun clearQuality() {
      _builder.clearQuality()
    }

    /**
     * ```
     * 类型
     * 0:音频 2:hevc 4:dash 8:p2p, 16:蒙版
     * ```
     *
     * `uint32 ptype = 3;`
     */
    public var ptype: kotlin.Int
      @JvmName("getPtype")
      get() = _builder.getPtype()
      @JvmName("setPtype")
      set(value) {
        _builder.setPtype(value)
      }
    /**
     * ```
     * 类型
     * 0:音频 2:hevc 4:dash 8:p2p, 16:蒙版
     * ```
     *
     * `uint32 ptype = 3;`
     */
    public fun clearPtype() {
      _builder.clearPtype()
    }

    /**
     * ```
     * 是否请求https
     * ```
     *
     * `bool https = 4;`
     */
    public var https: kotlin.Boolean
      @JvmName("getHttps")
      get() = _builder.getHttps()
      @JvmName("setHttps")
      set(value) {
        _builder.setHttps(value)
      }
    /**
     * ```
     * 是否请求https
     * ```
     *
     * `bool https = 4;`
     */
    public fun clearHttps() {
      _builder.clearHttps()
    }

    /**
     * ```
     * 0:默认直播间播放 1:投屏播放
     * ```
     *
     * `uint32 play_type = 5;`
     */
    public var playType: kotlin.Int
      @JvmName("getPlayType")
      get() = _builder.getPlayType()
      @JvmName("setPlayType")
      set(value) {
        _builder.setPlayType(value)
      }
    /**
     * ```
     * 0:默认直播间播放 1:投屏播放
     * ```
     *
     * `uint32 play_type = 5;`
     */
    public fun clearPlayType() {
      _builder.clearPlayType()
    }

    /**
     * ```
     * 投屏设备
     * 0:默认其他 1:OTT设备
     * ```
     *
     * `int32 device_type = 6;`
     */
    public var deviceType: kotlin.Int
      @JvmName("getDeviceType")
      get() = _builder.getDeviceType()
      @JvmName("setDeviceType")
      set(value) {
        _builder.setDeviceType(value)
      }
    /**
     * ```
     * 投屏设备
     * 0:默认其他 1:OTT设备
     * ```
     *
     * `int32 device_type = 6;`
     */
    public fun clearDeviceType() {
      _builder.clearDeviceType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.pgc.gateway.player.v1.LivePlayViewReq.copy(block: `bilibili.pgc.gateway.player.v1`.LivePlayViewReqKt.Dsl.() -> kotlin.Unit): bilibili.pgc.gateway.player.v1.LivePlayViewReq =
  `bilibili.pgc.gateway.player.v1`.LivePlayViewReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

