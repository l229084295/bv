// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializegoodsContent")
public inline fun goodsContent(block: bilibili.dynamic.GoodsContentKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.GoodsContent =
  bilibili.dynamic.GoodsContentKt.Dsl._create(bilibili.dynamic.GoodsContent.newBuilder()).apply { block() }._build()
/**
 * ```
 * 发布时附带的商品卡的详细内容
 * ```
 *
 * Protobuf type `bilibili.dynamic.GoodsContent`
 */
public object GoodsContentKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.GoodsContent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.GoodsContent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.GoodsContent = _builder.build()

    /**
     * ```
     * 商品类型
     * 1淘宝、2会员购
     * ```
     *
     * `int32 source_type = 1;`
     */
    public var sourceType: kotlin.Int
      @JvmName("getSourceType")
      get() = _builder.getSourceType()
      @JvmName("setSourceType")
      set(value) {
        _builder.setSourceType(value)
      }
    /**
     * ```
     * 商品类型
     * 1淘宝、2会员购
     * ```
     *
     * `int32 source_type = 1;`
     */
    public fun clearSourceType() {
      _builder.clearSourceType()
    }

    /**
     * ```
     * 商品的id
     * ```
     *
     * `int64 item_id = 2;`
     */
    public var itemId: kotlin.Long
      @JvmName("getItemId")
      get() = _builder.getItemId()
      @JvmName("setItemId")
      set(value) {
        _builder.setItemId(value)
      }
    /**
     * ```
     * 商品的id
     * ```
     *
     * `int64 item_id = 2;`
     */
    public fun clearItemId() {
      _builder.clearItemId()
    }

    /**
     * ```
     * 店铺的id，兼容老版本
     * ```
     *
     * `int64 shop_id = 3;`
     */
    public var shopId: kotlin.Long
      @JvmName("getShopId")
      get() = _builder.getShopId()
      @JvmName("setShopId")
      set(value) {
        _builder.setShopId(value)
      }
    /**
     * ```
     * 店铺的id，兼容老版本
     * ```
     *
     * `int64 shop_id = 3;`
     */
    public fun clearShopId() {
      _builder.clearShopId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.GoodsContent.copy(block: `bilibili.dynamic`.GoodsContentKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.GoodsContent =
  `bilibili.dynamic`.GoodsContentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

