// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializedynIdentity")
public inline fun dynIdentity(block: bilibili.dynamic.DynIdentityKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.DynIdentity =
  bilibili.dynamic.DynIdentityKt.Dsl._create(bilibili.dynamic.DynIdentity.newBuilder()).apply { block() }._build()
/**
 * ```
 * 动态的标识
 * ```
 *
 * Protobuf type `bilibili.dynamic.DynIdentity`
 */
public object DynIdentityKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.DynIdentity.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.DynIdentity.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.DynIdentity = _builder.build()

    /**
     * ```
     * 动态id
     * ```
     *
     * `int64 dyn_id = 1;`
     */
    public var dynId: kotlin.Long
      @JvmName("getDynId")
      get() = _builder.getDynId()
      @JvmName("setDynId")
      set(value) {
        _builder.setDynId(value)
      }
    /**
     * ```
     * 动态id
     * ```
     *
     * `int64 dyn_id = 1;`
     */
    public fun clearDynId() {
      _builder.clearDynId()
    }

    /**
     * ```
     * 动态反向id，通过(type+rid组合)也可以唯一标识一个动态，与dyn_id出现任意一个即可
     * ```
     *
     * `.bilibili.dynamic.DynRevsId revs_id = 2;`
     */
    public var revsId: bilibili.dynamic.DynRevsId
      @JvmName("getRevsId")
      get() = _builder.getRevsId()
      @JvmName("setRevsId")
      set(value) {
        _builder.setRevsId(value)
      }
    /**
     * ```
     * 动态反向id，通过(type+rid组合)也可以唯一标识一个动态，与dyn_id出现任意一个即可
     * ```
     *
     * `.bilibili.dynamic.DynRevsId revs_id = 2;`
     */
    public fun clearRevsId() {
      _builder.clearRevsId()
    }
    /**
     * ```
     * 动态反向id，通过(type+rid组合)也可以唯一标识一个动态，与dyn_id出现任意一个即可
     * ```
     *
     * `.bilibili.dynamic.DynRevsId revs_id = 2;`
     * @return Whether the revsId field is set.
     */
    public fun hasRevsId(): kotlin.Boolean {
      return _builder.hasRevsId()
    }
    public val DynIdentityKt.Dsl.revsIdOrNull: bilibili.dynamic.DynRevsId?
      get() = _builder.revsIdOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.DynIdentity.copy(block: `bilibili.dynamic`.DynIdentityKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.DynIdentity =
  `bilibili.dynamic`.DynIdentityKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.dynamic.DynIdentityOrBuilder.revsIdOrNull: bilibili.dynamic.DynRevsId?
  get() = if (hasRevsId()) getRevsId() else null

