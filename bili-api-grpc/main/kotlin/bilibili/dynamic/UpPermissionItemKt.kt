// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializeupPermissionItem")
public inline fun upPermissionItem(block: bilibili.dynamic.UpPermissionItemKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.UpPermissionItem =
  bilibili.dynamic.UpPermissionItemKt.Dsl._create(bilibili.dynamic.UpPermissionItem.newBuilder()).apply { block() }._build()
/**
 * ```
 * 通用发布权限内容的详细定义
 * ```
 *
 * Protobuf type `bilibili.dynamic.UpPermissionItem`
 */
public object UpPermissionItemKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.UpPermissionItem.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.UpPermissionItem.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.UpPermissionItem = _builder.build()

    /**
     * ```
     * 类型，enum UpPermissionType
     * ```
     *
     * `int32 type = 1;`
     */
    public var type: kotlin.Int
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * ```
     * 类型，enum UpPermissionType
     * ```
     *
     * `int32 type = 1;`
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * ```
     * UP是否有权限
     * 1-有，2-限制（展示但不可点，仅预约使用）
     * ```
     *
     * `int32 permission = 2;`
     */
    public var permission: kotlin.Int
      @JvmName("getPermission")
      get() = _builder.getPermission()
      @JvmName("setPermission")
      set(value) {
        _builder.setPermission(value)
      }
    /**
     * ```
     * UP是否有权限
     * 1-有，2-限制（展示但不可点，仅预约使用）
     * ```
     *
     * `int32 permission = 2;`
     */
    public fun clearPermission() {
      _builder.clearPermission()
    }

    /**
     * ```
     * 按钮文案
     * ```
     *
     * `string title = 3;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * 按钮文案
     * ```
     *
     * `string title = 3;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * 功能开关的副标题
     * ```
     *
     * `string subtitle = 4;`
     */
    public var subtitle: kotlin.String
      @JvmName("getSubtitle")
      get() = _builder.getSubtitle()
      @JvmName("setSubtitle")
      set(value) {
        _builder.setSubtitle(value)
      }
    /**
     * ```
     * 功能开关的副标题
     * ```
     *
     * `string subtitle = 4;`
     */
    public fun clearSubtitle() {
      _builder.clearSubtitle()
    }

    /**
     * ```
     * 按钮图标的url地址
     * ```
     *
     * `string icon = 5;`
     */
    public var icon: kotlin.String
      @JvmName("getIcon")
      get() = _builder.getIcon()
      @JvmName("setIcon")
      set(value) {
        _builder.setIcon(value)
      }
    /**
     * ```
     * 按钮图标的url地址
     * ```
     *
     * `string icon = 5;`
     */
    public fun clearIcon() {
      _builder.clearIcon()
    }

    /**
     * ```
     * 跳转链接，permission=1时点击按钮跳到此链接
     * ```
     *
     * `string jump_url = 6;`
     */
    public var jumpUrl: kotlin.String
      @JvmName("getJumpUrl")
      get() = _builder.getJumpUrl()
      @JvmName("setJumpUrl")
      set(value) {
        _builder.setJumpUrl(value)
      }
    /**
     * ```
     * 跳转链接，permission=1时点击按钮跳到此链接
     * ```
     *
     * `string jump_url = 6;`
     */
    public fun clearJumpUrl() {
      _builder.clearJumpUrl()
    }

    /**
     * ```
     * 错误提示，permission=2时点击按钮会弹出此提示，目前仅预约使用
     * ```
     *
     * `string toast = 7;`
     */
    public var toast: kotlin.String
      @JvmName("getToast")
      get() = _builder.getToast()
      @JvmName("setToast")
      set(value) {
        _builder.setToast(value)
      }
    /**
     * ```
     * 错误提示，permission=2时点击按钮会弹出此提示，目前仅预约使用
     * ```
     *
     * `string toast = 7;`
     */
    public fun clearToast() {
      _builder.clearToast()
    }

    /**
     * ```
     * ```
     *
     * `int64 has_red_dot = 8;`
     */
    public var hasRedDot: kotlin.Long
      @JvmName("getHasRedDot")
      get() = _builder.getHasRedDot()
      @JvmName("setHasRedDot")
      set(value) {
        _builder.setHasRedDot(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 has_red_dot = 8;`
     */
    public fun clearHasRedDot() {
      _builder.clearHasRedDot()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.UpPermissionItem.copy(block: `bilibili.dynamic`.UpPermissionItemKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.UpPermissionItem =
  `bilibili.dynamic`.UpPermissionItemKt.Dsl._create(this.toBuilder()).apply { block() }._build()

