// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializeprogram")
public inline fun program(block: bilibili.dynamic.ProgramKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.Program =
  bilibili.dynamic.ProgramKt.Dsl._create(bilibili.dynamic.Program.newBuilder()).apply { block() }._build()
/**
 * ```
 * 小程序内容定义
 * ```
 *
 * Protobuf type `bilibili.dynamic.Program`
 */
public object ProgramKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.Program.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.Program.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.Program = _builder.build()

    /**
     * ```
     * 标题
     * ```
     *
     * `string title = 1;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * 标题
     * ```
     *
     * `string title = 1;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * 描述文字
     * ```
     *
     * `string desc = 2;`
     */
    public var desc: kotlin.String
      @JvmName("getDesc")
      get() = _builder.getDesc()
      @JvmName("setDesc")
      set(value) {
        _builder.setDesc(value)
      }
    /**
     * ```
     * 描述文字
     * ```
     *
     * `string desc = 2;`
     */
    public fun clearDesc() {
      _builder.clearDesc()
    }

    /**
     * ```
     * 封面图
     * ```
     *
     * `string cover = 3;`
     */
    public var cover: kotlin.String
      @JvmName("getCover")
      get() = _builder.getCover()
      @JvmName("setCover")
      set(value) {
        _builder.setCover(value)
      }
    /**
     * ```
     * 封面图
     * ```
     *
     * `string cover = 3;`
     */
    public fun clearCover() {
      _builder.clearCover()
    }

    /**
     * ```
     * 跳转链接
     * ```
     *
     * `string target_url = 4;`
     */
    public var targetUrl: kotlin.String
      @JvmName("getTargetUrl")
      get() = _builder.getTargetUrl()
      @JvmName("setTargetUrl")
      set(value) {
        _builder.setTargetUrl(value)
      }
    /**
     * ```
     * 跳转链接
     * ```
     *
     * `string target_url = 4;`
     */
    public fun clearTargetUrl() {
      _builder.clearTargetUrl()
    }

    /**
     * ```
     * 小程序icon
     * ```
     *
     * `string icon = 5;`
     */
    public var icon: kotlin.String
      @JvmName("getIcon")
      get() = _builder.getIcon()
      @JvmName("setIcon")
      set(value) {
        _builder.setIcon(value)
      }
    /**
     * ```
     * 小程序icon
     * ```
     *
     * `string icon = 5;`
     */
    public fun clearIcon() {
      _builder.clearIcon()
    }

    /**
     * ```
     * 小程序名称
     * ```
     *
     * `string program_text = 6;`
     */
    public var programText: kotlin.String
      @JvmName("getProgramText")
      get() = _builder.getProgramText()
      @JvmName("setProgramText")
      set(value) {
        _builder.setProgramText(value)
      }
    /**
     * ```
     * 小程序名称
     * ```
     *
     * `string program_text = 6;`
     */
    public fun clearProgramText() {
      _builder.clearProgramText()
    }

    /**
     * ```
     * 跳转链接文案，如：去看看
     * ```
     *
     * `string jump_text = 7;`
     */
    public var jumpText: kotlin.String
      @JvmName("getJumpText")
      get() = _builder.getJumpText()
      @JvmName("setJumpText")
      set(value) {
        _builder.setJumpText(value)
      }
    /**
     * ```
     * 跳转链接文案，如：去看看
     * ```
     *
     * `string jump_text = 7;`
     */
    public fun clearJumpText() {
      _builder.clearJumpText()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.Program.copy(block: `bilibili.dynamic`.ProgramKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.Program =
  `bilibili.dynamic`.ProgramKt.Dsl._create(this.toBuilder()).apply { block() }._build()

