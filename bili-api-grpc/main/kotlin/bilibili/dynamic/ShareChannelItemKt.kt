// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializeshareChannelItem")
public inline fun shareChannelItem(block: bilibili.dynamic.ShareChannelItemKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.ShareChannelItem =
  bilibili.dynamic.ShareChannelItemKt.Dsl._create(bilibili.dynamic.ShareChannelItem.newBuilder()).apply { block() }._build()
/**
 * ```
 * 渠道
 * ```
 *
 * Protobuf type `bilibili.dynamic.ShareChannelItem`
 */
public object ShareChannelItemKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.ShareChannelItem.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.ShareChannelItem.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.ShareChannelItem = _builder.build()

    /**
     * ```
     * 展示文案
     * ```
     *
     * `string name = 1;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * ```
     * 展示文案
     * ```
     *
     * `string name = 1;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * 展示图标
     * ```
     *
     * `string picture = 2;`
     */
    public var picture: kotlin.String
      @JvmName("getPicture")
      get() = _builder.getPicture()
      @JvmName("setPicture")
      set(value) {
        _builder.setPicture(value)
      }
    /**
     * ```
     * 展示图标
     * ```
     *
     * `string picture = 2;`
     */
    public fun clearPicture() {
      _builder.clearPicture()
    }

    /**
     * ```
     * 渠道名称
     * ```
     *
     * `string share_channel = 3;`
     */
    public var shareChannel: kotlin.String
      @JvmName("getShareChannel")
      get() = _builder.getShareChannel()
      @JvmName("setShareChannel")
      set(value) {
        _builder.setShareChannel(value)
      }
    /**
     * ```
     * 渠道名称
     * ```
     *
     * `string share_channel = 3;`
     */
    public fun clearShareChannel() {
      _builder.clearShareChannel()
    }

    /**
     * ```
     * 预约卡分享图信息，仅分享有预约信息的动态时存在
     * ```
     *
     * `.bilibili.dynamic.ShareReserve reserve = 4;`
     */
    public var reserve: bilibili.dynamic.ShareReserve
      @JvmName("getReserve")
      get() = _builder.getReserve()
      @JvmName("setReserve")
      set(value) {
        _builder.setReserve(value)
      }
    /**
     * ```
     * 预约卡分享图信息，仅分享有预约信息的动态时存在
     * ```
     *
     * `.bilibili.dynamic.ShareReserve reserve = 4;`
     */
    public fun clearReserve() {
      _builder.clearReserve()
    }
    /**
     * ```
     * 预约卡分享图信息，仅分享有预约信息的动态时存在
     * ```
     *
     * `.bilibili.dynamic.ShareReserve reserve = 4;`
     * @return Whether the reserve field is set.
     */
    public fun hasReserve(): kotlin.Boolean {
      return _builder.hasReserve()
    }
    public val ShareChannelItemKt.Dsl.reserveOrNull: bilibili.dynamic.ShareReserve?
      get() = _builder.reserveOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.ShareChannelItem.copy(block: `bilibili.dynamic`.ShareChannelItemKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.ShareChannelItem =
  `bilibili.dynamic`.ShareChannelItemKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.dynamic.ShareChannelItemOrBuilder.reserveOrNull: bilibili.dynamic.ShareReserve?
  get() = if (hasReserve()) getReserve() else null

