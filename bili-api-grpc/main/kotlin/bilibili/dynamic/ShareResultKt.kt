// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializeshareResult")
public inline fun shareResult(block: bilibili.dynamic.ShareResultKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.ShareResult =
  bilibili.dynamic.ShareResultKt.Dsl._create(bilibili.dynamic.ShareResult.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.dynamic.ShareResult`
 */
public object ShareResultKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.ShareResult.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.ShareResult.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.ShareResult = _builder.build()

    /**
     * ```
     * ```
     *
     * `int64 share_enable = 1;`
     */
    public var shareEnable: kotlin.Long
      @JvmName("getShareEnable")
      get() = _builder.getShareEnable()
      @JvmName("setShareEnable")
      set(value) {
        _builder.setShareEnable(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 share_enable = 1;`
     */
    public fun clearShareEnable() {
      _builder.clearShareEnable()
    }

    /**
     * ```
     * ```
     *
     * `string toast = 2;`
     */
    public var toast: kotlin.String
      @JvmName("getToast")
      get() = _builder.getToast()
      @JvmName("setToast")
      set(value) {
        _builder.setToast(value)
      }
    /**
     * ```
     * ```
     *
     * `string toast = 2;`
     */
    public fun clearToast() {
      _builder.clearToast()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.ShareResult.copy(block: `bilibili.dynamic`.ShareResultKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.ShareResult =
  `bilibili.dynamic`.ShareResultKt.Dsl._create(this.toBuilder()).apply { block() }._build()

