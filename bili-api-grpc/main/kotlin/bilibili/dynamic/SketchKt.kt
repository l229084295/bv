// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializesketch")
public inline fun sketch(block: bilibili.dynamic.SketchKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.Sketch =
  bilibili.dynamic.SketchKt.Dsl._create(bilibili.dynamic.Sketch.newBuilder()).apply { block() }._build()
/**
 * ```
 * 通用模板的网页元内容(sketch结构)定义
 * ```
 *
 * Protobuf type `bilibili.dynamic.Sketch`
 */
public object SketchKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.Sketch.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.Sketch.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.Sketch = _builder.build()

    /**
     * ```
     * 元内容标题，长度30限制
     * ```
     *
     * `string title = 1;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * 元内容标题，长度30限制
     * ```
     *
     * `string title = 1;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * 描述文字（文本内容第二行），长度233限制
     * ```
     *
     * `string desc_text = 2;`
     */
    public var descText: kotlin.String
      @JvmName("getDescText")
      get() = _builder.getDescText()
      @JvmName("setDescText")
      set(value) {
        _builder.setDescText(value)
      }
    /**
     * ```
     * 描述文字（文本内容第二行），长度233限制
     * ```
     *
     * `string desc_text = 2;`
     */
    public fun clearDescText() {
      _builder.clearDescText()
    }

    /**
     * ```
     * 文本文字（文本内容第三行），仅限竖图通用卡片使用，长度233限制
     * ```
     *
     * `string text = 3;`
     */
    public var text: kotlin.String
      @JvmName("getText")
      get() = _builder.getText()
      @JvmName("setText")
      set(value) {
        _builder.setText(value)
      }
    /**
     * ```
     * 文本文字（文本内容第三行），仅限竖图通用卡片使用，长度233限制
     * ```
     *
     * `string text = 3;`
     */
    public fun clearText() {
      _builder.clearText()
    }

    /**
     * ```
     * 表示业务方的id表示，对于在业务方有唯一标示的必填
     * ```
     *
     * `int64 biz_id = 4;`
     */
    public var bizId: kotlin.Long
      @JvmName("getBizId")
      get() = _builder.getBizId()
      @JvmName("setBizId")
      set(value) {
        _builder.setBizId(value)
      }
    /**
     * ```
     * 表示业务方的id表示，对于在业务方有唯一标示的必填
     * ```
     *
     * `int64 biz_id = 4;`
     */
    public fun clearBizId() {
      _builder.clearBizId()
    }

    /**
     * ```
     * 业务类型，与展示时的右上角标有关，需要业务方向动态申请
     * ```
     *
     * `int64 biz_type = 5;`
     */
    public var bizType: kotlin.Long
      @JvmName("getBizType")
      get() = _builder.getBizType()
      @JvmName("setBizType")
      set(value) {
        _builder.setBizType(value)
      }
    /**
     * ```
     * 业务类型，与展示时的右上角标有关，需要业务方向动态申请
     * ```
     *
     * `int64 biz_type = 5;`
     */
    public fun clearBizType() {
      _builder.clearBizType()
    }

    /**
     * ```
     * 封面图片链接地址，域名需要符合白名单
     * ```
     *
     * `string cover_url = 6;`
     */
    public var coverUrl: kotlin.String
      @JvmName("getCoverUrl")
      get() = _builder.getCoverUrl()
      @JvmName("setCoverUrl")
      set(value) {
        _builder.setCoverUrl(value)
      }
    /**
     * ```
     * 封面图片链接地址，域名需要符合白名单
     * ```
     *
     * `string cover_url = 6;`
     */
    public fun clearCoverUrl() {
      _builder.clearCoverUrl()
    }

    /**
     * ```
     * 跳转链接地址，域名需要符合白名单
     * ```
     *
     * `string target_url = 7;`
     */
    public var targetUrl: kotlin.String
      @JvmName("getTargetUrl")
      get() = _builder.getTargetUrl()
      @JvmName("setTargetUrl")
      set(value) {
        _builder.setTargetUrl(value)
      }
    /**
     * ```
     * 跳转链接地址，域名需要符合白名单
     * ```
     *
     * `string target_url = 7;`
     */
    public fun clearTargetUrl() {
      _builder.clearTargetUrl()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.Sketch.copy(block: `bilibili.dynamic`.SketchKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.Sketch =
  `bilibili.dynamic`.SketchKt.Dsl._create(this.toBuilder()).apply { block() }._build()

