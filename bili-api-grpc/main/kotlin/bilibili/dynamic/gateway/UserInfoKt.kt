// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/gw/gateway.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic.gateway;

@kotlin.jvm.JvmName("-initializeuserInfo")
public inline fun userInfo(block: bilibili.dynamic.gateway.UserInfoKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.UserInfo =
  bilibili.dynamic.gateway.UserInfoKt.Dsl._create(bilibili.dynamic.gateway.UserInfo.newBuilder()).apply { block() }._build()
/**
 * ```
 * 用户信息
 * ```
 *
 * Protobuf type `bilibili.dynamic.gateway.UserInfo`
 */
public object UserInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.gateway.UserInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.gateway.UserInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.gateway.UserInfo = _builder.build()

    /**
     * ```
     * 用户mid
     * ```
     *
     * `int64 mid = 1;`
     */
    public var mid: kotlin.Long
      @JvmName("getMid")
      get() = _builder.getMid()
      @JvmName("setMid")
      set(value) {
        _builder.setMid(value)
      }
    /**
     * ```
     * 用户mid
     * ```
     *
     * `int64 mid = 1;`
     */
    public fun clearMid() {
      _builder.clearMid()
    }

    /**
     * ```
     * 用户昵称
     * ```
     *
     * `string name = 2;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * ```
     * 用户昵称
     * ```
     *
     * `string name = 2;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * 用户头像
     * ```
     *
     * `string face = 3;`
     */
    public var face: kotlin.String
      @JvmName("getFace")
      get() = _builder.getFace()
      @JvmName("setFace")
      set(value) {
        _builder.setFace(value)
      }
    /**
     * ```
     * 用户头像
     * ```
     *
     * `string face = 3;`
     */
    public fun clearFace() {
      _builder.clearFace()
    }

    /**
     * ```
     * 认证信息
     * ```
     *
     * `.bilibili.dynamic.gateway.OfficialVerify official = 4;`
     */
    public var official: bilibili.dynamic.gateway.OfficialVerify
      @JvmName("getOfficial")
      get() = _builder.getOfficial()
      @JvmName("setOfficial")
      set(value) {
        _builder.setOfficial(value)
      }
    /**
     * ```
     * 认证信息
     * ```
     *
     * `.bilibili.dynamic.gateway.OfficialVerify official = 4;`
     */
    public fun clearOfficial() {
      _builder.clearOfficial()
    }
    /**
     * ```
     * 认证信息
     * ```
     *
     * `.bilibili.dynamic.gateway.OfficialVerify official = 4;`
     * @return Whether the official field is set.
     */
    public fun hasOfficial(): kotlin.Boolean {
      return _builder.hasOfficial()
    }
    public val UserInfoKt.Dsl.officialOrNull: bilibili.dynamic.gateway.OfficialVerify?
      get() = _builder.officialOrNull

    /**
     * ```
     * 大会员信息
     * ```
     *
     * `.bilibili.dynamic.gateway.VipInfo vip = 5;`
     */
    public var vip: bilibili.dynamic.gateway.VipInfo
      @JvmName("getVip")
      get() = _builder.getVip()
      @JvmName("setVip")
      set(value) {
        _builder.setVip(value)
      }
    /**
     * ```
     * 大会员信息
     * ```
     *
     * `.bilibili.dynamic.gateway.VipInfo vip = 5;`
     */
    public fun clearVip() {
      _builder.clearVip()
    }
    /**
     * ```
     * 大会员信息
     * ```
     *
     * `.bilibili.dynamic.gateway.VipInfo vip = 5;`
     * @return Whether the vip field is set.
     */
    public fun hasVip(): kotlin.Boolean {
      return _builder.hasVip()
    }
    public val UserInfoKt.Dsl.vipOrNull: bilibili.dynamic.gateway.VipInfo?
      get() = _builder.vipOrNull

    /**
     * ```
     * 直播信息
     * ```
     *
     * `.bilibili.dynamic.gateway.LiveInfo live = 6;`
     */
    public var live: bilibili.dynamic.gateway.LiveInfo
      @JvmName("getLive")
      get() = _builder.getLive()
      @JvmName("setLive")
      set(value) {
        _builder.setLive(value)
      }
    /**
     * ```
     * 直播信息
     * ```
     *
     * `.bilibili.dynamic.gateway.LiveInfo live = 6;`
     */
    public fun clearLive() {
      _builder.clearLive()
    }
    /**
     * ```
     * 直播信息
     * ```
     *
     * `.bilibili.dynamic.gateway.LiveInfo live = 6;`
     * @return Whether the live field is set.
     */
    public fun hasLive(): kotlin.Boolean {
      return _builder.hasLive()
    }
    public val UserInfoKt.Dsl.liveOrNull: bilibili.dynamic.gateway.LiveInfo?
      get() = _builder.liveOrNull

    /**
     * ```
     * 空间页跳转链接
     * ```
     *
     * `string uri = 7;`
     */
    public var uri: kotlin.String
      @JvmName("getUri")
      get() = _builder.getUri()
      @JvmName("setUri")
      set(value) {
        _builder.setUri(value)
      }
    /**
     * ```
     * 空间页跳转链接
     * ```
     *
     * `string uri = 7;`
     */
    public fun clearUri() {
      _builder.clearUri()
    }

    /**
     * ```
     * 挂件信息
     * ```
     *
     * `.bilibili.dynamic.gateway.UserPendant pendant = 8;`
     */
    public var pendant: bilibili.dynamic.gateway.UserPendant
      @JvmName("getPendant")
      get() = _builder.getPendant()
      @JvmName("setPendant")
      set(value) {
        _builder.setPendant(value)
      }
    /**
     * ```
     * 挂件信息
     * ```
     *
     * `.bilibili.dynamic.gateway.UserPendant pendant = 8;`
     */
    public fun clearPendant() {
      _builder.clearPendant()
    }
    /**
     * ```
     * 挂件信息
     * ```
     *
     * `.bilibili.dynamic.gateway.UserPendant pendant = 8;`
     * @return Whether the pendant field is set.
     */
    public fun hasPendant(): kotlin.Boolean {
      return _builder.hasPendant()
    }
    public val UserInfoKt.Dsl.pendantOrNull: bilibili.dynamic.gateway.UserPendant?
      get() = _builder.pendantOrNull

    /**
     * ```
     * 认证名牌
     * ```
     *
     * `.bilibili.dynamic.gateway.Nameplate nameplate = 9;`
     */
    public var nameplate: bilibili.dynamic.gateway.Nameplate
      @JvmName("getNameplate")
      get() = _builder.getNameplate()
      @JvmName("setNameplate")
      set(value) {
        _builder.setNameplate(value)
      }
    /**
     * ```
     * 认证名牌
     * ```
     *
     * `.bilibili.dynamic.gateway.Nameplate nameplate = 9;`
     */
    public fun clearNameplate() {
      _builder.clearNameplate()
    }
    /**
     * ```
     * 认证名牌
     * ```
     *
     * `.bilibili.dynamic.gateway.Nameplate nameplate = 9;`
     * @return Whether the nameplate field is set.
     */
    public fun hasNameplate(): kotlin.Boolean {
      return _builder.hasNameplate()
    }
    public val UserInfoKt.Dsl.nameplateOrNull: bilibili.dynamic.gateway.Nameplate?
      get() = _builder.nameplateOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.gateway.UserInfo.copy(block: `bilibili.dynamic.gateway`.UserInfoKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.UserInfo =
  `bilibili.dynamic.gateway`.UserInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.dynamic.gateway.UserInfoOrBuilder.officialOrNull: bilibili.dynamic.gateway.OfficialVerify?
  get() = if (hasOfficial()) getOfficial() else null

public val bilibili.dynamic.gateway.UserInfoOrBuilder.vipOrNull: bilibili.dynamic.gateway.VipInfo?
  get() = if (hasVip()) getVip() else null

public val bilibili.dynamic.gateway.UserInfoOrBuilder.liveOrNull: bilibili.dynamic.gateway.LiveInfo?
  get() = if (hasLive()) getLive() else null

public val bilibili.dynamic.gateway.UserInfoOrBuilder.pendantOrNull: bilibili.dynamic.gateway.UserPendant?
  get() = if (hasPendant()) getPendant() else null

public val bilibili.dynamic.gateway.UserInfoOrBuilder.nameplateOrNull: bilibili.dynamic.gateway.Nameplate?
  get() = if (hasNameplate()) getNameplate() else null

