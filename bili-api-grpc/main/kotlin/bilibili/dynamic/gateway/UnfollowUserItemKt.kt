// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/gw/gateway.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic.gateway;

@kotlin.jvm.JvmName("-initializeunfollowUserItem")
public inline fun unfollowUserItem(block: bilibili.dynamic.gateway.UnfollowUserItemKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.UnfollowUserItem =
  bilibili.dynamic.gateway.UnfollowUserItemKt.Dsl._create(bilibili.dynamic.gateway.UnfollowUserItem.newBuilder()).apply { block() }._build()
/**
 * ```
 * 综合页-无关注列表
 * ```
 *
 * Protobuf type `bilibili.dynamic.gateway.UnfollowUserItem`
 */
public object UnfollowUserItemKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.gateway.UnfollowUserItem.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.gateway.UnfollowUserItem.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.gateway.UnfollowUserItem = _builder.build()

    /**
     * ```
     * 是否有更新
     * ```
     *
     * `bool has_update = 1;`
     */
    public var hasUpdate: kotlin.Boolean
      @JvmName("getHasUpdate")
      get() = _builder.getHasUpdate()
      @JvmName("setHasUpdate")
      set(value) {
        _builder.setHasUpdate(value)
      }
    /**
     * ```
     * 是否有更新
     * ```
     *
     * `bool has_update = 1;`
     */
    public fun clearHasUpdate() {
      _builder.clearHasUpdate()
    }

    /**
     * ```
     * up主头像
     * ```
     *
     * `string face = 2;`
     */
    public var face: kotlin.String
      @JvmName("getFace")
      get() = _builder.getFace()
      @JvmName("setFace")
      set(value) {
        _builder.setFace(value)
      }
    /**
     * ```
     * up主头像
     * ```
     *
     * `string face = 2;`
     */
    public fun clearFace() {
      _builder.clearFace()
    }

    /**
     * ```
     * up主昵称
     * ```
     *
     * `string name = 3;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * ```
     * up主昵称
     * ```
     *
     * `string name = 3;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * up主uid
     * ```
     *
     * `int64 uid = 4;`
     */
    public var uid: kotlin.Long
      @JvmName("getUid")
      get() = _builder.getUid()
      @JvmName("setUid")
      set(value) {
        _builder.setUid(value)
      }
    /**
     * ```
     * up主uid
     * ```
     *
     * `int64 uid = 4;`
     */
    public fun clearUid() {
      _builder.clearUid()
    }

    /**
     * ```
     * 排序字段 从1开始
     * ```
     *
     * `int32 pos = 5;`
     */
    public var pos: kotlin.Int
      @JvmName("getPos")
      get() = _builder.getPos()
      @JvmName("setPos")
      set(value) {
        _builder.setPos(value)
      }
    /**
     * ```
     * 排序字段 从1开始
     * ```
     *
     * `int32 pos = 5;`
     */
    public fun clearPos() {
      _builder.clearPos()
    }

    /**
     * ```
     * 直播状态
     * ```
     *
     * `.bilibili.dynamic.gateway.LiveState live_state = 6;`
     */
    public var liveState: bilibili.dynamic.gateway.LiveState
      @JvmName("getLiveState")
      get() = _builder.getLiveState()
      @JvmName("setLiveState")
      set(value) {
        _builder.setLiveState(value)
      }
    public var liveStateValue: kotlin.Int
      @JvmName("getLiveStateValue")
      get() = _builder.getLiveStateValue()
      @JvmName("setLiveStateValue")
      set(value) {
        _builder.setLiveStateValue(value)
      }
    /**
     * ```
     * 直播状态
     * ```
     *
     * `.bilibili.dynamic.gateway.LiveState live_state = 6;`
     */
    public fun clearLiveState() {
      _builder.clearLiveState()
    }

    /**
     * ```
     * 认证信息
     * ```
     *
     * `.bilibili.dynamic.gateway.OfficialVerify official = 7;`
     */
    public var official: bilibili.dynamic.gateway.OfficialVerify
      @JvmName("getOfficial")
      get() = _builder.getOfficial()
      @JvmName("setOfficial")
      set(value) {
        _builder.setOfficial(value)
      }
    /**
     * ```
     * 认证信息
     * ```
     *
     * `.bilibili.dynamic.gateway.OfficialVerify official = 7;`
     */
    public fun clearOfficial() {
      _builder.clearOfficial()
    }
    /**
     * ```
     * 认证信息
     * ```
     *
     * `.bilibili.dynamic.gateway.OfficialVerify official = 7;`
     * @return Whether the official field is set.
     */
    public fun hasOfficial(): kotlin.Boolean {
      return _builder.hasOfficial()
    }
    public val UnfollowUserItemKt.Dsl.officialOrNull: bilibili.dynamic.gateway.OfficialVerify?
      get() = _builder.officialOrNull

    /**
     * ```
     * 大会员信息
     * ```
     *
     * `.bilibili.dynamic.gateway.VipInfo vip = 8;`
     */
    public var vip: bilibili.dynamic.gateway.VipInfo
      @JvmName("getVip")
      get() = _builder.getVip()
      @JvmName("setVip")
      set(value) {
        _builder.setVip(value)
      }
    /**
     * ```
     * 大会员信息
     * ```
     *
     * `.bilibili.dynamic.gateway.VipInfo vip = 8;`
     */
    public fun clearVip() {
      _builder.clearVip()
    }
    /**
     * ```
     * 大会员信息
     * ```
     *
     * `.bilibili.dynamic.gateway.VipInfo vip = 8;`
     * @return Whether the vip field is set.
     */
    public fun hasVip(): kotlin.Boolean {
      return _builder.hasVip()
    }
    public val UnfollowUserItemKt.Dsl.vipOrNull: bilibili.dynamic.gateway.VipInfo?
      get() = _builder.vipOrNull

    /**
     * ```
     * up介绍
     * ```
     *
     * `string sign = 9;`
     */
    public var sign: kotlin.String
      @JvmName("getSign")
      get() = _builder.getSign()
      @JvmName("setSign")
      set(value) {
        _builder.setSign(value)
      }
    /**
     * ```
     * up介绍
     * ```
     *
     * `string sign = 9;`
     */
    public fun clearSign() {
      _builder.clearSign()
    }

    /**
     * ```
     * 标签信息
     * ```
     *
     * `string label = 10;`
     */
    public var label: kotlin.String
      @JvmName("getLabel")
      get() = _builder.getLabel()
      @JvmName("setLabel")
      set(value) {
        _builder.setLabel(value)
      }
    /**
     * ```
     * 标签信息
     * ```
     *
     * `string label = 10;`
     */
    public fun clearLabel() {
      _builder.clearLabel()
    }

    /**
     * ```
     * 按钮
     * ```
     *
     * `.bilibili.dynamic.gateway.AdditionalButton button = 11;`
     */
    public var button: bilibili.dynamic.gateway.AdditionalButton
      @JvmName("getButton")
      get() = _builder.getButton()
      @JvmName("setButton")
      set(value) {
        _builder.setButton(value)
      }
    /**
     * ```
     * 按钮
     * ```
     *
     * `.bilibili.dynamic.gateway.AdditionalButton button = 11;`
     */
    public fun clearButton() {
      _builder.clearButton()
    }
    /**
     * ```
     * 按钮
     * ```
     *
     * `.bilibili.dynamic.gateway.AdditionalButton button = 11;`
     * @return Whether the button field is set.
     */
    public fun hasButton(): kotlin.Boolean {
      return _builder.hasButton()
    }
    public val UnfollowUserItemKt.Dsl.buttonOrNull: bilibili.dynamic.gateway.AdditionalButton?
      get() = _builder.buttonOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.gateway.UnfollowUserItem.copy(block: `bilibili.dynamic.gateway`.UnfollowUserItemKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.UnfollowUserItem =
  `bilibili.dynamic.gateway`.UnfollowUserItemKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.dynamic.gateway.UnfollowUserItemOrBuilder.officialOrNull: bilibili.dynamic.gateway.OfficialVerify?
  get() = if (hasOfficial()) getOfficial() else null

public val bilibili.dynamic.gateway.UnfollowUserItemOrBuilder.vipOrNull: bilibili.dynamic.gateway.VipInfo?
  get() = if (hasVip()) getVip() else null

public val bilibili.dynamic.gateway.UnfollowUserItemOrBuilder.buttonOrNull: bilibili.dynamic.gateway.AdditionalButton?
  get() = if (hasButton()) getButton() else null

