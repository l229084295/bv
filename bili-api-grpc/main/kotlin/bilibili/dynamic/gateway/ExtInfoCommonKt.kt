// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/gw/gateway.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic.gateway;

@kotlin.jvm.JvmName("-initializeextInfoCommon")
public inline fun extInfoCommon(block: bilibili.dynamic.gateway.ExtInfoCommonKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.ExtInfoCommon =
  bilibili.dynamic.gateway.ExtInfoCommonKt.Dsl._create(bilibili.dynamic.gateway.ExtInfoCommon.newBuilder()).apply { block() }._build()
/**
 * ```
 * 动态-拓展小卡模块-通用小卡
 * ```
 *
 * Protobuf type `bilibili.dynamic.gateway.ExtInfoCommon`
 */
public object ExtInfoCommonKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.gateway.ExtInfoCommon.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.gateway.ExtInfoCommon.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.gateway.ExtInfoCommon = _builder.build()

    /**
     * ```
     * 标题
     * ```
     *
     * `string title = 1;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * 标题
     * ```
     *
     * `string title = 1;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * 跳转地址
     * ```
     *
     * `string uri = 2;`
     */
    public var uri: kotlin.String
      @JvmName("getUri")
      get() = _builder.getUri()
      @JvmName("setUri")
      set(value) {
        _builder.setUri(value)
      }
    /**
     * ```
     * 跳转地址
     * ```
     *
     * `string uri = 2;`
     */
    public fun clearUri() {
      _builder.clearUri()
    }

    /**
     * ```
     * 小图标
     * ```
     *
     * `string icon = 3;`
     */
    public var icon: kotlin.String
      @JvmName("getIcon")
      get() = _builder.getIcon()
      @JvmName("setIcon")
      set(value) {
        _builder.setIcon(value)
      }
    /**
     * ```
     * 小图标
     * ```
     *
     * `string icon = 3;`
     */
    public fun clearIcon() {
      _builder.clearIcon()
    }

    /**
     * ```
     * poiType
     * ```
     *
     * `int32 poi_type = 4;`
     */
    public var poiType: kotlin.Int
      @JvmName("getPoiType")
      get() = _builder.getPoiType()
      @JvmName("setPoiType")
      set(value) {
        _builder.setPoiType(value)
      }
    /**
     * ```
     * poiType
     * ```
     *
     * `int32 poi_type = 4;`
     */
    public fun clearPoiType() {
      _builder.clearPoiType()
    }

    /**
     * ```
     * 类型
     * ```
     *
     * `.bilibili.dynamic.gateway.DynExtendType type = 5;`
     */
    public var type: bilibili.dynamic.gateway.DynExtendType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    public var typeValue: kotlin.Int
      @JvmName("getTypeValue")
      get() = _builder.getTypeValue()
      @JvmName("setTypeValue")
      set(value) {
        _builder.setTypeValue(value)
      }
    /**
     * ```
     * 类型
     * ```
     *
     * `.bilibili.dynamic.gateway.DynExtendType type = 5;`
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * ```
     * 客户端埋点用
     * ```
     *
     * `string sub_module = 6;`
     */
    public var subModule: kotlin.String
      @JvmName("getSubModule")
      get() = _builder.getSubModule()
      @JvmName("setSubModule")
      set(value) {
        _builder.setSubModule(value)
      }
    /**
     * ```
     * 客户端埋点用
     * ```
     *
     * `string sub_module = 6;`
     */
    public fun clearSubModule() {
      _builder.clearSubModule()
    }

    /**
     * ```
     * 行动点文案
     * ```
     *
     * `string action_text = 7;`
     */
    public var actionText: kotlin.String
      @JvmName("getActionText")
      get() = _builder.getActionText()
      @JvmName("setActionText")
      set(value) {
        _builder.setActionText(value)
      }
    /**
     * ```
     * 行动点文案
     * ```
     *
     * `string action_text = 7;`
     */
    public fun clearActionText() {
      _builder.clearActionText()
    }

    /**
     * ```
     * 行动点链接
     * ```
     *
     * `string action_url = 8;`
     */
    public var actionUrl: kotlin.String
      @JvmName("getActionUrl")
      get() = _builder.getActionUrl()
      @JvmName("setActionUrl")
      set(value) {
        _builder.setActionUrl(value)
      }
    /**
     * ```
     * 行动点链接
     * ```
     *
     * `string action_url = 8;`
     */
    public fun clearActionUrl() {
      _builder.clearActionUrl()
    }

    /**
     * ```
     * 资源rid
     * ```
     *
     * `int64 rid = 9;`
     */
    public var rid: kotlin.Long
      @JvmName("getRid")
      get() = _builder.getRid()
      @JvmName("setRid")
      set(value) {
        _builder.setRid(value)
      }
    /**
     * ```
     * 资源rid
     * ```
     *
     * `int64 rid = 9;`
     */
    public fun clearRid() {
      _builder.clearRid()
    }

    /**
     * ```
     * 轻浏览是否展示
     * ```
     *
     * `bool is_show_light = 10;`
     */
    public var isShowLight: kotlin.Boolean
      @JvmName("getIsShowLight")
      get() = _builder.getIsShowLight()
      @JvmName("setIsShowLight")
      set(value) {
        _builder.setIsShowLight(value)
      }
    /**
     * ```
     * 轻浏览是否展示
     * ```
     *
     * `bool is_show_light = 10;`
     */
    public fun clearIsShowLight() {
      _builder.clearIsShowLight()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.gateway.ExtInfoCommon.copy(block: `bilibili.dynamic.gateway`.ExtInfoCommonKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.ExtInfoCommon =
  `bilibili.dynamic.gateway`.ExtInfoCommonKt.Dsl._create(this.toBuilder()).apply { block() }._build()

