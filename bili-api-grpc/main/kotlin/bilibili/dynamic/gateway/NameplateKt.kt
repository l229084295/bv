// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/gw/gateway.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic.gateway;

@kotlin.jvm.JvmName("-initializenameplate")
public inline fun nameplate(block: bilibili.dynamic.gateway.NameplateKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.Nameplate =
  bilibili.dynamic.gateway.NameplateKt.Dsl._create(bilibili.dynamic.gateway.Nameplate.newBuilder()).apply { block() }._build()
/**
 * ```
 * 认证名牌
 * ```
 *
 * Protobuf type `bilibili.dynamic.gateway.Nameplate`
 */
public object NameplateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.gateway.Nameplate.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.gateway.Nameplate.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.gateway.Nameplate = _builder.build()

    /**
     * ```
     * nid
     * ```
     *
     * `int64 nid = 1;`
     */
    public var nid: kotlin.Long
      @JvmName("getNid")
      get() = _builder.getNid()
      @JvmName("setNid")
      set(value) {
        _builder.setNid(value)
      }
    /**
     * ```
     * nid
     * ```
     *
     * `int64 nid = 1;`
     */
    public fun clearNid() {
      _builder.clearNid()
    }

    /**
     * ```
     * 名称
     * ```
     *
     * `string name = 2;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * ```
     * 名称
     * ```
     *
     * `string name = 2;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * 图片地址
     * ```
     *
     * `string image = 3;`
     */
    public var image: kotlin.String
      @JvmName("getImage")
      get() = _builder.getImage()
      @JvmName("setImage")
      set(value) {
        _builder.setImage(value)
      }
    /**
     * ```
     * 图片地址
     * ```
     *
     * `string image = 3;`
     */
    public fun clearImage() {
      _builder.clearImage()
    }

    /**
     * ```
     * 小图地址
     * ```
     *
     * `string image_small = 4;`
     */
    public var imageSmall: kotlin.String
      @JvmName("getImageSmall")
      get() = _builder.getImageSmall()
      @JvmName("setImageSmall")
      set(value) {
        _builder.setImageSmall(value)
      }
    /**
     * ```
     * 小图地址
     * ```
     *
     * `string image_small = 4;`
     */
    public fun clearImageSmall() {
      _builder.clearImageSmall()
    }

    /**
     * ```
     * 等级
     * ```
     *
     * `string level = 5;`
     */
    public var level: kotlin.String
      @JvmName("getLevel")
      get() = _builder.getLevel()
      @JvmName("setLevel")
      set(value) {
        _builder.setLevel(value)
      }
    /**
     * ```
     * 等级
     * ```
     *
     * `string level = 5;`
     */
    public fun clearLevel() {
      _builder.clearLevel()
    }

    /**
     * ```
     * 获取条件
     * ```
     *
     * `string condition = 6;`
     */
    public var condition: kotlin.String
      @JvmName("getCondition")
      get() = _builder.getCondition()
      @JvmName("setCondition")
      set(value) {
        _builder.setCondition(value)
      }
    /**
     * ```
     * 获取条件
     * ```
     *
     * `string condition = 6;`
     */
    public fun clearCondition() {
      _builder.clearCondition()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.gateway.Nameplate.copy(block: `bilibili.dynamic.gateway`.NameplateKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.Nameplate =
  `bilibili.dynamic.gateway`.NameplateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

