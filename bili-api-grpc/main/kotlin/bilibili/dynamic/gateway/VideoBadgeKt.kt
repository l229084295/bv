// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/gw/gateway.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic.gateway;

@kotlin.jvm.JvmName("-initializevideoBadge")
public inline fun videoBadge(block: bilibili.dynamic.gateway.VideoBadgeKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.VideoBadge =
  bilibili.dynamic.gateway.VideoBadgeKt.Dsl._create(bilibili.dynamic.gateway.VideoBadge.newBuilder()).apply { block() }._build()
/**
 * ```
 * 角标信息
 * ```
 *
 * Protobuf type `bilibili.dynamic.gateway.VideoBadge`
 */
public object VideoBadgeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.gateway.VideoBadge.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.gateway.VideoBadge.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.gateway.VideoBadge = _builder.build()

    /**
     * ```
     * 文案
     * ```
     *
     * `string text = 1;`
     */
    public var text: kotlin.String
      @JvmName("getText")
      get() = _builder.getText()
      @JvmName("setText")
      set(value) {
        _builder.setText(value)
      }
    /**
     * ```
     * 文案
     * ```
     *
     * `string text = 1;`
     */
    public fun clearText() {
      _builder.clearText()
    }

    /**
     * ```
     * 文案颜色-日间
     * ```
     *
     * `string text_color = 2;`
     */
    public var textColor: kotlin.String
      @JvmName("getTextColor")
      get() = _builder.getTextColor()
      @JvmName("setTextColor")
      set(value) {
        _builder.setTextColor(value)
      }
    /**
     * ```
     * 文案颜色-日间
     * ```
     *
     * `string text_color = 2;`
     */
    public fun clearTextColor() {
      _builder.clearTextColor()
    }

    /**
     * ```
     * 文案颜色-夜间
     * ```
     *
     * `string text_color_night = 3;`
     */
    public var textColorNight: kotlin.String
      @JvmName("getTextColorNight")
      get() = _builder.getTextColorNight()
      @JvmName("setTextColorNight")
      set(value) {
        _builder.setTextColorNight(value)
      }
    /**
     * ```
     * 文案颜色-夜间
     * ```
     *
     * `string text_color_night = 3;`
     */
    public fun clearTextColorNight() {
      _builder.clearTextColorNight()
    }

    /**
     * ```
     * 背景颜色-日间
     * ```
     *
     * `string bg_color = 4;`
     */
    public var bgColor: kotlin.String
      @JvmName("getBgColor")
      get() = _builder.getBgColor()
      @JvmName("setBgColor")
      set(value) {
        _builder.setBgColor(value)
      }
    /**
     * ```
     * 背景颜色-日间
     * ```
     *
     * `string bg_color = 4;`
     */
    public fun clearBgColor() {
      _builder.clearBgColor()
    }

    /**
     * ```
     * 背景颜色-夜间
     * ```
     *
     * `string bg_color_night = 5;`
     */
    public var bgColorNight: kotlin.String
      @JvmName("getBgColorNight")
      get() = _builder.getBgColorNight()
      @JvmName("setBgColorNight")
      set(value) {
        _builder.setBgColorNight(value)
      }
    /**
     * ```
     * 背景颜色-夜间
     * ```
     *
     * `string bg_color_night = 5;`
     */
    public fun clearBgColorNight() {
      _builder.clearBgColorNight()
    }

    /**
     * ```
     * 边框颜色-日间
     * ```
     *
     * `string border_color = 6;`
     */
    public var borderColor: kotlin.String
      @JvmName("getBorderColor")
      get() = _builder.getBorderColor()
      @JvmName("setBorderColor")
      set(value) {
        _builder.setBorderColor(value)
      }
    /**
     * ```
     * 边框颜色-日间
     * ```
     *
     * `string border_color = 6;`
     */
    public fun clearBorderColor() {
      _builder.clearBorderColor()
    }

    /**
     * ```
     * 边框颜色-夜间
     * ```
     *
     * `string border_color_night = 7;`
     */
    public var borderColorNight: kotlin.String
      @JvmName("getBorderColorNight")
      get() = _builder.getBorderColorNight()
      @JvmName("setBorderColorNight")
      set(value) {
        _builder.setBorderColorNight(value)
      }
    /**
     * ```
     * 边框颜色-夜间
     * ```
     *
     * `string border_color_night = 7;`
     */
    public fun clearBorderColorNight() {
      _builder.clearBorderColorNight()
    }

    /**
     * ```
     * 样式
     * ```
     *
     * `int32 bg_style = 8;`
     */
    public var bgStyle: kotlin.Int
      @JvmName("getBgStyle")
      get() = _builder.getBgStyle()
      @JvmName("setBgStyle")
      set(value) {
        _builder.setBgStyle(value)
      }
    /**
     * ```
     * 样式
     * ```
     *
     * `int32 bg_style = 8;`
     */
    public fun clearBgStyle() {
      _builder.clearBgStyle()
    }

    /**
     * ```
     * 背景透明度-日间
     * ```
     *
     * `int32 bg_alpha = 9;`
     */
    public var bgAlpha: kotlin.Int
      @JvmName("getBgAlpha")
      get() = _builder.getBgAlpha()
      @JvmName("setBgAlpha")
      set(value) {
        _builder.setBgAlpha(value)
      }
    /**
     * ```
     * 背景透明度-日间
     * ```
     *
     * `int32 bg_alpha = 9;`
     */
    public fun clearBgAlpha() {
      _builder.clearBgAlpha()
    }

    /**
     * ```
     * 背景透明度-夜间
     * ```
     *
     * `int32 bg_alpha_night = 10;`
     */
    public var bgAlphaNight: kotlin.Int
      @JvmName("getBgAlphaNight")
      get() = _builder.getBgAlphaNight()
      @JvmName("setBgAlphaNight")
      set(value) {
        _builder.setBgAlphaNight(value)
      }
    /**
     * ```
     * 背景透明度-夜间
     * ```
     *
     * `int32 bg_alpha_night = 10;`
     */
    public fun clearBgAlphaNight() {
      _builder.clearBgAlphaNight()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.gateway.VideoBadge.copy(block: `bilibili.dynamic.gateway`.VideoBadgeKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.VideoBadge =
  `bilibili.dynamic.gateway`.VideoBadgeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

