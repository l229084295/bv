// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/gw/gateway.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic.gateway;

@kotlin.jvm.JvmName("-initializetopicListItem")
public inline fun topicListItem(block: bilibili.dynamic.gateway.TopicListItemKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.TopicListItem =
  bilibili.dynamic.gateway.TopicListItemKt.Dsl._create(bilibili.dynamic.gateway.TopicListItem.newBuilder()).apply { block() }._build()
/**
 * ```
 * 综合页-话题广场-话题
 * ```
 *
 * Protobuf type `bilibili.dynamic.gateway.TopicListItem`
 */
public object TopicListItemKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.gateway.TopicListItem.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.gateway.TopicListItem.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.gateway.TopicListItem = _builder.build()

    /**
     * ```
     * 前置图标
     * ```
     *
     * `string icon = 1;`
     */
    public var icon: kotlin.String
      @JvmName("getIcon")
      get() = _builder.getIcon()
      @JvmName("setIcon")
      set(value) {
        _builder.setIcon(value)
      }
    /**
     * ```
     * 前置图标
     * ```
     *
     * `string icon = 1;`
     */
    public fun clearIcon() {
      _builder.clearIcon()
    }

    /**
     * ```
     * 前置图标文案
     * ```
     *
     * `string icon_title = 2;`
     */
    public var iconTitle: kotlin.String
      @JvmName("getIconTitle")
      get() = _builder.getIconTitle()
      @JvmName("setIconTitle")
      set(value) {
        _builder.setIconTitle(value)
      }
    /**
     * ```
     * 前置图标文案
     * ```
     *
     * `string icon_title = 2;`
     */
    public fun clearIconTitle() {
      _builder.clearIconTitle()
    }

    /**
     * ```
     * 话题id
     * ```
     *
     * `int64 topic_id = 3;`
     */
    public var topicId: kotlin.Long
      @JvmName("getTopicId")
      get() = _builder.getTopicId()
      @JvmName("setTopicId")
      set(value) {
        _builder.setTopicId(value)
      }
    /**
     * ```
     * 话题id
     * ```
     *
     * `int64 topic_id = 3;`
     */
    public fun clearTopicId() {
      _builder.clearTopicId()
    }

    /**
     * ```
     * 话题名
     * ```
     *
     * `string topic_name = 4;`
     */
    public var topicName: kotlin.String
      @JvmName("getTopicName")
      get() = _builder.getTopicName()
      @JvmName("setTopicName")
      set(value) {
        _builder.setTopicName(value)
      }
    /**
     * ```
     * 话题名
     * ```
     *
     * `string topic_name = 4;`
     */
    public fun clearTopicName() {
      _builder.clearTopicName()
    }

    /**
     * ```
     * 跳转链接
     * ```
     *
     * `string url = 5;`
     */
    public var url: kotlin.String
      @JvmName("getUrl")
      get() = _builder.getUrl()
      @JvmName("setUrl")
      set(value) {
        _builder.setUrl(value)
      }
    /**
     * ```
     * 跳转链接
     * ```
     *
     * `string url = 5;`
     */
    public fun clearUrl() {
      _builder.clearUrl()
    }

    /**
     * ```
     * 卡片位次
     * ```
     *
     * `int64 pos = 6;`
     */
    public var pos: kotlin.Long
      @JvmName("getPos")
      get() = _builder.getPos()
      @JvmName("setPos")
      set(value) {
        _builder.setPos(value)
      }
    /**
     * ```
     * 卡片位次
     * ```
     *
     * `int64 pos = 6;`
     */
    public fun clearPos() {
      _builder.clearPos()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.gateway.TopicListItem.copy(block: `bilibili.dynamic.gateway`.TopicListItemKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.gateway.TopicListItem =
  `bilibili.dynamic.gateway`.TopicListItemKt.Dsl._create(this.toBuilder()).apply { block() }._build()

