// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializedynVideoMultiP")
public inline fun dynVideoMultiP(block: bilibili.dynamic.DynVideoMultiPKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.DynVideoMultiP =
  bilibili.dynamic.DynVideoMultiPKt.Dsl._create(bilibili.dynamic.DynVideoMultiP.newBuilder()).apply { block() }._build()
/**
 * ```
 * 动态视频分P聚合字段
 * ```
 *
 * Protobuf type `bilibili.dynamic.DynVideoMultiP`
 */
public object DynVideoMultiPKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.DynVideoMultiP.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.DynVideoMultiP.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.DynVideoMultiP = _builder.build()

    /**
     * ```
     * 分P标题
     * ```
     *
     * `string title = 1;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * 分P标题
     * ```
     *
     * `string title = 1;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * 分P的文件名
     * ```
     *
     * `string filename = 2;`
     */
    public var filename: kotlin.String
      @JvmName("getFilename")
      get() = _builder.getFilename()
      @JvmName("setFilename")
      set(value) {
        _builder.setFilename(value)
      }
    /**
     * ```
     * 分P的文件名
     * ```
     *
     * `string filename = 2;`
     */
    public fun clearFilename() {
      _builder.clearFilename()
    }

    /**
     * ```
     * ```
     *
     * `int64 cid = 3;`
     */
    public var cid: kotlin.Long
      @JvmName("getCid")
      get() = _builder.getCid()
      @JvmName("setCid")
      set(value) {
        _builder.setCid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 cid = 3;`
     */
    public fun clearCid() {
      _builder.clearCid()
    }

    /**
     * ```
     * 编辑环境上报信息
     * ```
     *
     * `.bilibili.dynamic.DynVideoEditor editor = 4;`
     */
    public var editor: bilibili.dynamic.DynVideoEditor
      @JvmName("getEditor")
      get() = _builder.getEditor()
      @JvmName("setEditor")
      set(value) {
        _builder.setEditor(value)
      }
    /**
     * ```
     * 编辑环境上报信息
     * ```
     *
     * `.bilibili.dynamic.DynVideoEditor editor = 4;`
     */
    public fun clearEditor() {
      _builder.clearEditor()
    }
    /**
     * ```
     * 编辑环境上报信息
     * ```
     *
     * `.bilibili.dynamic.DynVideoEditor editor = 4;`
     * @return Whether the editor field is set.
     */
    public fun hasEditor(): kotlin.Boolean {
      return _builder.hasEditor()
    }
    public val DynVideoMultiPKt.Dsl.editorOrNull: bilibili.dynamic.DynVideoEditor?
      get() = _builder.editorOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.DynVideoMultiP.copy(block: `bilibili.dynamic`.DynVideoMultiPKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.DynVideoMultiP =
  `bilibili.dynamic`.DynVideoMultiPKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.dynamic.DynVideoMultiPOrBuilder.editorOrNull: bilibili.dynamic.DynVideoEditor?
  get() = if (hasEditor()) getEditor() else null

