// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializebottomBusiness")
public inline fun bottomBusiness(block: bilibili.dynamic.BottomBusinessKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.BottomBusiness =
  bilibili.dynamic.BottomBusinessKt.Dsl._create(bilibili.dynamic.BottomBusiness.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.dynamic.BottomBusiness`
 */
public object BottomBusinessKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.BottomBusiness.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.BottomBusiness.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.BottomBusiness = _builder.build()

    /**
     * ```
     * 业务方资源id
     * ```
     *
     * `int64 rid = 1;`
     */
    public var rid: kotlin.Long
      @JvmName("getRid")
      get() = _builder.getRid()
      @JvmName("setRid")
      set(value) {
        _builder.setRid(value)
      }
    /**
     * ```
     * 业务方资源id
     * ```
     *
     * `int64 rid = 1;`
     */
    public fun clearRid() {
      _builder.clearRid()
    }

    /**
     * ```
     * 业务方类型，定义在BottomBizType中
     * ```
     *
     * `int64 type = 2;`
     */
    public var type: kotlin.Long
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * ```
     * 业务方类型，定义在BottomBizType中
     * ```
     *
     * `int64 type = 2;`
     */
    public fun clearType() {
      _builder.clearType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.BottomBusiness.copy(block: `bilibili.dynamic`.BottomBusinessKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.BottomBusiness =
  `bilibili.dynamic`.BottomBusinessKt.Dsl._create(this.toBuilder()).apply { block() }._build()

