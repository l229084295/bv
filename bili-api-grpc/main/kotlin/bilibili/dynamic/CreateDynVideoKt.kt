// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializecreateDynVideo")
public inline fun createDynVideo(block: bilibili.dynamic.CreateDynVideoKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.CreateDynVideo =
  bilibili.dynamic.CreateDynVideoKt.Dsl._create(bilibili.dynamic.CreateDynVideo.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.dynamic.CreateDynVideo`
 */
public object CreateDynVideoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.CreateDynVideo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.CreateDynVideo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.CreateDynVideo = _builder.build()

    /**
     * ```
     * 投稿平台来源，具体写什么@产品
     * ```
     *
     * `string relation_from = 1;`
     */
    public var relationFrom: kotlin.String
      @JvmName("getRelationFrom")
      get() = _builder.getRelationFrom()
      @JvmName("setRelationFrom")
      set(value) {
        _builder.setRelationFrom(value)
      }
    /**
     * ```
     * 投稿平台来源，具体写什么@产品
     * ```
     *
     * `string relation_from = 1;`
     */
    public fun clearRelationFrom() {
      _builder.clearRelationFrom()
    }

    /**
     * ```
     * 1 — 投稿入口 + 相册选择视频 2 — 投稿入口 + 拍摄 3 — 小视频入口 + 相册选择视频 4 — 小视频入口 + 拍摄
     * ```
     *
     * `int32 biz_from = 3;`
     */
    public var bizFrom: kotlin.Int
      @JvmName("getBizFrom")
      get() = _builder.getBizFrom()
      @JvmName("setBizFrom")
      set(value) {
        _builder.setBizFrom(value)
      }
    /**
     * ```
     * 1 — 投稿入口 + 相册选择视频 2 — 投稿入口 + 拍摄 3 — 小视频入口 + 相册选择视频 4 — 小视频入口 + 拍摄
     * ```
     *
     * `int32 biz_from = 3;`
     */
    public fun clearBizFrom() {
      _builder.clearBizFrom()
    }

    /**
     * ```
     * 投稿类型:  2-转载、1-自制
     * ```
     *
     * `int32 copyright = 4;`
     */
    public var copyright: kotlin.Int
      @JvmName("getCopyright")
      get() = _builder.getCopyright()
      @JvmName("setCopyright")
      set(value) {
        _builder.setCopyright(value)
      }
    /**
     * ```
     * 投稿类型:  2-转载、1-自制
     * ```
     *
     * `int32 copyright = 4;`
     */
    public fun clearCopyright() {
      _builder.clearCopyright()
    }

    /**
     * ```
     * 是否公开投稿 0允许公开，1不允许公开 默认 0公开
     * ```
     *
     * `int32 no_public = 5;`
     */
    public var noPublic: kotlin.Int
      @JvmName("getNoPublic")
      get() = _builder.getNoPublic()
      @JvmName("setNoPublic")
      set(value) {
        _builder.setNoPublic(value)
      }
    /**
     * ```
     * 是否公开投稿 0允许公开，1不允许公开 默认 0公开
     * ```
     *
     * `int32 no_public = 5;`
     */
    public fun clearNoPublic() {
      _builder.clearNoPublic()
    }

    /**
     * ```
     * 是否允许转载字段 0允许，1不允许，默认为0    copyright = 1 自制的时候默认勾选上no_reprint=1
     * ```
     *
     * `int32 no_reprint = 6;`
     */
    public var noReprint: kotlin.Int
      @JvmName("getNoReprint")
      get() = _builder.getNoReprint()
      @JvmName("setNoReprint")
      set(value) {
        _builder.setNoReprint(value)
      }
    /**
     * ```
     * 是否允许转载字段 0允许，1不允许，默认为0    copyright = 1 自制的时候默认勾选上no_reprint=1
     * ```
     *
     * `int32 no_reprint = 6;`
     */
    public fun clearNoReprint() {
      _builder.clearNoReprint()
    }

    /**
     * ```
     * 转载的时候必须填写，非空字符串
     * ```
     *
     * `string source = 7;`
     */
    public var source: kotlin.String
      @JvmName("getSource")
      get() = _builder.getSource()
      @JvmName("setSource")
      set(value) {
        _builder.setSource(value)
      }
    /**
     * ```
     * 转载的时候必须填写，非空字符串
     * ```
     *
     * `string source = 7;`
     */
    public fun clearSource() {
      _builder.clearSource()
    }

    /**
     * ```
     * 稿件封面必须填写,不能为空 封面不支持其他源站链接 请确保 cover 是 先经过上传接口
     * ```
     *
     * `string cover = 8;`
     */
    public var cover: kotlin.String
      @JvmName("getCover")
      get() = _builder.getCover()
      @JvmName("setCover")
      set(value) {
        _builder.setCover(value)
      }
    /**
     * ```
     * 稿件封面必须填写,不能为空 封面不支持其他源站链接 请确保 cover 是 先经过上传接口
     * ```
     *
     * `string cover = 8;`
     */
    public fun clearCover() {
      _builder.clearCover()
    }

    /**
     * ```
     * 稿件标题
     * ```
     *
     * `string title = 9;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * 稿件标题
     * ```
     *
     * `string title = 9;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * 稿件分区ID 必须是有效的二级分区ID
     * ```
     *
     * `int64 tid = 10;`
     */
    public var tid: kotlin.Long
      @JvmName("getTid")
      get() = _builder.getTid()
      @JvmName("setTid")
      set(value) {
        _builder.setTid(value)
      }
    /**
     * ```
     * 稿件分区ID 必须是有效的二级分区ID
     * ```
     *
     * `int64 tid = 10;`
     */
    public fun clearTid() {
      _builder.clearTid()
    }

    /**
     * ```
     * 标签 多个标签请使用英文逗号连接
     * ```
     *
     * `string tag = 11;`
     */
    public var tag: kotlin.String
      @JvmName("getTag")
      get() = _builder.getTag()
      @JvmName("setTag")
      set(value) {
        _builder.setTag(value)
      }
    /**
     * ```
     * 标签 多个标签请使用英文逗号连接
     * ```
     *
     * `string tag = 11;`
     */
    public fun clearTag() {
      _builder.clearTag()
    }

    /**
     * ```
     * 稿件描述
     * ```
     *
     * `string desc = 12;`
     */
    public var desc: kotlin.String
      @JvmName("getDesc")
      get() = _builder.getDesc()
      @JvmName("setDesc")
      set(value) {
        _builder.setDesc(value)
      }
    /**
     * ```
     * 稿件描述
     * ```
     *
     * `string desc = 12;`
     */
    public fun clearDesc() {
      _builder.clearDesc()
    }

    /**
     * ```
     * 当前输入环境下有，就输入http://domain/x/app/archive/desc/format返回的desc_format值
     * 如果返回null就输入默认为0， 表示当前环境（分区+投稿类型）不参与简介格式化
     * ```
     *
     * `int64 desc_format_id = 13;`
     */
    public var descFormatId: kotlin.Long
      @JvmName("getDescFormatId")
      get() = _builder.getDescFormatId()
      @JvmName("setDescFormatId")
      set(value) {
        _builder.setDescFormatId(value)
      }
    /**
     * ```
     * 当前输入环境下有，就输入http://domain/x/app/archive/desc/format返回的desc_format值
     * 如果返回null就输入默认为0， 表示当前环境（分区+投稿类型）不参与简介格式化
     * ```
     *
     * `int64 desc_format_id = 13;`
     */
    public fun clearDescFormatId() {
      _builder.clearDescFormatId()
    }

    /**
     * ```
     * 稿件是否开启充电面板，1为是, 0为否
     * ```
     *
     * `int32 open_elec = 14;`
     */
    public var openElec: kotlin.Int
      @JvmName("getOpenElec")
      get() = _builder.getOpenElec()
      @JvmName("setOpenElec")
      set(value) {
        _builder.setOpenElec(value)
      }
    /**
     * ```
     * 稿件是否开启充电面板，1为是, 0为否
     * ```
     *
     * `int32 open_elec = 14;`
     */
    public fun clearOpenElec() {
      _builder.clearOpenElec()
    }

    /**
     * ```
     * 定时发布的时间
     * ```
     *
     * `int32 dtime = 15;`
     */
    public var dtime: kotlin.Int
      @JvmName("getDtime")
      get() = _builder.getDtime()
      @JvmName("setDtime")
      set(value) {
        _builder.setDtime(value)
      }
    /**
     * ```
     * 定时发布的时间
     * ```
     *
     * `int32 dtime = 15;`
     */
    public fun clearDtime() {
      _builder.clearDtime()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class VideosProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 分P聚合字段
     * ```
     *
     * `repeated .bilibili.dynamic.DynVideoMultiP videos = 16;`
     */
     public val videos: com.google.protobuf.kotlin.DslList<bilibili.dynamic.DynVideoMultiP, VideosProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getVideosList()
      )
    /**
     * ```
     * 分P聚合字段
     * ```
     *
     * `repeated .bilibili.dynamic.DynVideoMultiP videos = 16;`
     * @param value The videos to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addVideos")
    public fun com.google.protobuf.kotlin.DslList<bilibili.dynamic.DynVideoMultiP, VideosProxy>.add(value: bilibili.dynamic.DynVideoMultiP) {
      _builder.addVideos(value)
    }
    /**
     * ```
     * 分P聚合字段
     * ```
     *
     * `repeated .bilibili.dynamic.DynVideoMultiP videos = 16;`
     * @param value The videos to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignVideos")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<bilibili.dynamic.DynVideoMultiP, VideosProxy>.plusAssign(value: bilibili.dynamic.DynVideoMultiP) {
      add(value)
    }
    /**
     * ```
     * 分P聚合字段
     * ```
     *
     * `repeated .bilibili.dynamic.DynVideoMultiP videos = 16;`
     * @param values The videos to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllVideos")
    public fun com.google.protobuf.kotlin.DslList<bilibili.dynamic.DynVideoMultiP, VideosProxy>.addAll(values: kotlin.collections.Iterable<bilibili.dynamic.DynVideoMultiP>) {
      _builder.addAllVideos(values)
    }
    /**
     * ```
     * 分P聚合字段
     * ```
     *
     * `repeated .bilibili.dynamic.DynVideoMultiP videos = 16;`
     * @param values The videos to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllVideos")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<bilibili.dynamic.DynVideoMultiP, VideosProxy>.plusAssign(values: kotlin.collections.Iterable<bilibili.dynamic.DynVideoMultiP>) {
      addAll(values)
    }
    /**
     * ```
     * 分P聚合字段
     * ```
     *
     * `repeated .bilibili.dynamic.DynVideoMultiP videos = 16;`
     * @param index The index to set the value at.
     * @param value The videos to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setVideos")
    public operator fun com.google.protobuf.kotlin.DslList<bilibili.dynamic.DynVideoMultiP, VideosProxy>.set(index: kotlin.Int, value: bilibili.dynamic.DynVideoMultiP) {
      _builder.setVideos(index, value)
    }
    /**
     * ```
     * 分P聚合字段
     * ```
     *
     * `repeated .bilibili.dynamic.DynVideoMultiP videos = 16;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearVideos")
    public fun com.google.protobuf.kotlin.DslList<bilibili.dynamic.DynVideoMultiP, VideosProxy>.clear() {
      _builder.clearVideos()
    }


    /**
     * ```
     * 水印信息
     * ```
     *
     * `.bilibili.dynamic.DynVideoWatermark watermark = 17;`
     */
    public var watermark: bilibili.dynamic.DynVideoWatermark
      @JvmName("getWatermark")
      get() = _builder.getWatermark()
      @JvmName("setWatermark")
      set(value) {
        _builder.setWatermark(value)
      }
    /**
     * ```
     * 水印信息
     * ```
     *
     * `.bilibili.dynamic.DynVideoWatermark watermark = 17;`
     */
    public fun clearWatermark() {
      _builder.clearWatermark()
    }
    /**
     * ```
     * 水印信息
     * ```
     *
     * `.bilibili.dynamic.DynVideoWatermark watermark = 17;`
     * @return Whether the watermark field is set.
     */
    public fun hasWatermark(): kotlin.Boolean {
      return _builder.hasWatermark()
    }
    public val CreateDynVideoKt.Dsl.watermarkOrNull: bilibili.dynamic.DynVideoWatermark?
      get() = _builder.watermarkOrNull

    /**
     * ```
     * 新增加通过tag来参加活动
     * ```
     *
     * `int64 mission_id = 18;`
     */
    public var missionId: kotlin.Long
      @JvmName("getMissionId")
      get() = _builder.getMissionId()
      @JvmName("setMissionId")
      set(value) {
        _builder.setMissionId(value)
      }
    /**
     * ```
     * 新增加通过tag来参加活动
     * ```
     *
     * `int64 mission_id = 18;`
     */
    public fun clearMissionId() {
      _builder.clearMissionId()
    }

    /**
     * ```
     * 新增加可以添加动态内容
     * ```
     *
     * `string dynamic = 19;`
     */
    public var dynamic: kotlin.String
      @JvmName("getDynamic")
      get() = _builder.getDynamic()
      @JvmName("setDynamic")
      set(value) {
        _builder.setDynamic(value)
      }
    /**
     * ```
     * 新增加可以添加动态内容
     * ```
     *
     * `string dynamic = 19;`
     */
    public fun clearDynamic() {
      _builder.clearDynamic()
    }

    /**
     * ```
     * 序列化后的extend_info扩展信息
     * ```
     *
     * `string dynamic_extension = 20;`
     */
    public var dynamicExtension: kotlin.String
      @JvmName("getDynamicExtension")
      get() = _builder.getDynamicExtension()
      @JvmName("setDynamicExtension")
      set(value) {
        _builder.setDynamicExtension(value)
      }
    /**
     * ```
     * 序列化后的extend_info扩展信息
     * ```
     *
     * `string dynamic_extension = 20;`
     */
    public fun clearDynamicExtension() {
      _builder.clearDynamicExtension()
    }

    /**
     * ```
     * 客户端控制字段
     * ```
     *
     * `string dynamic_ctrl = 21;`
     */
    public var dynamicCtrl: kotlin.String
      @JvmName("getDynamicCtrl")
      get() = _builder.getDynamicCtrl()
      @JvmName("setDynamicCtrl")
      set(value) {
        _builder.setDynamicCtrl(value)
      }
    /**
     * ```
     * 客户端控制字段
     * ```
     *
     * `string dynamic_ctrl = 21;`
     */
    public fun clearDynamicCtrl() {
      _builder.clearDynamicCtrl()
    }

    /**
     * ```
     * 动态来源
     * ```
     *
     * `string dynamic_from = 22;`
     */
    public var dynamicFrom: kotlin.String
      @JvmName("getDynamicFrom")
      get() = _builder.getDynamicFrom()
      @JvmName("setDynamicFrom")
      set(value) {
        _builder.setDynamicFrom(value)
      }
    /**
     * ```
     * 动态来源
     * ```
     *
     * `string dynamic_from = 22;`
     */
    public fun clearDynamicFrom() {
      _builder.clearDynamicFrom()
    }

    /**
     * ```
     * 抽奖服务生成的ID
     * ```
     *
     * `int64 lottery_id = 23;`
     */
    public var lotteryId: kotlin.Long
      @JvmName("getLotteryId")
      get() = _builder.getLotteryId()
      @JvmName("setLotteryId")
      set(value) {
        _builder.setLotteryId(value)
      }
    /**
     * ```
     * 抽奖服务生成的ID
     * ```
     *
     * `int64 lottery_id = 23;`
     */
    public fun clearLotteryId() {
      _builder.clearLotteryId()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.dynamic.DynVideoVote vote = 24;`
     */
    public var vote: bilibili.dynamic.DynVideoVote
      @JvmName("getVote")
      get() = _builder.getVote()
      @JvmName("setVote")
      set(value) {
        _builder.setVote(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.dynamic.DynVideoVote vote = 24;`
     */
    public fun clearVote() {
      _builder.clearVote()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.dynamic.DynVideoVote vote = 24;`
     * @return Whether the vote field is set.
     */
    public fun hasVote(): kotlin.Boolean {
      return _builder.hasVote()
    }
    public val CreateDynVideoKt.Dsl.voteOrNull: bilibili.dynamic.DynVideoVote?
      get() = _builder.voteOrNull

    /**
     * ```
     * 精选评论开关, true为开
     * ```
     *
     * `bool up_selection_reply = 25;`
     */
    public var upSelectionReply: kotlin.Boolean
      @JvmName("getUpSelectionReply")
      get() = _builder.getUpSelectionReply()
      @JvmName("setUpSelectionReply")
      set(value) {
        _builder.setUpSelectionReply(value)
      }
    /**
     * ```
     * 精选评论开关, true为开
     * ```
     *
     * `bool up_selection_reply = 25;`
     */
    public fun clearUpSelectionReply() {
      _builder.clearUpSelectionReply()
    }

    /**
     * ```
     * up主关闭评论
     * ```
     *
     * `bool up_close_reply = 26;`
     */
    public var upCloseReply: kotlin.Boolean
      @JvmName("getUpCloseReply")
      get() = _builder.getUpCloseReply()
      @JvmName("setUpCloseReply")
      set(value) {
        _builder.setUpCloseReply(value)
      }
    /**
     * ```
     * up主关闭评论
     * ```
     *
     * `bool up_close_reply = 26;`
     */
    public fun clearUpCloseReply() {
      _builder.clearUpCloseReply()
    }

    /**
     * ```
     * up主关闭弹幕
     * ```
     *
     * `bool up_close_danmu = 27;`
     */
    public var upCloseDanmu: kotlin.Boolean
      @JvmName("getUpCloseDanmu")
      get() = _builder.getUpCloseDanmu()
      @JvmName("setUpCloseDanmu")
      set(value) {
        _builder.setUpCloseDanmu(value)
      }
    /**
     * ```
     * up主关闭弹幕
     * ```
     *
     * `bool up_close_danmu = 27;`
     */
    public fun clearUpCloseDanmu() {
      _builder.clearUpCloseDanmu()
    }

    /**
     * ```
     * 稿件投稿来源
     * ```
     *
     * `int64 up_from = 28;`
     */
    public var upFrom: kotlin.Long
      @JvmName("getUpFrom")
      get() = _builder.getUpFrom()
      @JvmName("setUpFrom")
      set(value) {
        _builder.setUpFrom(value)
      }
    /**
     * ```
     * 稿件投稿来源
     * ```
     *
     * `int64 up_from = 28;`
     */
    public fun clearUpFrom() {
      _builder.clearUpFrom()
    }

    /**
     * ```
     * ```
     *
     * `int64 duration = 29;`
     */
    public var duration: kotlin.Long
      @JvmName("getDuration")
      get() = _builder.getDuration()
      @JvmName("setDuration")
      set(value) {
        _builder.setDuration(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 duration = 29;`
     */
    public fun clearDuration() {
      _builder.clearDuration()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.CreateDynVideo.copy(block: `bilibili.dynamic`.CreateDynVideoKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.CreateDynVideo =
  `bilibili.dynamic`.CreateDynVideoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.dynamic.CreateDynVideoOrBuilder.watermarkOrNull: bilibili.dynamic.DynVideoWatermark?
  get() = if (hasWatermark()) getWatermark() else null

public val bilibili.dynamic.CreateDynVideoOrBuilder.voteOrNull: bilibili.dynamic.DynVideoVote?
  get() = if (hasVote()) getVote() else null

