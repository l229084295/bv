// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/dynamic/common/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.dynamic;

@kotlin.jvm.JvmName("-initializecreateAttachCard")
public inline fun createAttachCard(block: bilibili.dynamic.CreateAttachCardKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.CreateAttachCard =
  bilibili.dynamic.CreateAttachCardKt.Dsl._create(bilibili.dynamic.CreateAttachCard.newBuilder()).apply { block() }._build()
/**
 * ```
 * 动态附带的附加大卡
 * ```
 *
 * Protobuf type `bilibili.dynamic.CreateAttachCard`
 */
public object CreateAttachCardKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.dynamic.CreateAttachCard.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.dynamic.CreateAttachCard.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.dynamic.CreateAttachCard = _builder.build()

    /**
     * ```
     * 商品大卡
     * ```
     *
     * `.bilibili.dynamic.CreateGoodsCard goods = 1;`
     */
    public var goods: bilibili.dynamic.CreateGoodsCard
      @JvmName("getGoods")
      get() = _builder.getGoods()
      @JvmName("setGoods")
      set(value) {
        _builder.setGoods(value)
      }
    /**
     * ```
     * 商品大卡
     * ```
     *
     * `.bilibili.dynamic.CreateGoodsCard goods = 1;`
     */
    public fun clearGoods() {
      _builder.clearGoods()
    }
    /**
     * ```
     * 商品大卡
     * ```
     *
     * `.bilibili.dynamic.CreateGoodsCard goods = 1;`
     * @return Whether the goods field is set.
     */
    public fun hasGoods(): kotlin.Boolean {
      return _builder.hasGoods()
    }
    public val CreateAttachCardKt.Dsl.goodsOrNull: bilibili.dynamic.CreateGoodsCard?
      get() = _builder.goodsOrNull

    /**
     * ```
     * 通用附加大卡，目前仅限定Match,Game,Ugc,Pugv,Reserve，且同时只能有一个
     * ```
     *
     * `.bilibili.dynamic.CreateCommonAttachCard common_card = 2;`
     */
    public var commonCard: bilibili.dynamic.CreateCommonAttachCard
      @JvmName("getCommonCard")
      get() = _builder.getCommonCard()
      @JvmName("setCommonCard")
      set(value) {
        _builder.setCommonCard(value)
      }
    /**
     * ```
     * 通用附加大卡，目前仅限定Match,Game,Ugc,Pugv,Reserve，且同时只能有一个
     * ```
     *
     * `.bilibili.dynamic.CreateCommonAttachCard common_card = 2;`
     */
    public fun clearCommonCard() {
      _builder.clearCommonCard()
    }
    /**
     * ```
     * 通用附加大卡，目前仅限定Match,Game,Ugc,Pugv,Reserve，且同时只能有一个
     * ```
     *
     * `.bilibili.dynamic.CreateCommonAttachCard common_card = 2;`
     * @return Whether the commonCard field is set.
     */
    public fun hasCommonCard(): kotlin.Boolean {
      return _builder.hasCommonCard()
    }
    public val CreateAttachCardKt.Dsl.commonCardOrNull: bilibili.dynamic.CreateCommonAttachCard?
      get() = _builder.commonCardOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.dynamic.CreateAttachCard.copy(block: `bilibili.dynamic`.CreateAttachCardKt.Dsl.() -> kotlin.Unit): bilibili.dynamic.CreateAttachCard =
  `bilibili.dynamic`.CreateAttachCardKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.dynamic.CreateAttachCardOrBuilder.goodsOrNull: bilibili.dynamic.CreateGoodsCard?
  get() = if (hasGoods()) getGoods() else null

public val bilibili.dynamic.CreateAttachCardOrBuilder.commonCardOrNull: bilibili.dynamic.CreateCommonAttachCard?
  get() = if (hasCommonCard()) getCommonCard() else null

