// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/polymer/contract/v1/contract.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.polymer.contract.v1;

@kotlin.jvm.JvmName("-initializecontractConfigReply")
public inline fun contractConfigReply(block: bilibili.polymer.contract.v1.ContractConfigReplyKt.Dsl.() -> kotlin.Unit): bilibili.polymer.contract.v1.ContractConfigReply =
  bilibili.polymer.contract.v1.ContractConfigReplyKt.Dsl._create(bilibili.polymer.contract.v1.ContractConfigReply.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.polymer.contract.v1.ContractConfigReply`
 */
public object ContractConfigReplyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.polymer.contract.v1.ContractConfigReply.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.polymer.contract.v1.ContractConfigReply.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.polymer.contract.v1.ContractConfigReply = _builder.build()

    /**
     * ```
     * ```
     *
     * `int32 is_follow_display = 1;`
     */
    public var isFollowDisplay: kotlin.Int
      @JvmName("getIsFollowDisplay")
      get() = _builder.getIsFollowDisplay()
      @JvmName("setIsFollowDisplay")
      set(value) {
        _builder.setIsFollowDisplay(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 is_follow_display = 1;`
     */
    public fun clearIsFollowDisplay() {
      _builder.clearIsFollowDisplay()
    }

    /**
     * ```
     * ```
     *
     * `int32 is_triple_display = 2;`
     */
    public var isTripleDisplay: kotlin.Int
      @JvmName("getIsTripleDisplay")
      get() = _builder.getIsTripleDisplay()
      @JvmName("setIsTripleDisplay")
      set(value) {
        _builder.setIsTripleDisplay(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 is_triple_display = 2;`
     */
    public fun clearIsTripleDisplay() {
      _builder.clearIsTripleDisplay()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.polymer.contract.v1.ContractCard contract_card = 3;`
     */
    public var contractCard: bilibili.polymer.contract.v1.ContractCard
      @JvmName("getContractCard")
      get() = _builder.getContractCard()
      @JvmName("setContractCard")
      set(value) {
        _builder.setContractCard(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.polymer.contract.v1.ContractCard contract_card = 3;`
     */
    public fun clearContractCard() {
      _builder.clearContractCard()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.polymer.contract.v1.ContractCard contract_card = 3;`
     * @return Whether the contractCard field is set.
     */
    public fun hasContractCard(): kotlin.Boolean {
      return _builder.hasContractCard()
    }
    public val ContractConfigReplyKt.Dsl.contractCardOrNull: bilibili.polymer.contract.v1.ContractCard?
      get() = _builder.contractCardOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.polymer.contract.v1.ContractConfigReply.copy(block: `bilibili.polymer.contract.v1`.ContractConfigReplyKt.Dsl.() -> kotlin.Unit): bilibili.polymer.contract.v1.ContractConfigReply =
  `bilibili.polymer.contract.v1`.ContractConfigReplyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.polymer.contract.v1.ContractConfigReplyOrBuilder.contractCardOrNull: bilibili.polymer.contract.v1.ContractCard?
  get() = if (hasContractCard()) getContractCard() else null

