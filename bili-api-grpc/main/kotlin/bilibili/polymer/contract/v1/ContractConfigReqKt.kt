// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/polymer/contract/v1/contract.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.polymer.contract.v1;

@kotlin.jvm.JvmName("-initializecontractConfigReq")
public inline fun contractConfigReq(block: bilibili.polymer.contract.v1.ContractConfigReqKt.Dsl.() -> kotlin.Unit): bilibili.polymer.contract.v1.ContractConfigReq =
  bilibili.polymer.contract.v1.ContractConfigReqKt.Dsl._create(bilibili.polymer.contract.v1.ContractConfigReq.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.polymer.contract.v1.ContractConfigReq`
 */
public object ContractConfigReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.polymer.contract.v1.ContractConfigReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.polymer.contract.v1.ContractConfigReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.polymer.contract.v1.ContractConfigReq = _builder.build()

    /**
     * ```
     * ```
     *
     * `.bilibili.polymer.contract.v1.CommonReq common = 1;`
     */
    public var common: bilibili.polymer.contract.v1.CommonReq
      @JvmName("getCommon")
      get() = _builder.getCommon()
      @JvmName("setCommon")
      set(value) {
        _builder.setCommon(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.polymer.contract.v1.CommonReq common = 1;`
     */
    public fun clearCommon() {
      _builder.clearCommon()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.polymer.contract.v1.CommonReq common = 1;`
     * @return Whether the common field is set.
     */
    public fun hasCommon(): kotlin.Boolean {
      return _builder.hasCommon()
    }
    public val ContractConfigReqKt.Dsl.commonOrNull: bilibili.polymer.contract.v1.CommonReq?
      get() = _builder.commonOrNull

    /**
     * ```
     * ```
     *
     * `int64 mid = 2;`
     */
    public var mid: kotlin.Long
      @JvmName("getMid")
      get() = _builder.getMid()
      @JvmName("setMid")
      set(value) {
        _builder.setMid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 mid = 2;`
     */
    public fun clearMid() {
      _builder.clearMid()
    }

    /**
     * ```
     * ```
     *
     * `int64 up_mid = 3;`
     */
    public var upMid: kotlin.Long
      @JvmName("getUpMid")
      get() = _builder.getUpMid()
      @JvmName("setUpMid")
      set(value) {
        _builder.setUpMid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 up_mid = 3;`
     */
    public fun clearUpMid() {
      _builder.clearUpMid()
    }

    /**
     * ```
     * ```
     *
     * `int64 aid = 4;`
     */
    public var aid: kotlin.Long
      @JvmName("getAid")
      get() = _builder.getAid()
      @JvmName("setAid")
      set(value) {
        _builder.setAid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 aid = 4;`
     */
    public fun clearAid() {
      _builder.clearAid()
    }

    /**
     * ```
     * ```
     *
     * `int32 source = 5;`
     */
    public var source: kotlin.Int
      @JvmName("getSource")
      get() = _builder.getSource()
      @JvmName("setSource")
      set(value) {
        _builder.setSource(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 source = 5;`
     */
    public fun clearSource() {
      _builder.clearSource()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.polymer.contract.v1.ContractConfigReq.copy(block: `bilibili.polymer.contract.v1`.ContractConfigReqKt.Dsl.() -> kotlin.Unit): bilibili.polymer.contract.v1.ContractConfigReq =
  `bilibili.polymer.contract.v1`.ContractConfigReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.polymer.contract.v1.ContractConfigReqOrBuilder.commonOrNull: bilibili.polymer.contract.v1.CommonReq?
  get() = if (hasCommon()) getCommon() else null

