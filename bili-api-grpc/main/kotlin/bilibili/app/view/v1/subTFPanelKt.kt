// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/view/v1/view.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.view.v1;

@kotlin.jvm.JvmName("-initializesubTFPanel")
public inline fun subTFPanel(block: bilibili.app.view.v1.subTFPanelKt.Dsl.() -> kotlin.Unit): bilibili.app.view.v1.subTFPanel =
  bilibili.app.view.v1.subTFPanelKt.Dsl._create(bilibili.app.view.v1.subTFPanel.newBuilder()).apply { block() }._build()
/**
 * ```
 * 免流子面板定制化配置
 * ```
 *
 * Protobuf type `bilibili.app.view.v1.subTFPanel`
 */
public object subTFPanelKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.view.v1.subTFPanel.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.view.v1.subTFPanel.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.view.v1.subTFPanel = _builder.build()

    /**
     * ```
     * 右侧按钮素材
     * ```
     *
     * `string right_btn_img = 1;`
     */
    public var rightBtnImg: kotlin.String
      @JvmName("getRightBtnImg")
      get() = _builder.getRightBtnImg()
      @JvmName("setRightBtnImg")
      set(value) {
        _builder.setRightBtnImg(value)
      }
    /**
     * ```
     * 右侧按钮素材
     * ```
     *
     * `string right_btn_img = 1;`
     */
    public fun clearRightBtnImg() {
      _builder.clearRightBtnImg()
    }

    /**
     * ```
     * 右侧按钮文案
     * ```
     *
     * `string right_btn_text = 2;`
     */
    public var rightBtnText: kotlin.String
      @JvmName("getRightBtnText")
      get() = _builder.getRightBtnText()
      @JvmName("setRightBtnText")
      set(value) {
        _builder.setRightBtnText(value)
      }
    /**
     * ```
     * 右侧按钮文案
     * ```
     *
     * `string right_btn_text = 2;`
     */
    public fun clearRightBtnText() {
      _builder.clearRightBtnText()
    }

    /**
     * ```
     * 右侧按钮字体颜色
     * ```
     *
     * `string right_btn_text_color = 3;`
     */
    public var rightBtnTextColor: kotlin.String
      @JvmName("getRightBtnTextColor")
      get() = _builder.getRightBtnTextColor()
      @JvmName("setRightBtnTextColor")
      set(value) {
        _builder.setRightBtnTextColor(value)
      }
    /**
     * ```
     * 右侧按钮字体颜色
     * ```
     *
     * `string right_btn_text_color = 3;`
     */
    public fun clearRightBtnTextColor() {
      _builder.clearRightBtnTextColor()
    }

    /**
     * ```
     * 右侧按钮跳转链接
     * ```
     *
     * `string right_btn_link = 4;`
     */
    public var rightBtnLink: kotlin.String
      @JvmName("getRightBtnLink")
      get() = _builder.getRightBtnLink()
      @JvmName("setRightBtnLink")
      set(value) {
        _builder.setRightBtnLink(value)
      }
    /**
     * ```
     * 右侧按钮跳转链接
     * ```
     *
     * `string right_btn_link = 4;`
     */
    public fun clearRightBtnLink() {
      _builder.clearRightBtnLink()
    }

    /**
     * ```
     * 中心主文案内容
     * ```
     *
     * `string main_label = 5;`
     */
    public var mainLabel: kotlin.String
      @JvmName("getMainLabel")
      get() = _builder.getMainLabel()
      @JvmName("setMainLabel")
      set(value) {
        _builder.setMainLabel(value)
      }
    /**
     * ```
     * 中心主文案内容
     * ```
     *
     * `string main_label = 5;`
     */
    public fun clearMainLabel() {
      _builder.clearMainLabel()
    }

    /**
     * ```
     * 运营商
     * ```
     *
     * `string operator = 6;`
     */
    public var operator: kotlin.String
      @JvmName("getOperator")
      get() = _builder.getOperator()
      @JvmName("setOperator")
      set(value) {
        _builder.setOperator(value)
      }
    /**
     * ```
     * 运营商
     * ```
     *
     * `string operator = 6;`
     */
    public fun clearOperator() {
      _builder.clearOperator()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.view.v1.subTFPanel.copy(block: `bilibili.app.view.v1`.subTFPanelKt.Dsl.() -> kotlin.Unit): bilibili.app.view.v1.subTFPanel =
  `bilibili.app.view.v1`.subTFPanelKt.Dsl._create(this.toBuilder()).apply { block() }._build()

