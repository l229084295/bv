// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/view/v1/view.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.view.v1;

@kotlin.jvm.JvmName("-initializeupAct")
public inline fun upAct(block: bilibili.app.view.v1.UpActKt.Dsl.() -> kotlin.Unit): bilibili.app.view.v1.UpAct =
  bilibili.app.view.v1.UpActKt.Dsl._create(bilibili.app.view.v1.UpAct.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.view.v1.UpAct`
 */
public object UpActKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.view.v1.UpAct.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.view.v1.UpAct.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.view.v1.UpAct = _builder.build()

    /**
     * ```
     * ```
     *
     * `int64 sid = 1;`
     */
    public var sid: kotlin.Long
      @JvmName("getSid")
      get() = _builder.getSid()
      @JvmName("setSid")
      set(value) {
        _builder.setSid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 sid = 1;`
     */
    public fun clearSid() {
      _builder.clearSid()
    }

    /**
     * ```
     * ```
     *
     * `int64 mid = 2;`
     */
    public var mid: kotlin.Long
      @JvmName("getMid")
      get() = _builder.getMid()
      @JvmName("setMid")
      set(value) {
        _builder.setMid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 mid = 2;`
     */
    public fun clearMid() {
      _builder.clearMid()
    }

    /**
     * ```
     * ```
     *
     * `string title = 3;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * ```
     *
     * `string title = 3;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * ```
     *
     * `string statement = 4;`
     */
    public var statement: kotlin.String
      @JvmName("getStatement")
      get() = _builder.getStatement()
      @JvmName("setStatement")
      set(value) {
        _builder.setStatement(value)
      }
    /**
     * ```
     * ```
     *
     * `string statement = 4;`
     */
    public fun clearStatement() {
      _builder.clearStatement()
    }

    /**
     * ```
     * ```
     *
     * `string image = 5;`
     */
    public var image: kotlin.String
      @JvmName("getImage")
      get() = _builder.getImage()
      @JvmName("setImage")
      set(value) {
        _builder.setImage(value)
      }
    /**
     * ```
     * ```
     *
     * `string image = 5;`
     */
    public fun clearImage() {
      _builder.clearImage()
    }

    /**
     * ```
     * ```
     *
     * `string url = 6;`
     */
    public var url: kotlin.String
      @JvmName("getUrl")
      get() = _builder.getUrl()
      @JvmName("setUrl")
      set(value) {
        _builder.setUrl(value)
      }
    /**
     * ```
     * ```
     *
     * `string url = 6;`
     */
    public fun clearUrl() {
      _builder.clearUrl()
    }

    /**
     * ```
     * ```
     *
     * `string button = 7;`
     */
    public var button: kotlin.String
      @JvmName("getButton")
      get() = _builder.getButton()
      @JvmName("setButton")
      set(value) {
        _builder.setButton(value)
      }
    /**
     * ```
     * ```
     *
     * `string button = 7;`
     */
    public fun clearButton() {
      _builder.clearButton()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.view.v1.UpAct.copy(block: `bilibili.app.view.v1`.UpActKt.Dsl.() -> kotlin.Unit): bilibili.app.view.v1.UpAct =
  `bilibili.app.view.v1`.UpActKt.Dsl._create(this.toBuilder()).apply { block() }._build()

