// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/view/v1/view.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.view.v1;

@kotlin.jvm.JvmName("-initializeinteraction")
public inline fun interaction(block: bilibili.app.view.v1.InteractionKt.Dsl.() -> kotlin.Unit): bilibili.app.view.v1.Interaction =
  bilibili.app.view.v1.InteractionKt.Dsl._create(bilibili.app.view.v1.Interaction.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.view.v1.Interaction`
 */
public object InteractionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.view.v1.Interaction.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.view.v1.Interaction.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.view.v1.Interaction = _builder.build()

    /**
     * ```
     * ```
     *
     * `.bilibili.app.view.v1.Node history_node = 1;`
     */
    public var historyNode: bilibili.app.view.v1.Node
      @JvmName("getHistoryNode")
      get() = _builder.getHistoryNode()
      @JvmName("setHistoryNode")
      set(value) {
        _builder.setHistoryNode(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.view.v1.Node history_node = 1;`
     */
    public fun clearHistoryNode() {
      _builder.clearHistoryNode()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.view.v1.Node history_node = 1;`
     * @return Whether the historyNode field is set.
     */
    public fun hasHistoryNode(): kotlin.Boolean {
      return _builder.hasHistoryNode()
    }
    public val InteractionKt.Dsl.historyNodeOrNull: bilibili.app.view.v1.Node?
      get() = _builder.historyNodeOrNull

    /**
     * ```
     * ```
     *
     * `int64 graph_version = 2;`
     */
    public var graphVersion: kotlin.Long
      @JvmName("getGraphVersion")
      get() = _builder.getGraphVersion()
      @JvmName("setGraphVersion")
      set(value) {
        _builder.setGraphVersion(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 graph_version = 2;`
     */
    public fun clearGraphVersion() {
      _builder.clearGraphVersion()
    }

    /**
     * ```
     * ```
     *
     * `string msg = 3;`
     */
    public var msg: kotlin.String
      @JvmName("getMsg")
      get() = _builder.getMsg()
      @JvmName("setMsg")
      set(value) {
        _builder.setMsg(value)
      }
    /**
     * ```
     * ```
     *
     * `string msg = 3;`
     */
    public fun clearMsg() {
      _builder.clearMsg()
    }

    /**
     * ```
     * ```
     *
     * `string evaluation = 4;`
     */
    public var evaluation: kotlin.String
      @JvmName("getEvaluation")
      get() = _builder.getEvaluation()
      @JvmName("setEvaluation")
      set(value) {
        _builder.setEvaluation(value)
      }
    /**
     * ```
     * ```
     *
     * `string evaluation = 4;`
     */
    public fun clearEvaluation() {
      _builder.clearEvaluation()
    }

    /**
     * ```
     * ```
     *
     * `int64 mark = 5;`
     */
    public var mark: kotlin.Long
      @JvmName("getMark")
      get() = _builder.getMark()
      @JvmName("setMark")
      set(value) {
        _builder.setMark(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 mark = 5;`
     */
    public fun clearMark() {
      _builder.clearMark()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.view.v1.Interaction.copy(block: `bilibili.app.view.v1`.InteractionKt.Dsl.() -> kotlin.Unit): bilibili.app.view.v1.Interaction =
  `bilibili.app.view.v1`.InteractionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.view.v1.InteractionOrBuilder.historyNodeOrNull: bilibili.app.view.v1.Node?
  get() = if (hasHistoryNode()) getHistoryNode() else null

