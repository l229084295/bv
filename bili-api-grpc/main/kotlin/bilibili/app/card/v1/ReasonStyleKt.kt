// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/card/v1/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.card.v1;

@kotlin.jvm.JvmName("-initializereasonStyle")
public inline fun reasonStyle(block: bilibili.app.card.v1.ReasonStyleKt.Dsl.() -> kotlin.Unit): bilibili.app.card.v1.ReasonStyle =
  bilibili.app.card.v1.ReasonStyleKt.Dsl._create(bilibili.app.card.v1.ReasonStyle.newBuilder()).apply { block() }._build()
/**
 * ```
 * 标签框信息
 * ```
 *
 * Protobuf type `bilibili.app.card.v1.ReasonStyle`
 */
public object ReasonStyleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.card.v1.ReasonStyle.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.card.v1.ReasonStyle.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.card.v1.ReasonStyle = _builder.build()

    /**
     * ```
     * 文案
     * ```
     *
     * `string text = 1;`
     */
    public var text: kotlin.String
      @JvmName("getText")
      get() = _builder.getText()
      @JvmName("setText")
      set(value) {
        _builder.setText(value)
      }
    /**
     * ```
     * 文案
     * ```
     *
     * `string text = 1;`
     */
    public fun clearText() {
      _builder.clearText()
    }

    /**
     * ```
     * 文字颜色
     * ```
     *
     * `string text_color = 2;`
     */
    public var textColor: kotlin.String
      @JvmName("getTextColor")
      get() = _builder.getTextColor()
      @JvmName("setTextColor")
      set(value) {
        _builder.setTextColor(value)
      }
    /**
     * ```
     * 文字颜色
     * ```
     *
     * `string text_color = 2;`
     */
    public fun clearTextColor() {
      _builder.clearTextColor()
    }

    /**
     * ```
     * 背景色
     * ```
     *
     * `string bg_color = 3;`
     */
    public var bgColor: kotlin.String
      @JvmName("getBgColor")
      get() = _builder.getBgColor()
      @JvmName("setBgColor")
      set(value) {
        _builder.setBgColor(value)
      }
    /**
     * ```
     * 背景色
     * ```
     *
     * `string bg_color = 3;`
     */
    public fun clearBgColor() {
      _builder.clearBgColor()
    }

    /**
     * ```
     * 边框色
     * ```
     *
     * `string border_color = 4;`
     */
    public var borderColor: kotlin.String
      @JvmName("getBorderColor")
      get() = _builder.getBorderColor()
      @JvmName("setBorderColor")
      set(value) {
        _builder.setBorderColor(value)
      }
    /**
     * ```
     * 边框色
     * ```
     *
     * `string border_color = 4;`
     */
    public fun clearBorderColor() {
      _builder.clearBorderColor()
    }

    /**
     * ```
     * 图标url
     * ```
     *
     * `string icon_url = 5;`
     */
    public var iconUrl: kotlin.String
      @JvmName("getIconUrl")
      get() = _builder.getIconUrl()
      @JvmName("setIconUrl")
      set(value) {
        _builder.setIconUrl(value)
      }
    /**
     * ```
     * 图标url
     * ```
     *
     * `string icon_url = 5;`
     */
    public fun clearIconUrl() {
      _builder.clearIconUrl()
    }

    /**
     * ```
     * 文字颜色-夜间
     * ```
     *
     * `string text_color_night = 6;`
     */
    public var textColorNight: kotlin.String
      @JvmName("getTextColorNight")
      get() = _builder.getTextColorNight()
      @JvmName("setTextColorNight")
      set(value) {
        _builder.setTextColorNight(value)
      }
    /**
     * ```
     * 文字颜色-夜间
     * ```
     *
     * `string text_color_night = 6;`
     */
    public fun clearTextColorNight() {
      _builder.clearTextColorNight()
    }

    /**
     * ```
     * 背景色-夜间
     * ```
     *
     * `string bg_color_night = 7;`
     */
    public var bgColorNight: kotlin.String
      @JvmName("getBgColorNight")
      get() = _builder.getBgColorNight()
      @JvmName("setBgColorNight")
      set(value) {
        _builder.setBgColorNight(value)
      }
    /**
     * ```
     * 背景色-夜间
     * ```
     *
     * `string bg_color_night = 7;`
     */
    public fun clearBgColorNight() {
      _builder.clearBgColorNight()
    }

    /**
     * ```
     * 边框色-夜间
     * ```
     *
     * `string border_color_night = 8;`
     */
    public var borderColorNight: kotlin.String
      @JvmName("getBorderColorNight")
      get() = _builder.getBorderColorNight()
      @JvmName("setBorderColorNight")
      set(value) {
        _builder.setBorderColorNight(value)
      }
    /**
     * ```
     * 边框色-夜间
     * ```
     *
     * `string border_color_night = 8;`
     */
    public fun clearBorderColorNight() {
      _builder.clearBorderColorNight()
    }

    /**
     * ```
     * 图标url-夜间
     * ```
     *
     * `string icon_night_url = 9;`
     */
    public var iconNightUrl: kotlin.String
      @JvmName("getIconNightUrl")
      get() = _builder.getIconNightUrl()
      @JvmName("setIconNightUrl")
      set(value) {
        _builder.setIconNightUrl(value)
      }
    /**
     * ```
     * 图标url-夜间
     * ```
     *
     * `string icon_night_url = 9;`
     */
    public fun clearIconNightUrl() {
      _builder.clearIconNightUrl()
    }

    /**
     * ```
     * 背景风格id
     * 1:无背景 2:有背景
     * ```
     *
     * `int32 bg_style = 10;`
     */
    public var bgStyle: kotlin.Int
      @JvmName("getBgStyle")
      get() = _builder.getBgStyle()
      @JvmName("setBgStyle")
      set(value) {
        _builder.setBgStyle(value)
      }
    /**
     * ```
     * 背景风格id
     * 1:无背景 2:有背景
     * ```
     *
     * `int32 bg_style = 10;`
     */
    public fun clearBgStyle() {
      _builder.clearBgStyle()
    }

    /**
     * ```
     * ```
     *
     * `string uri = 11;`
     */
    public var uri: kotlin.String
      @JvmName("getUri")
      get() = _builder.getUri()
      @JvmName("setUri")
      set(value) {
        _builder.setUri(value)
      }
    /**
     * ```
     * ```
     *
     * `string uri = 11;`
     */
    public fun clearUri() {
      _builder.clearUri()
    }

    /**
     * ```
     * ```
     *
     * `string icon_bg_url = 12;`
     */
    public var iconBgUrl: kotlin.String
      @JvmName("getIconBgUrl")
      get() = _builder.getIconBgUrl()
      @JvmName("setIconBgUrl")
      set(value) {
        _builder.setIconBgUrl(value)
      }
    /**
     * ```
     * ```
     *
     * `string icon_bg_url = 12;`
     */
    public fun clearIconBgUrl() {
      _builder.clearIconBgUrl()
    }

    /**
     * ```
     * ```
     *
     * `string event = 13;`
     */
    public var event: kotlin.String
      @JvmName("getEvent")
      get() = _builder.getEvent()
      @JvmName("setEvent")
      set(value) {
        _builder.setEvent(value)
      }
    /**
     * ```
     * ```
     *
     * `string event = 13;`
     */
    public fun clearEvent() {
      _builder.clearEvent()
    }

    /**
     * ```
     * ```
     *
     * `string event_v2 = 14;`
     */
    public var eventV2: kotlin.String
      @JvmName("getEventV2")
      get() = _builder.getEventV2()
      @JvmName("setEventV2")
      set(value) {
        _builder.setEventV2(value)
      }
    /**
     * ```
     * ```
     *
     * `string event_v2 = 14;`
     */
    public fun clearEventV2() {
      _builder.clearEventV2()
    }

    /**
     * ```
     * ```
     *
     * `int32 right_icon_type = 15;`
     */
    public var rightIconType: kotlin.Int
      @JvmName("getRightIconType")
      get() = _builder.getRightIconType()
      @JvmName("setRightIconType")
      set(value) {
        _builder.setRightIconType(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 right_icon_type = 15;`
     */
    public fun clearRightIconType() {
      _builder.clearRightIconType()
    }

    /**
     * ```
     * ```
     *
     * `string left_icon_type = 16;`
     */
    public var leftIconType: kotlin.String
      @JvmName("getLeftIconType")
      get() = _builder.getLeftIconType()
      @JvmName("setLeftIconType")
      set(value) {
        _builder.setLeftIconType(value)
      }
    /**
     * ```
     * ```
     *
     * `string left_icon_type = 16;`
     */
    public fun clearLeftIconType() {
      _builder.clearLeftIconType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.card.v1.ReasonStyle.copy(block: `bilibili.app.card.v1`.ReasonStyleKt.Dsl.() -> kotlin.Unit): bilibili.app.card.v1.ReasonStyle =
  `bilibili.app.card.v1`.ReasonStyleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

