// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/card/v1/double.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.card.v1;

@kotlin.jvm.JvmName("-initializesmallCoverV3")
public inline fun smallCoverV3(block: bilibili.app.card.v1.SmallCoverV3Kt.Dsl.() -> kotlin.Unit): bilibili.app.card.v1.SmallCoverV3 =
  bilibili.app.card.v1.SmallCoverV3Kt.Dsl._create(bilibili.app.card.v1.SmallCoverV3.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.card.v1.SmallCoverV3`
 */
public object SmallCoverV3Kt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.card.v1.SmallCoverV3.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.card.v1.SmallCoverV3.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.card.v1.SmallCoverV3 = _builder.build()

    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Base base = 1;`
     */
    public var base: bilibili.app.card.v1.Base
      @JvmName("getBase")
      get() = _builder.getBase()
      @JvmName("setBase")
      set(value) {
        _builder.setBase(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Base base = 1;`
     */
    public fun clearBase() {
      _builder.clearBase()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Base base = 1;`
     * @return Whether the base field is set.
     */
    public fun hasBase(): kotlin.Boolean {
      return _builder.hasBase()
    }
    public val SmallCoverV3Kt.Dsl.baseOrNull: bilibili.app.card.v1.Base?
      get() = _builder.baseOrNull

    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Avatar avatar = 2;`
     */
    public var avatar: bilibili.app.card.v1.Avatar
      @JvmName("getAvatar")
      get() = _builder.getAvatar()
      @JvmName("setAvatar")
      set(value) {
        _builder.setAvatar(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Avatar avatar = 2;`
     */
    public fun clearAvatar() {
      _builder.clearAvatar()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Avatar avatar = 2;`
     * @return Whether the avatar field is set.
     */
    public fun hasAvatar(): kotlin.Boolean {
      return _builder.hasAvatar()
    }
    public val SmallCoverV3Kt.Dsl.avatarOrNull: bilibili.app.card.v1.Avatar?
      get() = _builder.avatarOrNull

    /**
     * ```
     * ```
     *
     * `string cover_left_text = 3;`
     */
    public var coverLeftText: kotlin.String
      @JvmName("getCoverLeftText")
      get() = _builder.getCoverLeftText()
      @JvmName("setCoverLeftText")
      set(value) {
        _builder.setCoverLeftText(value)
      }
    /**
     * ```
     * ```
     *
     * `string cover_left_text = 3;`
     */
    public fun clearCoverLeftText() {
      _builder.clearCoverLeftText()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Button cover_right_button = 4;`
     */
    public var coverRightButton: bilibili.app.card.v1.Button
      @JvmName("getCoverRightButton")
      get() = _builder.getCoverRightButton()
      @JvmName("setCoverRightButton")
      set(value) {
        _builder.setCoverRightButton(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Button cover_right_button = 4;`
     */
    public fun clearCoverRightButton() {
      _builder.clearCoverRightButton()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.Button cover_right_button = 4;`
     * @return Whether the coverRightButton field is set.
     */
    public fun hasCoverRightButton(): kotlin.Boolean {
      return _builder.hasCoverRightButton()
    }
    public val SmallCoverV3Kt.Dsl.coverRightButtonOrNull: bilibili.app.card.v1.Button?
      get() = _builder.coverRightButtonOrNull

    /**
     * ```
     * ```
     *
     * `string rcmd_reason = 5;`
     */
    public var rcmdReason: kotlin.String
      @JvmName("getRcmdReason")
      get() = _builder.getRcmdReason()
      @JvmName("setRcmdReason")
      set(value) {
        _builder.setRcmdReason(value)
      }
    /**
     * ```
     * ```
     *
     * `string rcmd_reason = 5;`
     */
    public fun clearRcmdReason() {
      _builder.clearRcmdReason()
    }

    /**
     * ```
     * ```
     *
     * `string desc = 6;`
     */
    public var desc: kotlin.String
      @JvmName("getDesc")
      get() = _builder.getDesc()
      @JvmName("setDesc")
      set(value) {
        _builder.setDesc(value)
      }
    /**
     * ```
     * ```
     *
     * `string desc = 6;`
     */
    public fun clearDesc() {
      _builder.clearDesc()
    }

    /**
     * ```
     * ```
     *
     * `int32 official_icon = 7;`
     */
    public var officialIcon: kotlin.Int
      @JvmName("getOfficialIcon")
      get() = _builder.getOfficialIcon()
      @JvmName("setOfficialIcon")
      set(value) {
        _builder.setOfficialIcon(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 official_icon = 7;`
     */
    public fun clearOfficialIcon() {
      _builder.clearOfficialIcon()
    }

    /**
     * ```
     * ```
     *
     * `int32 can_play = 8;`
     */
    public var canPlay: kotlin.Int
      @JvmName("getCanPlay")
      get() = _builder.getCanPlay()
      @JvmName("setCanPlay")
      set(value) {
        _builder.setCanPlay(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 can_play = 8;`
     */
    public fun clearCanPlay() {
      _builder.clearCanPlay()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.ReasonStyle rcmd_reason_style = 9;`
     */
    public var rcmdReasonStyle: bilibili.app.card.v1.ReasonStyle
      @JvmName("getRcmdReasonStyle")
      get() = _builder.getRcmdReasonStyle()
      @JvmName("setRcmdReasonStyle")
      set(value) {
        _builder.setRcmdReasonStyle(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.ReasonStyle rcmd_reason_style = 9;`
     */
    public fun clearRcmdReasonStyle() {
      _builder.clearRcmdReasonStyle()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.card.v1.ReasonStyle rcmd_reason_style = 9;`
     * @return Whether the rcmdReasonStyle field is set.
     */
    public fun hasRcmdReasonStyle(): kotlin.Boolean {
      return _builder.hasRcmdReasonStyle()
    }
    public val SmallCoverV3Kt.Dsl.rcmdReasonStyleOrNull: bilibili.app.card.v1.ReasonStyle?
      get() = _builder.rcmdReasonStyleOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.card.v1.SmallCoverV3.copy(block: `bilibili.app.card.v1`.SmallCoverV3Kt.Dsl.() -> kotlin.Unit): bilibili.app.card.v1.SmallCoverV3 =
  `bilibili.app.card.v1`.SmallCoverV3Kt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.card.v1.SmallCoverV3OrBuilder.baseOrNull: bilibili.app.card.v1.Base?
  get() = if (hasBase()) getBase() else null

public val bilibili.app.card.v1.SmallCoverV3OrBuilder.avatarOrNull: bilibili.app.card.v1.Avatar?
  get() = if (hasAvatar()) getAvatar() else null

public val bilibili.app.card.v1.SmallCoverV3OrBuilder.coverRightButtonOrNull: bilibili.app.card.v1.Button?
  get() = if (hasCoverRightButton()) getCoverRightButton() else null

public val bilibili.app.card.v1.SmallCoverV3OrBuilder.rcmdReasonStyleOrNull: bilibili.app.card.v1.ReasonStyle?
  get() = if (hasRcmdReasonStyle()) getRcmdReasonStyle() else null

