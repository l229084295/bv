// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/listener/v1/listener.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.listener.v1;

@kotlin.jvm.JvmName("-initializebKArchive")
public inline fun bKArchive(block: bilibili.app.listener.v1.BKArchiveKt.Dsl.() -> kotlin.Unit): bilibili.app.listener.v1.BKArchive =
  bilibili.app.listener.v1.BKArchiveKt.Dsl._create(bilibili.app.listener.v1.BKArchive.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.listener.v1.BKArchive`
 */
public object BKArchiveKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.listener.v1.BKArchive.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.listener.v1.BKArchive.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.listener.v1.BKArchive = _builder.build()

    /**
     * ```
     * ```
     *
     * `int64 oid = 1;`
     */
    public var oid: kotlin.Long
      @JvmName("getOid")
      get() = _builder.getOid()
      @JvmName("setOid")
      set(value) {
        _builder.setOid(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 oid = 1;`
     */
    public fun clearOid() {
      _builder.clearOid()
    }

    /**
     * ```
     * ```
     *
     * `string title = 2;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * ```
     *
     * `string title = 2;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * ```
     *
     * `string cover = 3;`
     */
    public var cover: kotlin.String
      @JvmName("getCover")
      get() = _builder.getCover()
      @JvmName("setCover")
      set(value) {
        _builder.setCover(value)
      }
    /**
     * ```
     * ```
     *
     * `string cover = 3;`
     */
    public fun clearCover() {
      _builder.clearCover()
    }

    /**
     * ```
     * ```
     *
     * `string desc = 4;`
     */
    public var desc: kotlin.String
      @JvmName("getDesc")
      get() = _builder.getDesc()
      @JvmName("setDesc")
      set(value) {
        _builder.setDesc(value)
      }
    /**
     * ```
     * ```
     *
     * `string desc = 4;`
     */
    public fun clearDesc() {
      _builder.clearDesc()
    }

    /**
     * ```
     * ```
     *
     * `int64 duration = 5;`
     */
    public var duration: kotlin.Long
      @JvmName("getDuration")
      get() = _builder.getDuration()
      @JvmName("setDuration")
      set(value) {
        _builder.setDuration(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 duration = 5;`
     */
    public fun clearDuration() {
      _builder.clearDuration()
    }

    /**
     * ```
     * ```
     *
     * `int32 rid = 6;`
     */
    public var rid: kotlin.Int
      @JvmName("getRid")
      get() = _builder.getRid()
      @JvmName("setRid")
      set(value) {
        _builder.setRid(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 rid = 6;`
     */
    public fun clearRid() {
      _builder.clearRid()
    }

    /**
     * ```
     * ```
     *
     * `string rname = 7;`
     */
    public var rname: kotlin.String
      @JvmName("getRname")
      get() = _builder.getRname()
      @JvmName("setRname")
      set(value) {
        _builder.setRname(value)
      }
    /**
     * ```
     * ```
     *
     * `string rname = 7;`
     */
    public fun clearRname() {
      _builder.clearRname()
    }

    /**
     * ```
     * ```
     *
     * `int64 publish = 8;`
     */
    public var publish: kotlin.Long
      @JvmName("getPublish")
      get() = _builder.getPublish()
      @JvmName("setPublish")
      set(value) {
        _builder.setPublish(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 publish = 8;`
     */
    public fun clearPublish() {
      _builder.clearPublish()
    }

    /**
     * ```
     * ```
     *
     * `string displayed_oid = 9;`
     */
    public var displayedOid: kotlin.String
      @JvmName("getDisplayedOid")
      get() = _builder.getDisplayedOid()
      @JvmName("setDisplayedOid")
      set(value) {
        _builder.setDisplayedOid(value)
      }
    /**
     * ```
     * ```
     *
     * `string displayed_oid = 9;`
     */
    public fun clearDisplayedOid() {
      _builder.clearDisplayedOid()
    }

    /**
     * ```
     * ```
     *
     * `int32 copyright = 10;`
     */
    public var copyright: kotlin.Int
      @JvmName("getCopyright")
      get() = _builder.getCopyright()
      @JvmName("setCopyright")
      set(value) {
        _builder.setCopyright(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 copyright = 10;`
     */
    public fun clearCopyright() {
      _builder.clearCopyright()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.listener.v1.BKArcRights rights = 11;`
     */
    public var rights: bilibili.app.listener.v1.BKArcRights
      @JvmName("getRights")
      get() = _builder.getRights()
      @JvmName("setRights")
      set(value) {
        _builder.setRights(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.listener.v1.BKArcRights rights = 11;`
     */
    public fun clearRights() {
      _builder.clearRights()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.listener.v1.BKArcRights rights = 11;`
     * @return Whether the rights field is set.
     */
    public fun hasRights(): kotlin.Boolean {
      return _builder.hasRights()
    }
    public val BKArchiveKt.Dsl.rightsOrNull: bilibili.app.listener.v1.BKArcRights?
      get() = _builder.rightsOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.listener.v1.BKArchive.copy(block: `bilibili.app.listener.v1`.BKArchiveKt.Dsl.() -> kotlin.Unit): bilibili.app.listener.v1.BKArchive =
  `bilibili.app.listener.v1`.BKArchiveKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.listener.v1.BKArchiveOrBuilder.rightsOrNull: bilibili.app.listener.v1.BKArcRights?
  get() = if (hasRights()) getRights() else null

