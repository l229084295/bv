// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v2/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v2;

@kotlin.jvm.JvmName("-initializetextNode")
public inline fun textNode(block: bilibili.app.dynamic.v2.TextNodeKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.TextNode =
  bilibili.app.dynamic.v2.TextNodeKt.Dsl._create(bilibili.app.dynamic.v2.TextNode.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v2.TextNode`
 */
public object TextNodeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v2.TextNode.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v2.TextNode.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v2.TextNode = _builder.build()

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.TextNode.TextNodeType node_type = 1;`
     */
    public var nodeType: bilibili.app.dynamic.v2.TextNode.TextNodeType
      @JvmName("getNodeType")
      get() = _builder.getNodeType()
      @JvmName("setNodeType")
      set(value) {
        _builder.setNodeType(value)
      }
    public var nodeTypeValue: kotlin.Int
      @JvmName("getNodeTypeValue")
      get() = _builder.getNodeTypeValue()
      @JvmName("setNodeTypeValue")
      set(value) {
        _builder.setNodeTypeValue(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.TextNode.TextNodeType node_type = 1;`
     */
    public fun clearNodeType() {
      _builder.clearNodeType()
    }

    /**
     * `string raw_text = 2;`
     */
    public var rawText: kotlin.String
      @JvmName("getRawText")
      get() = _builder.getRawText()
      @JvmName("setRawText")
      set(value) {
        _builder.setRawText(value)
      }
    /**
     * `string raw_text = 2;`
     */
    public fun clearRawText() {
      _builder.clearRawText()
    }

    /**
     * `.bilibili.app.dynamic.v2.WordNode word = 3;`
     */
    public var word: bilibili.app.dynamic.v2.WordNode
      @JvmName("getWord")
      get() = _builder.getWord()
      @JvmName("setWord")
      set(value) {
        _builder.setWord(value)
      }
    /**
     * `.bilibili.app.dynamic.v2.WordNode word = 3;`
     */
    public fun clearWord() {
      _builder.clearWord()
    }
    /**
     * `.bilibili.app.dynamic.v2.WordNode word = 3;`
     * @return Whether the word field is set.
     */
    public fun hasWord(): kotlin.Boolean {
      return _builder.hasWord()
    }

    /**
     * `.bilibili.app.dynamic.v2.EmoteNode emote = 4;`
     */
    public var emote: bilibili.app.dynamic.v2.EmoteNode
      @JvmName("getEmote")
      get() = _builder.getEmote()
      @JvmName("setEmote")
      set(value) {
        _builder.setEmote(value)
      }
    /**
     * `.bilibili.app.dynamic.v2.EmoteNode emote = 4;`
     */
    public fun clearEmote() {
      _builder.clearEmote()
    }
    /**
     * `.bilibili.app.dynamic.v2.EmoteNode emote = 4;`
     * @return Whether the emote field is set.
     */
    public fun hasEmote(): kotlin.Boolean {
      return _builder.hasEmote()
    }

    /**
     * `.bilibili.app.dynamic.v2.LinkNode link = 5;`
     */
    public var link: bilibili.app.dynamic.v2.LinkNode
      @JvmName("getLink")
      get() = _builder.getLink()
      @JvmName("setLink")
      set(value) {
        _builder.setLink(value)
      }
    /**
     * `.bilibili.app.dynamic.v2.LinkNode link = 5;`
     */
    public fun clearLink() {
      _builder.clearLink()
    }
    /**
     * `.bilibili.app.dynamic.v2.LinkNode link = 5;`
     * @return Whether the link field is set.
     */
    public fun hasLink(): kotlin.Boolean {
      return _builder.hasLink()
    }
    public val textCase: bilibili.app.dynamic.v2.TextNode.TextCase
      @JvmName("getTextCase")
      get() = _builder.getTextCase()

    public fun clearText() {
      _builder.clearText()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v2.TextNode.copy(block: `bilibili.app.dynamic.v2`.TextNodeKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.TextNode =
  `bilibili.app.dynamic.v2`.TextNodeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v2.TextNodeOrBuilder.wordOrNull: bilibili.app.dynamic.v2.WordNode?
  get() = if (hasWord()) getWord() else null

public val bilibili.app.dynamic.v2.TextNodeOrBuilder.emoteOrNull: bilibili.app.dynamic.v2.EmoteNode?
  get() = if (hasEmote()) getEmote() else null

public val bilibili.app.dynamic.v2.TextNodeOrBuilder.linkOrNull: bilibili.app.dynamic.v2.LinkNode?
  get() = if (hasLink()) getLink() else null

