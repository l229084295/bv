// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v2/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v2;

@kotlin.jvm.JvmName("-initializeemoteNode")
public inline fun emoteNode(block: bilibili.app.dynamic.v2.EmoteNodeKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.EmoteNode =
  bilibili.app.dynamic.v2.EmoteNodeKt.Dsl._create(bilibili.app.dynamic.v2.EmoteNode.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v2.EmoteNode`
 */
public object EmoteNodeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v2.EmoteNode.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v2.EmoteNode.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v2.EmoteNode = _builder.build()

    /**
     * ```
     * ```
     *
     * `string emote_url = 2;`
     */
    public var emoteUrl: kotlin.String
      @JvmName("getEmoteUrl")
      get() = _builder.getEmoteUrl()
      @JvmName("setEmoteUrl")
      set(value) {
        _builder.setEmoteUrl(value)
      }
    /**
     * ```
     * ```
     *
     * `string emote_url = 2;`
     */
    public fun clearEmoteUrl() {
      _builder.clearEmoteUrl()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.EmoteSize emote_width = 3;`
     */
    public var emoteWidth: bilibili.app.dynamic.v2.EmoteSize
      @JvmName("getEmoteWidth")
      get() = _builder.getEmoteWidth()
      @JvmName("setEmoteWidth")
      set(value) {
        _builder.setEmoteWidth(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.EmoteSize emote_width = 3;`
     */
    public fun clearEmoteWidth() {
      _builder.clearEmoteWidth()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.EmoteSize emote_width = 3;`
     * @return Whether the emoteWidth field is set.
     */
    public fun hasEmoteWidth(): kotlin.Boolean {
      return _builder.hasEmoteWidth()
    }
    public val EmoteNodeKt.Dsl.emoteWidthOrNull: bilibili.app.dynamic.v2.EmoteSize?
      get() = _builder.emoteWidthOrNull

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.ImgInlineCfg inline_img_cfg = 5;`
     */
    public var inlineImgCfg: bilibili.app.dynamic.v2.ImgInlineCfg
      @JvmName("getInlineImgCfg")
      get() = _builder.getInlineImgCfg()
      @JvmName("setInlineImgCfg")
      set(value) {
        _builder.setInlineImgCfg(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.ImgInlineCfg inline_img_cfg = 5;`
     */
    public fun clearInlineImgCfg() {
      _builder.clearInlineImgCfg()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.ImgInlineCfg inline_img_cfg = 5;`
     * @return Whether the inlineImgCfg field is set.
     */
    public fun hasInlineImgCfg(): kotlin.Boolean {
      return _builder.hasInlineImgCfg()
    }
    public val EmoteNodeKt.Dsl.inlineImgCfgOrNull: bilibili.app.dynamic.v2.ImgInlineCfg?
      get() = _builder.inlineImgCfgOrNull

    /**
     * ```
     * ```
     *
     * `bool is_inline_img = 4;`
     */
    public var isInlineImg: kotlin.Boolean
      @JvmName("getIsInlineImg")
      get() = _builder.getIsInlineImg()
      @JvmName("setIsInlineImg")
      set(value) {
        _builder.setIsInlineImg(value)
      }
    /**
     * ```
     * ```
     *
     * `bool is_inline_img = 4;`
     */
    public fun clearIsInlineImg() {
      _builder.clearIsInlineImg()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.WordNode raw_text = 1;`
     */
    public var rawText: bilibili.app.dynamic.v2.WordNode
      @JvmName("getRawText")
      get() = _builder.getRawText()
      @JvmName("setRawText")
      set(value) {
        _builder.setRawText(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.WordNode raw_text = 1;`
     */
    public fun clearRawText() {
      _builder.clearRawText()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.WordNode raw_text = 1;`
     * @return Whether the rawText field is set.
     */
    public fun hasRawText(): kotlin.Boolean {
      return _builder.hasRawText()
    }
    public val EmoteNodeKt.Dsl.rawTextOrNull: bilibili.app.dynamic.v2.WordNode?
      get() = _builder.rawTextOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v2.EmoteNode.copy(block: `bilibili.app.dynamic.v2`.EmoteNodeKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.EmoteNode =
  `bilibili.app.dynamic.v2`.EmoteNodeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v2.EmoteNodeOrBuilder.emoteWidthOrNull: bilibili.app.dynamic.v2.EmoteSize?
  get() = if (hasEmoteWidth()) getEmoteWidth() else null

public val bilibili.app.dynamic.v2.EmoteNodeOrBuilder.inlineImgCfgOrNull: bilibili.app.dynamic.v2.ImgInlineCfg?
  get() = if (hasInlineImgCfg()) getInlineImgCfg() else null

public val bilibili.app.dynamic.v2.EmoteNodeOrBuilder.rawTextOrNull: bilibili.app.dynamic.v2.WordNode?
  get() = if (hasRawText()) getRawText() else null

