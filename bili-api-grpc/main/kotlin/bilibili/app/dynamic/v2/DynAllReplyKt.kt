// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v2/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v2;

@kotlin.jvm.JvmName("-initializedynAllReply")
public inline fun dynAllReply(block: bilibili.app.dynamic.v2.DynAllReplyKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.DynAllReply =
  bilibili.app.dynamic.v2.DynAllReplyKt.Dsl._create(bilibili.app.dynamic.v2.DynAllReply.newBuilder()).apply { block() }._build()
/**
 * ```
 * 动态综合页-响应
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v2.DynAllReply`
 */
public object DynAllReplyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v2.DynAllReply.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v2.DynAllReply.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v2.DynAllReply = _builder.build()

    /**
     * ```
     * 卡片列表
     * ```
     *
     * `.bilibili.app.dynamic.v2.DynamicList dynamic_list = 1;`
     */
    public var dynamicList: bilibili.app.dynamic.v2.DynamicList
      @JvmName("getDynamicList")
      get() = _builder.getDynamicList()
      @JvmName("setDynamicList")
      set(value) {
        _builder.setDynamicList(value)
      }
    /**
     * ```
     * 卡片列表
     * ```
     *
     * `.bilibili.app.dynamic.v2.DynamicList dynamic_list = 1;`
     */
    public fun clearDynamicList() {
      _builder.clearDynamicList()
    }
    /**
     * ```
     * 卡片列表
     * ```
     *
     * `.bilibili.app.dynamic.v2.DynamicList dynamic_list = 1;`
     * @return Whether the dynamicList field is set.
     */
    public fun hasDynamicList(): kotlin.Boolean {
      return _builder.hasDynamicList()
    }
    public val DynAllReplyKt.Dsl.dynamicListOrNull: bilibili.app.dynamic.v2.DynamicList?
      get() = _builder.dynamicListOrNull

    /**
     * ```
     * 顶部up list
     * ```
     *
     * `.bilibili.app.dynamic.v2.CardVideoUpList up_list = 2;`
     */
    public var upList: bilibili.app.dynamic.v2.CardVideoUpList
      @JvmName("getUpList")
      get() = _builder.getUpList()
      @JvmName("setUpList")
      set(value) {
        _builder.setUpList(value)
      }
    /**
     * ```
     * 顶部up list
     * ```
     *
     * `.bilibili.app.dynamic.v2.CardVideoUpList up_list = 2;`
     */
    public fun clearUpList() {
      _builder.clearUpList()
    }
    /**
     * ```
     * 顶部up list
     * ```
     *
     * `.bilibili.app.dynamic.v2.CardVideoUpList up_list = 2;`
     * @return Whether the upList field is set.
     */
    public fun hasUpList(): kotlin.Boolean {
      return _builder.hasUpList()
    }
    public val DynAllReplyKt.Dsl.upListOrNull: bilibili.app.dynamic.v2.CardVideoUpList?
      get() = _builder.upListOrNull

    /**
     * ```
     * 话题广场
     * ```
     *
     * `.bilibili.app.dynamic.v2.TopicList topic_list = 3;`
     */
    public var topicList: bilibili.app.dynamic.v2.TopicList
      @JvmName("getTopicList")
      get() = _builder.getTopicList()
      @JvmName("setTopicList")
      set(value) {
        _builder.setTopicList(value)
      }
    /**
     * ```
     * 话题广场
     * ```
     *
     * `.bilibili.app.dynamic.v2.TopicList topic_list = 3;`
     */
    public fun clearTopicList() {
      _builder.clearTopicList()
    }
    /**
     * ```
     * 话题广场
     * ```
     *
     * `.bilibili.app.dynamic.v2.TopicList topic_list = 3;`
     * @return Whether the topicList field is set.
     */
    public fun hasTopicList(): kotlin.Boolean {
      return _builder.hasTopicList()
    }
    public val DynAllReplyKt.Dsl.topicListOrNull: bilibili.app.dynamic.v2.TopicList?
      get() = _builder.topicListOrNull

    /**
     * ```
     * 无关注推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.Unfollow unfollow = 4;`
     */
    public var unfollow: bilibili.app.dynamic.v2.Unfollow
      @JvmName("getUnfollow")
      get() = _builder.getUnfollow()
      @JvmName("setUnfollow")
      set(value) {
        _builder.setUnfollow(value)
      }
    /**
     * ```
     * 无关注推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.Unfollow unfollow = 4;`
     */
    public fun clearUnfollow() {
      _builder.clearUnfollow()
    }
    /**
     * ```
     * 无关注推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.Unfollow unfollow = 4;`
     * @return Whether the unfollow field is set.
     */
    public fun hasUnfollow(): kotlin.Boolean {
      return _builder.hasUnfollow()
    }
    public val DynAllReplyKt.Dsl.unfollowOrNull: bilibili.app.dynamic.v2.Unfollow?
      get() = _builder.unfollowOrNull

    /**
     * ```
     * 分区UP推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.DynRegionRcmd region_rcmd = 5;`
     */
    public var regionRcmd: bilibili.app.dynamic.v2.DynRegionRcmd
      @JvmName("getRegionRcmd")
      get() = _builder.getRegionRcmd()
      @JvmName("setRegionRcmd")
      set(value) {
        _builder.setRegionRcmd(value)
      }
    /**
     * ```
     * 分区UP推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.DynRegionRcmd region_rcmd = 5;`
     */
    public fun clearRegionRcmd() {
      _builder.clearRegionRcmd()
    }
    /**
     * ```
     * 分区UP推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.DynRegionRcmd region_rcmd = 5;`
     * @return Whether the regionRcmd field is set.
     */
    public fun hasRegionRcmd(): kotlin.Boolean {
      return _builder.hasRegionRcmd()
    }
    public val DynAllReplyKt.Dsl.regionRcmdOrNull: bilibili.app.dynamic.v2.DynRegionRcmd?
      get() = _builder.regionRcmdOrNull

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.Config config = 6;`
     */
    public var config: bilibili.app.dynamic.v2.Config
      @JvmName("getConfig")
      get() = _builder.getConfig()
      @JvmName("setConfig")
      set(value) {
        _builder.setConfig(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.Config config = 6;`
     */
    public fun clearConfig() {
      _builder.clearConfig()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.Config config = 6;`
     * @return Whether the config field is set.
     */
    public fun hasConfig(): kotlin.Boolean {
      return _builder.hasConfig()
    }
    public val DynAllReplyKt.Dsl.configOrNull: bilibili.app.dynamic.v2.Config?
      get() = _builder.configOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v2.DynAllReply.copy(block: `bilibili.app.dynamic.v2`.DynAllReplyKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.DynAllReply =
  `bilibili.app.dynamic.v2`.DynAllReplyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v2.DynAllReplyOrBuilder.dynamicListOrNull: bilibili.app.dynamic.v2.DynamicList?
  get() = if (hasDynamicList()) getDynamicList() else null

public val bilibili.app.dynamic.v2.DynAllReplyOrBuilder.upListOrNull: bilibili.app.dynamic.v2.CardVideoUpList?
  get() = if (hasUpList()) getUpList() else null

public val bilibili.app.dynamic.v2.DynAllReplyOrBuilder.topicListOrNull: bilibili.app.dynamic.v2.TopicList?
  get() = if (hasTopicList()) getTopicList() else null

public val bilibili.app.dynamic.v2.DynAllReplyOrBuilder.unfollowOrNull: bilibili.app.dynamic.v2.Unfollow?
  get() = if (hasUnfollow()) getUnfollow() else null

public val bilibili.app.dynamic.v2.DynAllReplyOrBuilder.regionRcmdOrNull: bilibili.app.dynamic.v2.DynRegionRcmd?
  get() = if (hasRegionRcmd()) getRegionRcmd() else null

public val bilibili.app.dynamic.v2.DynAllReplyOrBuilder.configOrNull: bilibili.app.dynamic.v2.Config?
  get() = if (hasConfig()) getConfig() else null

