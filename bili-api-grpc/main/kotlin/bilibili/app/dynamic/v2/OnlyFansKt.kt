// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v2/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v2;

@kotlin.jvm.JvmName("-initializeonlyFans")
public inline fun onlyFans(block: bilibili.app.dynamic.v2.OnlyFansKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.OnlyFans =
  bilibili.app.dynamic.v2.OnlyFansKt.Dsl._create(bilibili.app.dynamic.v2.OnlyFans.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v2.OnlyFans`
 */
public object OnlyFansKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v2.OnlyFans.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v2.OnlyFans.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v2.OnlyFans = _builder.build()

    /**
     * ```
     * ```
     *
     * `bool is_only_fans = 1;`
     */
    public var isOnlyFans: kotlin.Boolean
      @JvmName("getIsOnlyFans")
      get() = _builder.getIsOnlyFans()
      @JvmName("setIsOnlyFans")
      set(value) {
        _builder.setIsOnlyFans(value)
      }
    /**
     * ```
     * ```
     *
     * `bool is_only_fans = 1;`
     */
    public fun clearIsOnlyFans() {
      _builder.clearIsOnlyFans()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.IconBadge badge = 2;`
     */
    public var badge: bilibili.app.dynamic.v2.IconBadge
      @JvmName("getBadge")
      get() = _builder.getBadge()
      @JvmName("setBadge")
      set(value) {
        _builder.setBadge(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.IconBadge badge = 2;`
     */
    public fun clearBadge() {
      _builder.clearBadge()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.IconBadge badge = 2;`
     * @return Whether the badge field is set.
     */
    public fun hasBadge(): kotlin.Boolean {
      return _builder.hasBadge()
    }
    public val OnlyFansKt.Dsl.badgeOrNull: bilibili.app.dynamic.v2.IconBadge?
      get() = _builder.badgeOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v2.OnlyFans.copy(block: `bilibili.app.dynamic.v2`.OnlyFansKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.OnlyFans =
  `bilibili.app.dynamic.v2`.OnlyFansKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v2.OnlyFansOrBuilder.badgeOrNull: bilibili.app.dynamic.v2.IconBadge?
  get() = if (hasBadge()) getBadge() else null

