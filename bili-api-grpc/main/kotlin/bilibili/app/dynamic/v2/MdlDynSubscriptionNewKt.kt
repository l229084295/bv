// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v2/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v2;

@kotlin.jvm.JvmName("-initializemdlDynSubscriptionNew")
public inline fun mdlDynSubscriptionNew(block: bilibili.app.dynamic.v2.MdlDynSubscriptionNewKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.MdlDynSubscriptionNew =
  bilibili.app.dynamic.v2.MdlDynSubscriptionNewKt.Dsl._create(bilibili.app.dynamic.v2.MdlDynSubscriptionNew.newBuilder()).apply { block() }._build()
/**
 * ```
 * 动态新附加卡
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v2.MdlDynSubscriptionNew`
 */
public object MdlDynSubscriptionNewKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v2.MdlDynSubscriptionNew.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v2.MdlDynSubscriptionNew.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v2.MdlDynSubscriptionNew = _builder.build()

    /**
     * ```
     * 样式类型
     * ```
     *
     * `.bilibili.app.dynamic.v2.MdlDynSubscriptionNewStyle style = 1;`
     */
    public var style: bilibili.app.dynamic.v2.MdlDynSubscriptionNewStyle
      @JvmName("getStyle")
      get() = _builder.getStyle()
      @JvmName("setStyle")
      set(value) {
        _builder.setStyle(value)
      }
    public var styleValue: kotlin.Int
      @JvmName("getStyleValue")
      get() = _builder.getStyleValue()
      @JvmName("setStyleValue")
      set(value) {
        _builder.setStyleValue(value)
      }
    /**
     * ```
     * 样式类型
     * ```
     *
     * `.bilibili.app.dynamic.v2.MdlDynSubscriptionNewStyle style = 1;`
     */
    public fun clearStyle() {
      _builder.clearStyle()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.MdlDynSubscription dyn_subscription = 2;`
     */
    public var dynSubscription: bilibili.app.dynamic.v2.MdlDynSubscription
      @JvmName("getDynSubscription")
      get() = _builder.getDynSubscription()
      @JvmName("setDynSubscription")
      set(value) {
        _builder.setDynSubscription(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.MdlDynSubscription dyn_subscription = 2;`
     */
    public fun clearDynSubscription() {
      _builder.clearDynSubscription()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.MdlDynSubscription dyn_subscription = 2;`
     * @return Whether the dynSubscription field is set.
     */
    public fun hasDynSubscription(): kotlin.Boolean {
      return _builder.hasDynSubscription()
    }

    /**
     * ```
     * 直播推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.MdlDynLiveRcmd dyn_live_rcmd = 3;`
     */
    public var dynLiveRcmd: bilibili.app.dynamic.v2.MdlDynLiveRcmd
      @JvmName("getDynLiveRcmd")
      get() = _builder.getDynLiveRcmd()
      @JvmName("setDynLiveRcmd")
      set(value) {
        _builder.setDynLiveRcmd(value)
      }
    /**
     * ```
     * 直播推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.MdlDynLiveRcmd dyn_live_rcmd = 3;`
     */
    public fun clearDynLiveRcmd() {
      _builder.clearDynLiveRcmd()
    }
    /**
     * ```
     * 直播推荐
     * ```
     *
     * `.bilibili.app.dynamic.v2.MdlDynLiveRcmd dyn_live_rcmd = 3;`
     * @return Whether the dynLiveRcmd field is set.
     */
    public fun hasDynLiveRcmd(): kotlin.Boolean {
      return _builder.hasDynLiveRcmd()
    }
    public val itemCase: bilibili.app.dynamic.v2.MdlDynSubscriptionNew.ItemCase
      @JvmName("getItemCase")
      get() = _builder.getItemCase()

    public fun clearItem() {
      _builder.clearItem()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v2.MdlDynSubscriptionNew.copy(block: `bilibili.app.dynamic.v2`.MdlDynSubscriptionNewKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.MdlDynSubscriptionNew =
  `bilibili.app.dynamic.v2`.MdlDynSubscriptionNewKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v2.MdlDynSubscriptionNewOrBuilder.dynSubscriptionOrNull: bilibili.app.dynamic.v2.MdlDynSubscription?
  get() = if (hasDynSubscription()) getDynSubscription() else null

public val bilibili.app.dynamic.v2.MdlDynSubscriptionNewOrBuilder.dynLiveRcmdOrNull: bilibili.app.dynamic.v2.MdlDynLiveRcmd?
  get() = if (hasDynLiveRcmd()) getDynLiveRcmd() else null

