// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v2/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v2;

@kotlin.jvm.JvmName("-initializeshareChannel")
public inline fun shareChannel(block: bilibili.app.dynamic.v2.ShareChannelKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.ShareChannel =
  bilibili.app.dynamic.v2.ShareChannelKt.Dsl._create(bilibili.app.dynamic.v2.ShareChannel.newBuilder()).apply { block() }._build()
/**
 * ```
 * 分享渠道组件
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v2.ShareChannel`
 */
public object ShareChannelKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v2.ShareChannel.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v2.ShareChannel.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v2.ShareChannel = _builder.build()

    /**
     * ```
     * 分享名称
     * ```
     *
     * `string name = 1;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * ```
     * 分享名称
     * ```
     *
     * `string name = 1;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * 分享按钮图片
     * ```
     *
     * `string image = 2;`
     */
    public var image: kotlin.String
      @JvmName("getImage")
      get() = _builder.getImage()
      @JvmName("setImage")
      set(value) {
        _builder.setImage(value)
      }
    /**
     * ```
     * 分享按钮图片
     * ```
     *
     * `string image = 2;`
     */
    public fun clearImage() {
      _builder.clearImage()
    }

    /**
     * ```
     * 分享渠道
     * ```
     *
     * `string channel = 3;`
     */
    public var channel: kotlin.String
      @JvmName("getChannel")
      get() = _builder.getChannel()
      @JvmName("setChannel")
      set(value) {
        _builder.setChannel(value)
      }
    /**
     * ```
     * 分享渠道
     * ```
     *
     * `string channel = 3;`
     */
    public fun clearChannel() {
      _builder.clearChannel()
    }

    /**
     * ```
     * 预约卡分享图信息，仅分享有预约信息的动态时存在
     * ```
     *
     * `.bilibili.app.dynamic.v2.ShareReserve reserve = 4;`
     */
    public var reserve: bilibili.app.dynamic.v2.ShareReserve
      @JvmName("getReserve")
      get() = _builder.getReserve()
      @JvmName("setReserve")
      set(value) {
        _builder.setReserve(value)
      }
    /**
     * ```
     * 预约卡分享图信息，仅分享有预约信息的动态时存在
     * ```
     *
     * `.bilibili.app.dynamic.v2.ShareReserve reserve = 4;`
     */
    public fun clearReserve() {
      _builder.clearReserve()
    }
    /**
     * ```
     * 预约卡分享图信息，仅分享有预约信息的动态时存在
     * ```
     *
     * `.bilibili.app.dynamic.v2.ShareReserve reserve = 4;`
     * @return Whether the reserve field is set.
     */
    public fun hasReserve(): kotlin.Boolean {
      return _builder.hasReserve()
    }
    public val ShareChannelKt.Dsl.reserveOrNull: bilibili.app.dynamic.v2.ShareReserve?
      get() = _builder.reserveOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v2.ShareChannel.copy(block: `bilibili.app.dynamic.v2`.ShareChannelKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.ShareChannel =
  `bilibili.app.dynamic.v2`.ShareChannelKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v2.ShareChannelOrBuilder.reserveOrNull: bilibili.app.dynamic.v2.ShareReserve?
  get() = if (hasReserve()) getReserve() else null

