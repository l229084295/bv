// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v2/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v2;

@kotlin.jvm.JvmName("-initializewordNode")
public inline fun wordNode(block: bilibili.app.dynamic.v2.WordNodeKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.WordNode =
  bilibili.app.dynamic.v2.WordNodeKt.Dsl._create(bilibili.app.dynamic.v2.WordNode.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v2.WordNode`
 */
public object WordNodeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v2.WordNode.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v2.WordNode.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v2.WordNode = _builder.build()

    /**
     * ```
     * ```
     *
     * `string words = 1;`
     */
    public var words: kotlin.String
      @JvmName("getWords")
      get() = _builder.getWords()
      @JvmName("setWords")
      set(value) {
        _builder.setWords(value)
      }
    /**
     * ```
     * ```
     *
     * `string words = 1;`
     */
    public fun clearWords() {
      _builder.clearWords()
    }

    /**
     * ```
     * ```
     *
     * `double font_size = 2;`
     */
    public var fontSize: kotlin.Double
      @JvmName("getFontSize")
      get() = _builder.getFontSize()
      @JvmName("setFontSize")
      set(value) {
        _builder.setFontSize(value)
      }
    /**
     * ```
     * ```
     *
     * `double font_size = 2;`
     */
    public fun clearFontSize() {
      _builder.clearFontSize()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.Colors color = 3;`
     */
    public var color: bilibili.app.dynamic.v2.Colors
      @JvmName("getColor")
      get() = _builder.getColor()
      @JvmName("setColor")
      set(value) {
        _builder.setColor(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.Colors color = 3;`
     */
    public fun clearColor() {
      _builder.clearColor()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.Colors color = 3;`
     * @return Whether the color field is set.
     */
    public fun hasColor(): kotlin.Boolean {
      return _builder.hasColor()
    }
    public val WordNodeKt.Dsl.colorOrNull: bilibili.app.dynamic.v2.Colors?
      get() = _builder.colorOrNull

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.WordNode.WordNodeStyle style = 4;`
     */
    public var style: bilibili.app.dynamic.v2.WordNode.WordNodeStyle
      @JvmName("getStyle")
      get() = _builder.getStyle()
      @JvmName("setStyle")
      set(value) {
        _builder.setStyle(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.WordNode.WordNodeStyle style = 4;`
     */
    public fun clearStyle() {
      _builder.clearStyle()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v2.WordNode.WordNodeStyle style = 4;`
     * @return Whether the style field is set.
     */
    public fun hasStyle(): kotlin.Boolean {
      return _builder.hasStyle()
    }
    public val WordNodeKt.Dsl.styleOrNull: bilibili.app.dynamic.v2.WordNode.WordNodeStyle?
      get() = _builder.styleOrNull
  }
  @kotlin.jvm.JvmName("-initializewordNodeStyle")
  public inline fun wordNodeStyle(block: bilibili.app.dynamic.v2.WordNodeKt.WordNodeStyleKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.WordNode.WordNodeStyle =
    bilibili.app.dynamic.v2.WordNodeKt.WordNodeStyleKt.Dsl._create(bilibili.app.dynamic.v2.WordNode.WordNodeStyle.newBuilder()).apply { block() }._build()
  /**
   * ```
   * ```
   *
   * Protobuf type `bilibili.app.dynamic.v2.WordNode.WordNodeStyle`
   */
  public object WordNodeStyleKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: bilibili.app.dynamic.v2.WordNode.WordNodeStyle.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: bilibili.app.dynamic.v2.WordNode.WordNodeStyle.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): bilibili.app.dynamic.v2.WordNode.WordNodeStyle = _builder.build()

      /**
       * ```
       * ```
       *
       * `bool bold = 1;`
       */
      public var bold: kotlin.Boolean
        @JvmName("getBold")
        get() = _builder.getBold()
        @JvmName("setBold")
        set(value) {
          _builder.setBold(value)
        }
      /**
       * ```
       * ```
       *
       * `bool bold = 1;`
       */
      public fun clearBold() {
        _builder.clearBold()
      }

      /**
       * ```
       * ```
       *
       * `bool italic = 2;`
       */
      public var italic: kotlin.Boolean
        @JvmName("getItalic")
        get() = _builder.getItalic()
        @JvmName("setItalic")
        set(value) {
          _builder.setItalic(value)
        }
      /**
       * ```
       * ```
       *
       * `bool italic = 2;`
       */
      public fun clearItalic() {
        _builder.clearItalic()
      }

      /**
       * ```
       * ```
       *
       * `bool strikethrough = 3;`
       */
      public var strikethrough: kotlin.Boolean
        @JvmName("getStrikethrough")
        get() = _builder.getStrikethrough()
        @JvmName("setStrikethrough")
        set(value) {
          _builder.setStrikethrough(value)
        }
      /**
       * ```
       * ```
       *
       * `bool strikethrough = 3;`
       */
      public fun clearStrikethrough() {
        _builder.clearStrikethrough()
      }

      /**
       * ```
       * ```
       *
       * `bool underline = 4;`
       */
      public var underline: kotlin.Boolean
        @JvmName("getUnderline")
        get() = _builder.getUnderline()
        @JvmName("setUnderline")
        set(value) {
          _builder.setUnderline(value)
        }
      /**
       * ```
       * ```
       *
       * `bool underline = 4;`
       */
      public fun clearUnderline() {
        _builder.clearUnderline()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v2.WordNode.copy(block: `bilibili.app.dynamic.v2`.WordNodeKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.WordNode =
  `bilibili.app.dynamic.v2`.WordNodeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v2.WordNode.WordNodeStyle.copy(block: `bilibili.app.dynamic.v2`.WordNodeKt.WordNodeStyleKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v2.WordNode.WordNodeStyle =
  `bilibili.app.dynamic.v2`.WordNodeKt.WordNodeStyleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v2.WordNodeOrBuilder.colorOrNull: bilibili.app.dynamic.v2.Colors?
  get() = if (hasColor()) getColor() else null

public val bilibili.app.dynamic.v2.WordNodeOrBuilder.styleOrNull: bilibili.app.dynamic.v2.WordNode.WordNodeStyle?
  get() = if (hasStyle()) getStyle() else null

