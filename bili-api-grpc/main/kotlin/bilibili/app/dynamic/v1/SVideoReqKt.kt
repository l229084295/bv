// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v1/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v1;

@kotlin.jvm.JvmName("-initializesVideoReq")
public inline fun sVideoReq(block: bilibili.app.dynamic.v1.SVideoReqKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v1.SVideoReq =
  bilibili.app.dynamic.v1.SVideoReqKt.Dsl._create(bilibili.app.dynamic.v1.SVideoReq.newBuilder()).apply { block() }._build()
/**
 * ```
 * 小视频连播页-请求
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v1.SVideoReq`
 */
public object SVideoReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v1.SVideoReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v1.SVideoReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v1.SVideoReq = _builder.build()

    /**
     * ```
     * 当前素材的id
     * ```
     *
     * `int64 oid = 1;`
     */
    public var oid: kotlin.Long
      @JvmName("getOid")
      get() = _builder.getOid()
      @JvmName("setOid")
      set(value) {
        _builder.setOid(value)
      }
    /**
     * ```
     * 当前素材的id
     * ```
     *
     * `int64 oid = 1;`
     */
    public fun clearOid() {
      _builder.clearOid()
    }

    /**
     * ```
     * 当前素材类型
     * 1:动态(如果有oid则必传) 2:热门分类 3:热点聚合
     * ```
     *
     * `.bilibili.app.dynamic.v1.SVideoType type = 2;`
     */
    public var type: bilibili.app.dynamic.v1.SVideoType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    public var typeValue: kotlin.Int
      @JvmName("getTypeValue")
      get() = _builder.getTypeValue()
      @JvmName("setTypeValue")
      set(value) {
        _builder.setTypeValue(value)
      }
    /**
     * ```
     * 当前素材类型
     * 1:动态(如果有oid则必传) 2:热门分类 3:热点聚合
     * ```
     *
     * `.bilibili.app.dynamic.v1.SVideoType type = 2;`
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * ```
     * 翻页offset
     * ```
     *
     * `string offset = 3;`
     */
    public var offset: kotlin.String
      @JvmName("getOffset")
      get() = _builder.getOffset()
      @JvmName("setOffset")
      set(value) {
        _builder.setOffset(value)
      }
    /**
     * ```
     * 翻页offset
     * ```
     *
     * `string offset = 3;`
     */
    public fun clearOffset() {
      _builder.clearOffset()
    }

    /**
     * ```
     * 清晰度(旧版)
     * ```
     *
     * `int32 qn = 4;`
     */
    public var qn: kotlin.Int
      @JvmName("getQn")
      get() = _builder.getQn()
      @JvmName("setQn")
      set(value) {
        _builder.setQn(value)
      }
    /**
     * ```
     * 清晰度(旧版)
     * ```
     *
     * `int32 qn = 4;`
     */
    public fun clearQn() {
      _builder.clearQn()
    }

    /**
     * ```
     * 流版本(旧版)
     * ```
     *
     * `int32 fnver = 5;`
     */
    public var fnver: kotlin.Int
      @JvmName("getFnver")
      get() = _builder.getFnver()
      @JvmName("setFnver")
      set(value) {
        _builder.setFnver(value)
      }
    /**
     * ```
     * 流版本(旧版)
     * ```
     *
     * `int32 fnver = 5;`
     */
    public fun clearFnver() {
      _builder.clearFnver()
    }

    /**
     * ```
     * 流类型(旧版)
     * ```
     *
     * `int32 fnval = 6;`
     */
    public var fnval: kotlin.Int
      @JvmName("getFnval")
      get() = _builder.getFnval()
      @JvmName("setFnval")
      set(value) {
        _builder.setFnval(value)
      }
    /**
     * ```
     * 流类型(旧版)
     * ```
     *
     * `int32 fnval = 6;`
     */
    public fun clearFnval() {
      _builder.clearFnval()
    }

    /**
     * ```
     * 是否强制使用域名(旧版)
     * ```
     *
     * `int32 force_host = 7;`
     */
    public var forceHost: kotlin.Int
      @JvmName("getForceHost")
      get() = _builder.getForceHost()
      @JvmName("setForceHost")
      set(value) {
        _builder.setForceHost(value)
      }
    /**
     * ```
     * 是否强制使用域名(旧版)
     * ```
     *
     * `int32 force_host = 7;`
     */
    public fun clearForceHost() {
      _builder.clearForceHost()
    }

    /**
     * ```
     * 是否4k(旧版)
     * ```
     *
     * `int32 fourk = 8;`
     */
    public var fourk: kotlin.Int
      @JvmName("getFourk")
      get() = _builder.getFourk()
      @JvmName("setFourk")
      set(value) {
        _builder.setFourk(value)
      }
    /**
     * ```
     * 是否4k(旧版)
     * ```
     *
     * `int32 fourk = 8;`
     */
    public fun clearFourk() {
      _builder.clearFourk()
    }

    /**
     * ```
     * 当前页面spm
     * ```
     *
     * `string spmid = 9;`
     */
    public var spmid: kotlin.String
      @JvmName("getSpmid")
      get() = _builder.getSpmid()
      @JvmName("setSpmid")
      set(value) {
        _builder.setSpmid(value)
      }
    /**
     * ```
     * 当前页面spm
     * ```
     *
     * `string spmid = 9;`
     */
    public fun clearSpmid() {
      _builder.clearSpmid()
    }

    /**
     * ```
     * 上级页面spm
     * ```
     *
     * `string from_spmid = 10;`
     */
    public var fromSpmid: kotlin.String
      @JvmName("getFromSpmid")
      get() = _builder.getFromSpmid()
      @JvmName("setFromSpmid")
      set(value) {
        _builder.setFromSpmid(value)
      }
    /**
     * ```
     * 上级页面spm
     * ```
     *
     * `string from_spmid = 10;`
     */
    public fun clearFromSpmid() {
      _builder.clearFromSpmid()
    }

    /**
     * ```
     * 秒开参数
     * ```
     *
     * `.bilibili.app.dynamic.v1.PlayerPreloadParams player_preload = 11;`
     */
    public var playerPreload: bilibili.app.dynamic.v1.PlayerPreloadParams
      @JvmName("getPlayerPreload")
      get() = _builder.getPlayerPreload()
      @JvmName("setPlayerPreload")
      set(value) {
        _builder.setPlayerPreload(value)
      }
    /**
     * ```
     * 秒开参数
     * ```
     *
     * `.bilibili.app.dynamic.v1.PlayerPreloadParams player_preload = 11;`
     */
    public fun clearPlayerPreload() {
      _builder.clearPlayerPreload()
    }
    /**
     * ```
     * 秒开参数
     * ```
     *
     * `.bilibili.app.dynamic.v1.PlayerPreloadParams player_preload = 11;`
     * @return Whether the playerPreload field is set.
     */
    public fun hasPlayerPreload(): kotlin.Boolean {
      return _builder.hasPlayerPreload()
    }
    public val SVideoReqKt.Dsl.playerPreloadOrNull: bilibili.app.dynamic.v1.PlayerPreloadParams?
      get() = _builder.playerPreloadOrNull

    /**
     * ```
     * 热门进入联播页的锚点aid
     * ```
     *
     * `int64 focus_aid = 12;`
     */
    public var focusAid: kotlin.Long
      @JvmName("getFocusAid")
      get() = _builder.getFocusAid()
      @JvmName("setFocusAid")
      set(value) {
        _builder.setFocusAid(value)
      }
    /**
     * ```
     * 热门进入联播页的锚点aid
     * ```
     *
     * `int64 focus_aid = 12;`
     */
    public fun clearFocusAid() {
      _builder.clearFocusAid()
    }

    /**
     * ```
     * 秒开参数
     * ```
     *
     * `.bilibili.app.archive.middleware.v1.PlayerArgs player_args = 13;`
     */
    public var playerArgs: bilibili.app.archive.middleware.v1.PlayerArgs
      @JvmName("getPlayerArgs")
      get() = _builder.getPlayerArgs()
      @JvmName("setPlayerArgs")
      set(value) {
        _builder.setPlayerArgs(value)
      }
    /**
     * ```
     * 秒开参数
     * ```
     *
     * `.bilibili.app.archive.middleware.v1.PlayerArgs player_args = 13;`
     */
    public fun clearPlayerArgs() {
      _builder.clearPlayerArgs()
    }
    /**
     * ```
     * 秒开参数
     * ```
     *
     * `.bilibili.app.archive.middleware.v1.PlayerArgs player_args = 13;`
     * @return Whether the playerArgs field is set.
     */
    public fun hasPlayerArgs(): kotlin.Boolean {
      return _builder.hasPlayerArgs()
    }
    public val SVideoReqKt.Dsl.playerArgsOrNull: bilibili.app.archive.middleware.v1.PlayerArgs?
      get() = _builder.playerArgsOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v1.SVideoReq.copy(block: `bilibili.app.dynamic.v1`.SVideoReqKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v1.SVideoReq =
  `bilibili.app.dynamic.v1`.SVideoReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v1.SVideoReqOrBuilder.playerPreloadOrNull: bilibili.app.dynamic.v1.PlayerPreloadParams?
  get() = if (hasPlayerPreload()) getPlayerPreload() else null

public val bilibili.app.dynamic.v1.SVideoReqOrBuilder.playerArgsOrNull: bilibili.app.archive.middleware.v1.PlayerArgs?
  get() = if (hasPlayerArgs()) getPlayerArgs() else null

