// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v1/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v1;

@kotlin.jvm.JvmName("-initializeexp")
public inline fun exp(block: bilibili.app.dynamic.v1.ExpKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v1.Exp =
  bilibili.app.dynamic.v1.ExpKt.Dsl._create(bilibili.app.dynamic.v1.Exp.newBuilder()).apply { block() }._build()
/**
 * ```
 * 魔镜实验配置项
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v1.Exp`
 */
public object ExpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v1.Exp.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v1.Exp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v1.Exp = _builder.build()

    /**
     * ```
     * 实验名
     * ```
     *
     * `string exp_name = 1;`
     */
    public var expName: kotlin.String
      @JvmName("getExpName")
      get() = _builder.getExpName()
      @JvmName("setExpName")
      set(value) {
        _builder.setExpName(value)
      }
    /**
     * ```
     * 实验名
     * ```
     *
     * `string exp_name = 1;`
     */
    public fun clearExpName() {
      _builder.clearExpName()
    }

    /**
     * ```
     * 实验组
     * ```
     *
     * `string exp_group = 2;`
     */
    public var expGroup: kotlin.String
      @JvmName("getExpGroup")
      get() = _builder.getExpGroup()
      @JvmName("setExpGroup")
      set(value) {
        _builder.setExpGroup(value)
      }
    /**
     * ```
     * 实验组
     * ```
     *
     * `string exp_group = 2;`
     */
    public fun clearExpGroup() {
      _builder.clearExpGroup()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v1.Exp.copy(block: `bilibili.app.dynamic.v1`.ExpKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v1.Exp =
  `bilibili.app.dynamic.v1`.ExpKt.Dsl._create(this.toBuilder()).apply { block() }._build()

