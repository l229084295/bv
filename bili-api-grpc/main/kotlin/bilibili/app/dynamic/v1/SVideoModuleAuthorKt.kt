// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v1/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v1;

@kotlin.jvm.JvmName("-initializesVideoModuleAuthor")
public inline fun sVideoModuleAuthor(block: bilibili.app.dynamic.v1.SVideoModuleAuthorKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v1.SVideoModuleAuthor =
  bilibili.app.dynamic.v1.SVideoModuleAuthorKt.Dsl._create(bilibili.app.dynamic.v1.SVideoModuleAuthor.newBuilder()).apply { block() }._build()
/**
 * ```
 * 作者信息模块
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v1.SVideoModuleAuthor`
 */
public object SVideoModuleAuthorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v1.SVideoModuleAuthor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v1.SVideoModuleAuthor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v1.SVideoModuleAuthor = _builder.build()

    /**
     * ```
     * 用户mid
     * ```
     *
     * `int64 mid = 1;`
     */
    public var mid: kotlin.Long
      @JvmName("getMid")
      get() = _builder.getMid()
      @JvmName("setMid")
      set(value) {
        _builder.setMid(value)
      }
    /**
     * ```
     * 用户mid
     * ```
     *
     * `int64 mid = 1;`
     */
    public fun clearMid() {
      _builder.clearMid()
    }

    /**
     * ```
     * 用户昵称
     * ```
     *
     * `string name = 2;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * ```
     * 用户昵称
     * ```
     *
     * `string name = 2;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * 用户头像
     * ```
     *
     * `string face = 3;`
     */
    public var face: kotlin.String
      @JvmName("getFace")
      get() = _builder.getFace()
      @JvmName("setFace")
      set(value) {
        _builder.setFace(value)
      }
    /**
     * ```
     * 用户头像
     * ```
     *
     * `string face = 3;`
     */
    public fun clearFace() {
      _builder.clearFace()
    }

    /**
     * ```
     * 发布描述
     * ```
     *
     * `string pub_desc = 4;`
     */
    public var pubDesc: kotlin.String
      @JvmName("getPubDesc")
      get() = _builder.getPubDesc()
      @JvmName("setPubDesc")
      set(value) {
        _builder.setPubDesc(value)
      }
    /**
     * ```
     * 发布描述
     * ```
     *
     * `string pub_desc = 4;`
     */
    public fun clearPubDesc() {
      _builder.clearPubDesc()
    }

    /**
     * ```
     * 是否关注up
     * 1:已关注
     * ```
     *
     * `int32 is_attention = 5;`
     */
    public var isAttention: kotlin.Int
      @JvmName("getIsAttention")
      get() = _builder.getIsAttention()
      @JvmName("setIsAttention")
      set(value) {
        _builder.setIsAttention(value)
      }
    /**
     * ```
     * 是否关注up
     * 1:已关注
     * ```
     *
     * `int32 is_attention = 5;`
     */
    public fun clearIsAttention() {
      _builder.clearIsAttention()
    }

    /**
     * ```
     * 跳转地址
     * ```
     *
     * `string uri = 6;`
     */
    public var uri: kotlin.String
      @JvmName("getUri")
      get() = _builder.getUri()
      @JvmName("setUri")
      set(value) {
        _builder.setUri(value)
      }
    /**
     * ```
     * 跳转地址
     * ```
     *
     * `string uri = 6;`
     */
    public fun clearUri() {
      _builder.clearUri()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v1.SVideoModuleAuthor.copy(block: `bilibili.app.dynamic.v1`.SVideoModuleAuthorKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v1.SVideoModuleAuthor =
  `bilibili.app.dynamic.v1`.SVideoModuleAuthorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

