// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/dynamic/v1/dynamic.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.dynamic.v1;

@kotlin.jvm.JvmName("-initializedynRedReply")
public inline fun dynRedReply(block: bilibili.app.dynamic.v1.DynRedReplyKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v1.DynRedReply =
  bilibili.app.dynamic.v1.DynRedReplyKt.Dsl._create(bilibili.app.dynamic.v1.DynRedReply.newBuilder()).apply { block() }._build()
/**
 * ```
 * 红点接口-响应
 * ```
 *
 * Protobuf type `bilibili.app.dynamic.v1.DynRedReply`
 */
public object DynRedReplyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.dynamic.v1.DynRedReply.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.dynamic.v1.DynRedReply.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.dynamic.v1.DynRedReply = _builder.build()

    /**
     * ```
     * 类型
     * count:数字红点 point:普通红点 no_point:没有红点
     * ```
     *
     * `string red_type = 1;`
     */
    public var redType: kotlin.String
      @JvmName("getRedType")
      get() = _builder.getRedType()
      @JvmName("setRedType")
      set(value) {
        _builder.setRedType(value)
      }
    /**
     * ```
     * 类型
     * count:数字红点 point:普通红点 no_point:没有红点
     * ```
     *
     * `string red_type = 1;`
     */
    public fun clearRedType() {
      _builder.clearRedType()
    }

    /**
     * ```
     * 红点具体信息
     * ```
     *
     * `.bilibili.app.dynamic.v1.DynRedItem dyn_red_item = 2;`
     */
    public var dynRedItem: bilibili.app.dynamic.v1.DynRedItem
      @JvmName("getDynRedItem")
      get() = _builder.getDynRedItem()
      @JvmName("setDynRedItem")
      set(value) {
        _builder.setDynRedItem(value)
      }
    /**
     * ```
     * 红点具体信息
     * ```
     *
     * `.bilibili.app.dynamic.v1.DynRedItem dyn_red_item = 2;`
     */
    public fun clearDynRedItem() {
      _builder.clearDynRedItem()
    }
    /**
     * ```
     * 红点具体信息
     * ```
     *
     * `.bilibili.app.dynamic.v1.DynRedItem dyn_red_item = 2;`
     * @return Whether the dynRedItem field is set.
     */
    public fun hasDynRedItem(): kotlin.Boolean {
      return _builder.hasDynRedItem()
    }
    public val DynRedReplyKt.Dsl.dynRedItemOrNull: bilibili.app.dynamic.v1.DynRedItem?
      get() = _builder.dynRedItemOrNull

    /**
     * ```
     * 默认tab 值对应tab接口下发的anchor
     * ```
     *
     * `string default_tab = 3;`
     */
    public var defaultTab: kotlin.String
      @JvmName("getDefaultTab")
      get() = _builder.getDefaultTab()
      @JvmName("setDefaultTab")
      set(value) {
        _builder.setDefaultTab(value)
      }
    /**
     * ```
     * 默认tab 值对应tab接口下发的anchor
     * ```
     *
     * `string default_tab = 3;`
     */
    public fun clearDefaultTab() {
      _builder.clearDefaultTab()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v1.DynRedStyle red_style = 4;`
     */
    public var redStyle: bilibili.app.dynamic.v1.DynRedStyle
      @JvmName("getRedStyle")
      get() = _builder.getRedStyle()
      @JvmName("setRedStyle")
      set(value) {
        _builder.setRedStyle(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v1.DynRedStyle red_style = 4;`
     */
    public fun clearRedStyle() {
      _builder.clearRedStyle()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.dynamic.v1.DynRedStyle red_style = 4;`
     * @return Whether the redStyle field is set.
     */
    public fun hasRedStyle(): kotlin.Boolean {
      return _builder.hasRedStyle()
    }
    public val DynRedReplyKt.Dsl.redStyleOrNull: bilibili.app.dynamic.v1.DynRedStyle?
      get() = _builder.redStyleOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.dynamic.v1.DynRedReply.copy(block: `bilibili.app.dynamic.v1`.DynRedReplyKt.Dsl.() -> kotlin.Unit): bilibili.app.dynamic.v1.DynRedReply =
  `bilibili.app.dynamic.v1`.DynRedReplyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.dynamic.v1.DynRedReplyOrBuilder.dynRedItemOrNull: bilibili.app.dynamic.v1.DynRedItem?
  get() = if (hasDynRedItem()) getDynRedItem() else null

public val bilibili.app.dynamic.v1.DynRedReplyOrBuilder.redStyleOrNull: bilibili.app.dynamic.v1.DynRedStyle?
  get() = if (hasRedStyle()) getRedStyle() else null

