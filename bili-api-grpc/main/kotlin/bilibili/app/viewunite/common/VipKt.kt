// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/viewunite/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.viewunite.common;

@kotlin.jvm.JvmName("-initializevip")
public inline fun vip(block: bilibili.app.viewunite.common.VipKt.Dsl.() -> kotlin.Unit): bilibili.app.viewunite.common.Vip =
  bilibili.app.viewunite.common.VipKt.Dsl._create(bilibili.app.viewunite.common.Vip.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.viewunite.common.Vip`
 */
public object VipKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.viewunite.common.Vip.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.viewunite.common.Vip.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.viewunite.common.Vip = _builder.build()

    /**
     * ```
     * ```
     *
     * `int32 type = 1;`
     */
    public var type: kotlin.Int
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 type = 1;`
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * ```
     * ```
     *
     * `int32 vip_status = 2;`
     */
    public var vipStatus: kotlin.Int
      @JvmName("getVipStatus")
      get() = _builder.getVipStatus()
      @JvmName("setVipStatus")
      set(value) {
        _builder.setVipStatus(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 vip_status = 2;`
     */
    public fun clearVipStatus() {
      _builder.clearVipStatus()
    }

    /**
     * ```
     * ```
     *
     * `int32 theme_type = 3;`
     */
    public var themeType: kotlin.Int
      @JvmName("getThemeType")
      get() = _builder.getThemeType()
      @JvmName("setThemeType")
      set(value) {
        _builder.setThemeType(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 theme_type = 3;`
     */
    public fun clearThemeType() {
      _builder.clearThemeType()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.common.VipLabel label = 4;`
     */
    public var label: bilibili.app.viewunite.common.VipLabel
      @JvmName("getLabel")
      get() = _builder.getLabel()
      @JvmName("setLabel")
      set(value) {
        _builder.setLabel(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.common.VipLabel label = 4;`
     */
    public fun clearLabel() {
      _builder.clearLabel()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.common.VipLabel label = 4;`
     * @return Whether the label field is set.
     */
    public fun hasLabel(): kotlin.Boolean {
      return _builder.hasLabel()
    }
    public val VipKt.Dsl.labelOrNull: bilibili.app.viewunite.common.VipLabel?
      get() = _builder.labelOrNull

    /**
     * ```
     * ```
     *
     * `int32 is_vip = 5;`
     */
    public var isVip: kotlin.Int
      @JvmName("getIsVip")
      get() = _builder.getIsVip()
      @JvmName("setIsVip")
      set(value) {
        _builder.setIsVip(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 is_vip = 5;`
     */
    public fun clearIsVip() {
      _builder.clearIsVip()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.viewunite.common.Vip.copy(block: `bilibili.app.viewunite.common`.VipKt.Dsl.() -> kotlin.Unit): bilibili.app.viewunite.common.Vip =
  `bilibili.app.viewunite.common`.VipKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.viewunite.common.VipOrBuilder.labelOrNull: bilibili.app.viewunite.common.VipLabel?
  get() = if (hasLabel()) getLabel() else null

