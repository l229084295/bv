// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/viewunite/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.viewunite.common;

@kotlin.jvm.JvmName("-initializebutton")
public inline fun button(block: bilibili.app.viewunite.common.ButtonKt.Dsl.() -> kotlin.Unit): bilibili.app.viewunite.common.Button =
  bilibili.app.viewunite.common.ButtonKt.Dsl._create(bilibili.app.viewunite.common.Button.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.viewunite.common.Button`
 */
public object ButtonKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.viewunite.common.Button.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.viewunite.common.Button.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.viewunite.common.Button = _builder.build()

    /**
     * ```
     * ```
     *
     * `string title = 1;`
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * ```
     * ```
     *
     * `string title = 1;`
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * ```
     * ```
     *
     * `string left_strikethrough_text = 2;`
     */
    public var leftStrikethroughText: kotlin.String
      @JvmName("getLeftStrikethroughText")
      get() = _builder.getLeftStrikethroughText()
      @JvmName("setLeftStrikethroughText")
      set(value) {
        _builder.setLeftStrikethroughText(value)
      }
    /**
     * ```
     * ```
     *
     * `string left_strikethrough_text = 2;`
     */
    public fun clearLeftStrikethroughText() {
      _builder.clearLeftStrikethroughText()
    }

    /**
     * ```
     * ```
     *
     * `string type = 3;`
     */
    public var type: kotlin.String
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * ```
     * ```
     *
     * `string type = 3;`
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * ```
     * ```
     *
     * `string link = 4;`
     */
    public var link: kotlin.String
      @JvmName("getLink")
      get() = _builder.getLink()
      @JvmName("setLink")
      set(value) {
        _builder.setLink(value)
      }
    /**
     * ```
     * ```
     *
     * `string link = 4;`
     */
    public fun clearLink() {
      _builder.clearLink()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.common.BadgeInfo badge_info = 5;`
     */
    public var badgeInfo: bilibili.app.viewunite.common.BadgeInfo
      @JvmName("getBadgeInfo")
      get() = _builder.getBadgeInfo()
      @JvmName("setBadgeInfo")
      set(value) {
        _builder.setBadgeInfo(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.common.BadgeInfo badge_info = 5;`
     */
    public fun clearBadgeInfo() {
      _builder.clearBadgeInfo()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.common.BadgeInfo badge_info = 5;`
     * @return Whether the badgeInfo field is set.
     */
    public fun hasBadgeInfo(): kotlin.Boolean {
      return _builder.hasBadgeInfo()
    }
    public val ButtonKt.Dsl.badgeInfoOrNull: bilibili.app.viewunite.common.BadgeInfo?
      get() = _builder.badgeInfoOrNull

    /**
     * ```
     * ```
     *
     * `string sub_title = 6;`
     */
    public var subTitle: kotlin.String
      @JvmName("getSubTitle")
      get() = _builder.getSubTitle()
      @JvmName("setSubTitle")
      set(value) {
        _builder.setSubTitle(value)
      }
    /**
     * ```
     * ```
     *
     * `string sub_title = 6;`
     */
    public fun clearSubTitle() {
      _builder.clearSubTitle()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.viewunite.common.Button.copy(block: `bilibili.app.viewunite.common`.ButtonKt.Dsl.() -> kotlin.Unit): bilibili.app.viewunite.common.Button =
  `bilibili.app.viewunite.common`.ButtonKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.viewunite.common.ButtonOrBuilder.badgeInfoOrNull: bilibili.app.viewunite.common.BadgeInfo?
  get() = if (hasBadgeInfo()) getBadgeInfo() else null

