// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/viewunite/v1/viewunite.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.viewunite.v1;

@kotlin.jvm.JvmName("-initializepageControl")
public inline fun pageControl(block: bilibili.app.viewunite.v1.PageControlKt.Dsl.() -> kotlin.Unit): bilibili.app.viewunite.v1.PageControl =
  bilibili.app.viewunite.v1.PageControlKt.Dsl._create(bilibili.app.viewunite.v1.PageControl.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.viewunite.v1.PageControl`
 */
public object PageControlKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.viewunite.v1.PageControl.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.viewunite.v1.PageControl.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.viewunite.v1.PageControl = _builder.build()

    /**
     * `.bilibili.app.viewunite.v1.Control toast_show = 1;`
     */
    public var toastShow: bilibili.app.viewunite.v1.Control
      @JvmName("getToastShow")
      get() = _builder.getToastShow()
      @JvmName("setToastShow")
      set(value) {
        _builder.setToastShow(value)
      }
    /**
     * `.bilibili.app.viewunite.v1.Control toast_show = 1;`
     */
    public fun clearToastShow() {
      _builder.clearToastShow()
    }
    /**
     * `.bilibili.app.viewunite.v1.Control toast_show = 1;`
     * @return Whether the toastShow field is set.
     */
    public fun hasToastShow(): kotlin.Boolean {
      return _builder.hasToastShow()
    }
    public val PageControlKt.Dsl.toastShowOrNull: bilibili.app.viewunite.v1.Control?
      get() = _builder.toastShowOrNull

    /**
     * `.bilibili.app.viewunite.v1.Control material_show = 2;`
     */
    public var materialShow: bilibili.app.viewunite.v1.Control
      @JvmName("getMaterialShow")
      get() = _builder.getMaterialShow()
      @JvmName("setMaterialShow")
      set(value) {
        _builder.setMaterialShow(value)
      }
    /**
     * `.bilibili.app.viewunite.v1.Control material_show = 2;`
     */
    public fun clearMaterialShow() {
      _builder.clearMaterialShow()
    }
    /**
     * `.bilibili.app.viewunite.v1.Control material_show = 2;`
     * @return Whether the materialShow field is set.
     */
    public fun hasMaterialShow(): kotlin.Boolean {
      return _builder.hasMaterialShow()
    }
    public val PageControlKt.Dsl.materialShowOrNull: bilibili.app.viewunite.v1.Control?
      get() = _builder.materialShowOrNull

    /**
     * `.bilibili.app.viewunite.v1.Control up_show = 3;`
     */
    public var upShow: bilibili.app.viewunite.v1.Control
      @JvmName("getUpShow")
      get() = _builder.getUpShow()
      @JvmName("setUpShow")
      set(value) {
        _builder.setUpShow(value)
      }
    /**
     * `.bilibili.app.viewunite.v1.Control up_show = 3;`
     */
    public fun clearUpShow() {
      _builder.clearUpShow()
    }
    /**
     * `.bilibili.app.viewunite.v1.Control up_show = 3;`
     * @return Whether the upShow field is set.
     */
    public fun hasUpShow(): kotlin.Boolean {
      return _builder.hasUpShow()
    }
    public val PageControlKt.Dsl.upShowOrNull: bilibili.app.viewunite.v1.Control?
      get() = _builder.upShowOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.viewunite.v1.PageControl.copy(block: `bilibili.app.viewunite.v1`.PageControlKt.Dsl.() -> kotlin.Unit): bilibili.app.viewunite.v1.PageControl =
  `bilibili.app.viewunite.v1`.PageControlKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.viewunite.v1.PageControlOrBuilder.toastShowOrNull: bilibili.app.viewunite.v1.Control?
  get() = if (hasToastShow()) getToastShow() else null

public val bilibili.app.viewunite.v1.PageControlOrBuilder.materialShowOrNull: bilibili.app.viewunite.v1.Control?
  get() = if (hasMaterialShow()) getMaterialShow() else null

public val bilibili.app.viewunite.v1.PageControlOrBuilder.upShowOrNull: bilibili.app.viewunite.v1.Control?
  get() = if (hasUpShow()) getUpShow() else null

