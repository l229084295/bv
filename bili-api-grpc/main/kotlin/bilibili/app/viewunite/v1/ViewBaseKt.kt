// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/viewunite/v1/viewunite.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.viewunite.v1;

@kotlin.jvm.JvmName("-initializeviewBase")
public inline fun viewBase(block: bilibili.app.viewunite.v1.ViewBaseKt.Dsl.() -> kotlin.Unit): bilibili.app.viewunite.v1.ViewBase =
  bilibili.app.viewunite.v1.ViewBaseKt.Dsl._create(bilibili.app.viewunite.v1.ViewBase.newBuilder()).apply { block() }._build()
/**
 * ```
 * ```
 *
 * Protobuf type `bilibili.app.viewunite.v1.ViewBase`
 */
public object ViewBaseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.viewunite.v1.ViewBase.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.viewunite.v1.ViewBase.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.viewunite.v1.ViewBase = _builder.build()

    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.UnionType union_type = 1;`
     */
    public var unionType: bilibili.app.viewunite.v1.UnionType
      @JvmName("getUnionType")
      get() = _builder.getUnionType()
      @JvmName("setUnionType")
      set(value) {
        _builder.setUnionType(value)
      }
    public var unionTypeValue: kotlin.Int
      @JvmName("getUnionTypeValue")
      get() = _builder.getUnionTypeValue()
      @JvmName("setUnionTypeValue")
      set(value) {
        _builder.setUnionTypeValue(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.UnionType union_type = 1;`
     */
    public fun clearUnionType() {
      _builder.clearUnionType()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.PageType page_type = 2;`
     */
    public var pageType: bilibili.app.viewunite.v1.PageType
      @JvmName("getPageType")
      get() = _builder.getPageType()
      @JvmName("setPageType")
      set(value) {
        _builder.setPageType(value)
      }
    public var pageTypeValue: kotlin.Int
      @JvmName("getPageTypeValue")
      get() = _builder.getPageTypeValue()
      @JvmName("setPageTypeValue")
      set(value) {
        _builder.setPageTypeValue(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.PageType page_type = 2;`
     */
    public fun clearPageType() {
      _builder.clearPageType()
    }

    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.PageControl control = 3;`
     */
    public var control: bilibili.app.viewunite.v1.PageControl
      @JvmName("getControl")
      get() = _builder.getControl()
      @JvmName("setControl")
      set(value) {
        _builder.setControl(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.PageControl control = 3;`
     */
    public fun clearControl() {
      _builder.clearControl()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.PageControl control = 3;`
     * @return Whether the control field is set.
     */
    public fun hasControl(): kotlin.Boolean {
      return _builder.hasControl()
    }
    public val ViewBaseKt.Dsl.controlOrNull: bilibili.app.viewunite.v1.PageControl?
      get() = _builder.controlOrNull

    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.ActivityResource activity_resource = 4;`
     */
    public var activityResource: bilibili.app.viewunite.v1.ActivityResource
      @JvmName("getActivityResource")
      get() = _builder.getActivityResource()
      @JvmName("setActivityResource")
      set(value) {
        _builder.setActivityResource(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.ActivityResource activity_resource = 4;`
     */
    public fun clearActivityResource() {
      _builder.clearActivityResource()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.ActivityResource activity_resource = 4;`
     * @return Whether the activityResource field is set.
     */
    public fun hasActivityResource(): kotlin.Boolean {
      return _builder.hasActivityResource()
    }
    public val ViewBaseKt.Dsl.activityResourceOrNull: bilibili.app.viewunite.v1.ActivityResource?
      get() = _builder.activityResourceOrNull

    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.Config config = 5;`
     */
    public var config: bilibili.app.viewunite.v1.Config
      @JvmName("getConfig")
      get() = _builder.getConfig()
      @JvmName("setConfig")
      set(value) {
        _builder.setConfig(value)
      }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.Config config = 5;`
     */
    public fun clearConfig() {
      _builder.clearConfig()
    }
    /**
     * ```
     * ```
     *
     * `.bilibili.app.viewunite.v1.Config config = 5;`
     * @return Whether the config field is set.
     */
    public fun hasConfig(): kotlin.Boolean {
      return _builder.hasConfig()
    }
    public val ViewBaseKt.Dsl.configOrNull: bilibili.app.viewunite.v1.Config?
      get() = _builder.configOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.viewunite.v1.ViewBase.copy(block: `bilibili.app.viewunite.v1`.ViewBaseKt.Dsl.() -> kotlin.Unit): bilibili.app.viewunite.v1.ViewBase =
  `bilibili.app.viewunite.v1`.ViewBaseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.viewunite.v1.ViewBaseOrBuilder.controlOrNull: bilibili.app.viewunite.v1.PageControl?
  get() = if (hasControl()) getControl() else null

public val bilibili.app.viewunite.v1.ViewBaseOrBuilder.activityResourceOrNull: bilibili.app.viewunite.v1.ActivityResource?
  get() = if (hasActivityResource()) getActivityResource() else null

public val bilibili.app.viewunite.v1.ViewBaseOrBuilder.configOrNull: bilibili.app.viewunite.v1.Config?
  get() = if (hasConfig()) getConfig() else null

