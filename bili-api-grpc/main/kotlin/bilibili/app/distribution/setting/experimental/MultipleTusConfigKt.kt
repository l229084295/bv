// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/app/distribution/setting/experimental.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.app.distribution.setting.experimental;

@kotlin.jvm.JvmName("-initializemultipleTusConfig")
public inline fun multipleTusConfig(block: bilibili.app.distribution.setting.experimental.MultipleTusConfigKt.Dsl.() -> kotlin.Unit): bilibili.app.distribution.setting.experimental.MultipleTusConfig =
  bilibili.app.distribution.setting.experimental.MultipleTusConfigKt.Dsl._create(bilibili.app.distribution.setting.experimental.MultipleTusConfig.newBuilder()).apply { block() }._build()
/**
 * ```
 *
 * ```
 *
 * Protobuf type `bilibili.app.distribution.setting.experimental.MultipleTusConfig`
 */
public object MultipleTusConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.app.distribution.setting.experimental.MultipleTusConfig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.app.distribution.setting.experimental.MultipleTusConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.app.distribution.setting.experimental.MultipleTusConfig = _builder.build()

    /**
     * ```
     *
     * ```
     *
     * `.bilibili.app.distribution.setting.experimental.TopLeft top_left = 1;`
     */
    public var topLeft: bilibili.app.distribution.setting.experimental.TopLeft
      @JvmName("getTopLeft")
      get() = _builder.getTopLeft()
      @JvmName("setTopLeft")
      set(value) {
        _builder.setTopLeft(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `.bilibili.app.distribution.setting.experimental.TopLeft top_left = 1;`
     */
    public fun clearTopLeft() {
      _builder.clearTopLeft()
    }
    /**
     * ```
     *
     * ```
     *
     * `.bilibili.app.distribution.setting.experimental.TopLeft top_left = 1;`
     * @return Whether the topLeft field is set.
     */
    public fun hasTopLeft(): kotlin.Boolean {
      return _builder.hasTopLeft()
    }
    public val MultipleTusConfigKt.Dsl.topLeftOrNull: bilibili.app.distribution.setting.experimental.TopLeft?
      get() = _builder.topLeftOrNull

    /**
     * ```
     *
     * ```
     *
     * `.bilibili.app.distribution.setting.experimental.DynamicSelect dynamic_select = 2;`
     */
    public var dynamicSelect: bilibili.app.distribution.setting.experimental.DynamicSelect
      @JvmName("getDynamicSelect")
      get() = _builder.getDynamicSelect()
      @JvmName("setDynamicSelect")
      set(value) {
        _builder.setDynamicSelect(value)
      }
    /**
     * ```
     *
     * ```
     *
     * `.bilibili.app.distribution.setting.experimental.DynamicSelect dynamic_select = 2;`
     */
    public fun clearDynamicSelect() {
      _builder.clearDynamicSelect()
    }
    /**
     * ```
     *
     * ```
     *
     * `.bilibili.app.distribution.setting.experimental.DynamicSelect dynamic_select = 2;`
     * @return Whether the dynamicSelect field is set.
     */
    public fun hasDynamicSelect(): kotlin.Boolean {
      return _builder.hasDynamicSelect()
    }
    public val MultipleTusConfigKt.Dsl.dynamicSelectOrNull: bilibili.app.distribution.setting.experimental.DynamicSelect?
      get() = _builder.dynamicSelectOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.app.distribution.setting.experimental.MultipleTusConfig.copy(block: `bilibili.app.distribution.setting.experimental`.MultipleTusConfigKt.Dsl.() -> kotlin.Unit): bilibili.app.distribution.setting.experimental.MultipleTusConfig =
  `bilibili.app.distribution.setting.experimental`.MultipleTusConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.app.distribution.setting.experimental.MultipleTusConfigOrBuilder.topLeftOrNull: bilibili.app.distribution.setting.experimental.TopLeft?
  get() = if (hasTopLeft()) getTopLeft() else null

public val bilibili.app.distribution.setting.experimental.MultipleTusConfigOrBuilder.dynamicSelectOrNull: bilibili.app.distribution.setting.experimental.DynamicSelect?
  get() = if (hasDynamicSelect()) getDynamicSelect() else null

