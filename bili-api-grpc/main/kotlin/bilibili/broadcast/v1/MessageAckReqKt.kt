// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/broadcast/v1/broadcast.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.broadcast.v1;

@kotlin.jvm.JvmName("-initializemessageAckReq")
public inline fun messageAckReq(block: bilibili.broadcast.v1.MessageAckReqKt.Dsl.() -> kotlin.Unit): bilibili.broadcast.v1.MessageAckReq =
  bilibili.broadcast.v1.MessageAckReqKt.Dsl._create(bilibili.broadcast.v1.MessageAckReq.newBuilder()).apply { block() }._build()
/**
 * ```
 * 消息回执
 * ```
 *
 * Protobuf type `bilibili.broadcast.v1.MessageAckReq`
 */
public object MessageAckReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.broadcast.v1.MessageAckReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.broadcast.v1.MessageAckReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.broadcast.v1.MessageAckReq = _builder.build()

    /**
     * ```
     * 消息id
     * ```
     *
     * `int64 ack_id = 1;`
     */
    public var ackId: kotlin.Long
      @JvmName("getAckId")
      get() = _builder.getAckId()
      @JvmName("setAckId")
      set(value) {
        _builder.setAckId(value)
      }
    /**
     * ```
     * 消息id
     * ```
     *
     * `int64 ack_id = 1;`
     */
    public fun clearAckId() {
      _builder.clearAckId()
    }

    /**
     * ```
     * ack来源，由业务指定用于埋点跟踪
     * ```
     *
     * `string ack_origin = 2;`
     */
    public var ackOrigin: kotlin.String
      @JvmName("getAckOrigin")
      get() = _builder.getAckOrigin()
      @JvmName("setAckOrigin")
      set(value) {
        _builder.setAckOrigin(value)
      }
    /**
     * ```
     * ack来源，由业务指定用于埋点跟踪
     * ```
     *
     * `string ack_origin = 2;`
     */
    public fun clearAckOrigin() {
      _builder.clearAckOrigin()
    }

    /**
     * ```
     * 消息对应的target_path，方便业务区分和监控统计
     * ```
     *
     * `string target_path = 3;`
     */
    public var targetPath: kotlin.String
      @JvmName("getTargetPath")
      get() = _builder.getTargetPath()
      @JvmName("setTargetPath")
      set(value) {
        _builder.setTargetPath(value)
      }
    /**
     * ```
     * 消息对应的target_path，方便业务区分和监控统计
     * ```
     *
     * `string target_path = 3;`
     */
    public fun clearTargetPath() {
      _builder.clearTargetPath()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.broadcast.v1.MessageAckReq.copy(block: `bilibili.broadcast.v1`.MessageAckReqKt.Dsl.() -> kotlin.Unit): bilibili.broadcast.v1.MessageAckReq =
  `bilibili.broadcast.v1`.MessageAckReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

