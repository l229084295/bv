// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/broadcast/v1/broadcast.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.broadcast.v1;

@kotlin.jvm.JvmName("-initializeframeOption")
public inline fun frameOption(block: bilibili.broadcast.v1.FrameOptionKt.Dsl.() -> kotlin.Unit): bilibili.broadcast.v1.FrameOption =
  bilibili.broadcast.v1.FrameOptionKt.Dsl._create(bilibili.broadcast.v1.FrameOption.newBuilder()).apply { block() }._build()
/**
 * ```
 * message_id: 
 * client: 本次连接唯一的消息id，可用于回执
 * server: 唯一消息id，可用于上报或者回执
 * sequence:
 * client: 客户端应该每次请求时frame seq++，会返回对应的对称req/resp
 * server: 服务端下行消息，只会返回默认值：0
 * ```
 *
 * Protobuf type `bilibili.broadcast.v1.FrameOption`
 */
public object FrameOptionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.broadcast.v1.FrameOption.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.broadcast.v1.FrameOption.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.broadcast.v1.FrameOption = _builder.build()

    /**
     * ```
     * 消息id
     * ```
     *
     * `int64 message_id = 1;`
     */
    public var messageId: kotlin.Long
      @JvmName("getMessageId")
      get() = _builder.getMessageId()
      @JvmName("setMessageId")
      set(value) {
        _builder.setMessageId(value)
      }
    /**
     * ```
     * 消息id
     * ```
     *
     * `int64 message_id = 1;`
     */
    public fun clearMessageId() {
      _builder.clearMessageId()
    }

    /**
     * ```
     * frame序号
     * ```
     *
     * `int64 sequence = 2;`
     */
    public var sequence: kotlin.Long
      @JvmName("getSequence")
      get() = _builder.getSequence()
      @JvmName("setSequence")
      set(value) {
        _builder.setSequence(value)
      }
    /**
     * ```
     * frame序号
     * ```
     *
     * `int64 sequence = 2;`
     */
    public fun clearSequence() {
      _builder.clearSequence()
    }

    /**
     * ```
     * 是否进行消息回执(发出MessageAckReq)
     * downstream 上只有服务端设置为true，客户端响应
     * upstream   上只有客户端设置为true，服务端响应
     * 响应帧禁止设置is_ack，协议上禁止循环
     * 通常只有业务帧才可能设置is_ack, 因为协议栈(例如心跳、鉴权)另有响应约定
     * ```
     *
     * `bool is_ack = 3;`
     */
    public var isAck: kotlin.Boolean
      @JvmName("getIsAck")
      get() = _builder.getIsAck()
      @JvmName("setIsAck")
      set(value) {
        _builder.setIsAck(value)
      }
    /**
     * ```
     * 是否进行消息回执(发出MessageAckReq)
     * downstream 上只有服务端设置为true，客户端响应
     * upstream   上只有客户端设置为true，服务端响应
     * 响应帧禁止设置is_ack，协议上禁止循环
     * 通常只有业务帧才可能设置is_ack, 因为协议栈(例如心跳、鉴权)另有响应约定
     * ```
     *
     * `bool is_ack = 3;`
     */
    public fun clearIsAck() {
      _builder.clearIsAck()
    }

    /**
     * ```
     * 业务状态码
     * ```
     *
     * `.bilibili.rpc.Status status = 4;`
     */
    public var status: bilibili.rpc.Status
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * ```
     * 业务状态码
     * ```
     *
     * `.bilibili.rpc.Status status = 4;`
     */
    public fun clearStatus() {
      _builder.clearStatus()
    }
    /**
     * ```
     * 业务状态码
     * ```
     *
     * `.bilibili.rpc.Status status = 4;`
     * @return Whether the status field is set.
     */
    public fun hasStatus(): kotlin.Boolean {
      return _builder.hasStatus()
    }
    public val FrameOptionKt.Dsl.statusOrNull: bilibili.rpc.Status?
      get() = _builder.statusOrNull

    /**
     * ```
     * 业务ack来源, 仅downstream时候由服务端填写.
     * ```
     *
     * `string ack_origin = 5;`
     */
    public var ackOrigin: kotlin.String
      @JvmName("getAckOrigin")
      get() = _builder.getAckOrigin()
      @JvmName("setAckOrigin")
      set(value) {
        _builder.setAckOrigin(value)
      }
    /**
     * ```
     * 业务ack来源, 仅downstream时候由服务端填写.
     * ```
     *
     * `string ack_origin = 5;`
     */
    public fun clearAckOrigin() {
      _builder.clearAckOrigin()
    }

    /**
     * ```
     * ```
     *
     * `int64 timestamp = 6;`
     */
    public var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * ```
     * ```
     *
     * `int64 timestamp = 6;`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.broadcast.v1.FrameOption.copy(block: `bilibili.broadcast.v1`.FrameOptionKt.Dsl.() -> kotlin.Unit): bilibili.broadcast.v1.FrameOption =
  `bilibili.broadcast.v1`.FrameOptionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val bilibili.broadcast.v1.FrameOptionOrBuilder.statusOrNull: bilibili.rpc.Status?
  get() = if (hasStatus()) getStatus() else null

