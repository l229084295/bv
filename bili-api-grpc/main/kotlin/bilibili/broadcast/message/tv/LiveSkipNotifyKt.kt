// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: bilibili/broadcast/message/tv/proj.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package bilibili.broadcast.message.tv;

@kotlin.jvm.JvmName("-initializeliveSkipNotify")
public inline fun liveSkipNotify(block: bilibili.broadcast.message.tv.LiveSkipNotifyKt.Dsl.() -> kotlin.Unit): bilibili.broadcast.message.tv.LiveSkipNotify =
  bilibili.broadcast.message.tv.LiveSkipNotifyKt.Dsl._create(bilibili.broadcast.message.tv.LiveSkipNotify.newBuilder()).apply { block() }._build()
/**
 * ```
 * 直转点
 * ```
 *
 * Protobuf type `bilibili.broadcast.message.tv.LiveSkipNotify`
 */
public object LiveSkipNotifyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: bilibili.broadcast.message.tv.LiveSkipNotify.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: bilibili.broadcast.message.tv.LiveSkipNotify.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): bilibili.broadcast.message.tv.LiveSkipNotify = _builder.build()

    /**
     * ```
     * 直播id
     * ```
     *
     * `int64 live_id = 1;`
     */
    public var liveId: kotlin.Long
      @JvmName("getLiveId")
      get() = _builder.getLiveId()
      @JvmName("setLiveId")
      set(value) {
        _builder.setLiveId(value)
      }
    /**
     * ```
     * 直播id
     * ```
     *
     * `int64 live_id = 1;`
     */
    public fun clearLiveId() {
      _builder.clearLiveId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun bilibili.broadcast.message.tv.LiveSkipNotify.copy(block: `bilibili.broadcast.message.tv`.LiveSkipNotifyKt.Dsl.() -> kotlin.Unit): bilibili.broadcast.message.tv.LiveSkipNotify =
  `bilibili.broadcast.message.tv`.LiveSkipNotifyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

