// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: datacenter/hakase/protobuf/android_device_info.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package datacenter.hakase.protobuf;

@kotlin.jvm.JvmName("-initializesensorInfo")
public inline fun sensorInfo(block: datacenter.hakase.protobuf.SensorInfoKt.Dsl.() -> kotlin.Unit): datacenter.hakase.protobuf.SensorInfo =
  datacenter.hakase.protobuf.SensorInfoKt.Dsl._create(datacenter.hakase.protobuf.SensorInfo.newBuilder()).apply { block() }._build()
/**
 * ```
 * 传感器信息
 * ```
 *
 * Protobuf type `datacenter.hakase.protobuf.SensorInfo`
 */
public object SensorInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: datacenter.hakase.protobuf.SensorInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: datacenter.hakase.protobuf.SensorInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): datacenter.hakase.protobuf.SensorInfo = _builder.build()

    /**
     * ```
     * 传感器名称, 如 "rotation Vector"
     * ```
     *
     * `string name = 1;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * ```
     * 传感器名称, 如 "rotation Vector"
     * ```
     *
     * `string name = 1;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * 制造商
     * ```
     *
     * `string vendor = 2;`
     */
    public var vendor: kotlin.String
      @JvmName("getVendor")
      get() = _builder.getVendor()
      @JvmName("setVendor")
      set(value) {
        _builder.setVendor(value)
      }
    /**
     * ```
     * 制造商
     * ```
     *
     * `string vendor = 2;`
     */
    public fun clearVendor() {
      _builder.clearVendor()
    }

    /**
     * ```
     * ```
     *
     * `int32 version = 3;`
     */
    public var version: kotlin.Int
      @JvmName("getVersion")
      get() = _builder.getVersion()
      @JvmName("setVersion")
      set(value) {
        _builder.setVersion(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 version = 3;`
     */
    public fun clearVersion() {
      _builder.clearVersion()
    }

    /**
     * ```
     * ```
     *
     * `int32 type = 4;`
     */
    public var type: kotlin.Int
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 type = 4;`
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * ```
     * ```
     *
     * `float max_range = 5;`
     */
    public var maxRange: kotlin.Float
      @JvmName("getMaxRange")
      get() = _builder.getMaxRange()
      @JvmName("setMaxRange")
      set(value) {
        _builder.setMaxRange(value)
      }
    /**
     * ```
     * ```
     *
     * `float max_range = 5;`
     */
    public fun clearMaxRange() {
      _builder.clearMaxRange()
    }

    /**
     * ```
     * ```
     *
     * `float resolution = 6;`
     */
    public var resolution: kotlin.Float
      @JvmName("getResolution")
      get() = _builder.getResolution()
      @JvmName("setResolution")
      set(value) {
        _builder.setResolution(value)
      }
    /**
     * ```
     * ```
     *
     * `float resolution = 6;`
     */
    public fun clearResolution() {
      _builder.clearResolution()
    }

    /**
     * ```
     * 耗电量(mA)
     * ```
     *
     * `float power = 7;`
     */
    public var power: kotlin.Float
      @JvmName("getPower")
      get() = _builder.getPower()
      @JvmName("setPower")
      set(value) {
        _builder.setPower(value)
      }
    /**
     * ```
     * 耗电量(mA)
     * ```
     *
     * `float power = 7;`
     */
    public fun clearPower() {
      _builder.clearPower()
    }

    /**
     * ```
     * ```
     *
     * `int32 min_delay = 8;`
     */
    public var minDelay: kotlin.Int
      @JvmName("getMinDelay")
      get() = _builder.getMinDelay()
      @JvmName("setMinDelay")
      set(value) {
        _builder.setMinDelay(value)
      }
    /**
     * ```
     * ```
     *
     * `int32 min_delay = 8;`
     */
    public fun clearMinDelay() {
      _builder.clearMinDelay()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun datacenter.hakase.protobuf.SensorInfo.copy(block: `datacenter.hakase.protobuf`.SensorInfoKt.Dsl.() -> kotlin.Unit): datacenter.hakase.protobuf.SensorInfo =
  `datacenter.hakase.protobuf`.SensorInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

