// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: datacenter/hakase/protobuf/android_device_info.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package datacenter.hakase.protobuf;

@kotlin.jvm.JvmName("-initializeandroidDeviceInfo")
public inline fun androidDeviceInfo(block: datacenter.hakase.protobuf.AndroidDeviceInfoKt.Dsl.() -> kotlin.Unit): datacenter.hakase.protobuf.AndroidDeviceInfo =
  datacenter.hakase.protobuf.AndroidDeviceInfoKt.Dsl._create(datacenter.hakase.protobuf.AndroidDeviceInfo.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `datacenter.hakase.protobuf.AndroidDeviceInfo`
 */
public object AndroidDeviceInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: datacenter.hakase.protobuf.AndroidDeviceInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: datacenter.hakase.protobuf.AndroidDeviceInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): datacenter.hakase.protobuf.AndroidDeviceInfo = _builder.build()

    /**
     * ```
     * ?
     * ```
     *
     * `string sdkver = 1;`
     */
    public var sdkver: kotlin.String
      @JvmName("getSdkver")
      get() = _builder.getSdkver()
      @JvmName("setSdkver")
      set(value) {
        _builder.setSdkver(value)
      }
    /**
     * ```
     * ?
     * ```
     *
     * `string sdkver = 1;`
     */
    public fun clearSdkver() {
      _builder.clearSdkver()
    }

    /**
     * ```
     * 产品id
     * 粉 白 蓝 直播姬 HD 海外 OTT 漫画 TV野版 小视频 网易漫画 网易漫画 网易漫画HD 国际版 东南亚版
     * 1  2  3    4    5   6    7   8     9     10      11       12       13       14       30
     * ```
     *
     * `string app_id = 2;`
     */
    public var appId: kotlin.String
      @JvmName("getAppId")
      get() = _builder.getAppId()
      @JvmName("setAppId")
      set(value) {
        _builder.setAppId(value)
      }
    /**
     * ```
     * 产品id
     * 粉 白 蓝 直播姬 HD 海外 OTT 漫画 TV野版 小视频 网易漫画 网易漫画 网易漫画HD 国际版 东南亚版
     * 1  2  3    4    5   6    7   8     9     10      11       12       13       14       30
     * ```
     *
     * `string app_id = 2;`
     */
    public fun clearAppId() {
      _builder.clearAppId()
    }

    /**
     * ```
     * 版本号, 如 "7.39.0"
     * ```
     *
     * `string app_version = 3;`
     */
    public var appVersion: kotlin.String
      @JvmName("getAppVersion")
      get() = _builder.getAppVersion()
      @JvmName("setAppVersion")
      set(value) {
        _builder.setAppVersion(value)
      }
    /**
     * ```
     * 版本号, 如 "7.39.0"
     * ```
     *
     * `string app_version = 3;`
     */
    public fun clearAppVersion() {
      _builder.clearAppVersion()
    }

    /**
     * ```
     * 版本号, 如 "7390300"
     * ```
     *
     * `string app_version_code = 4;`
     */
    public var appVersionCode: kotlin.String
      @JvmName("getAppVersionCode")
      get() = _builder.getAppVersionCode()
      @JvmName("setAppVersionCode")
      set(value) {
        _builder.setAppVersionCode(value)
      }
    /**
     * ```
     * 版本号, 如 "7390300"
     * ```
     *
     * `string app_version_code = 4;`
     */
    public fun clearAppVersionCode() {
      _builder.clearAppVersionCode()
    }

    /**
     * ```
     * 用户 mid
     * ```
     *
     * `string mid = 5;`
     */
    public var mid: kotlin.String
      @JvmName("getMid")
      get() = _builder.getMid()
      @JvmName("setMid")
      set(value) {
        _builder.setMid(value)
      }
    /**
     * ```
     * 用户 mid
     * ```
     *
     * `string mid = 5;`
     */
    public fun clearMid() {
      _builder.clearMid()
    }

    /**
     * ```
     * 渠道号, 如 "master"
     * ```
     *
     * `string chid = 6;`
     */
    public var chid: kotlin.String
      @JvmName("getChid")
      get() = _builder.getChid()
      @JvmName("setChid")
      set(value) {
        _builder.setChid(value)
      }
    /**
     * ```
     * 渠道号, 如 "master"
     * ```
     *
     * `string chid = 6;`
     */
    public fun clearChid() {
      _builder.clearChid()
    }

    /**
     * ```
     * APP 首次安装启动时间戳
     * ```
     *
     * `int64 fts = 7;`
     */
    public var fts: kotlin.Long
      @JvmName("getFts")
      get() = _builder.getFts()
      @JvmName("setFts")
      set(value) {
        _builder.setFts(value)
      }
    /**
     * ```
     * APP 首次安装启动时间戳
     * ```
     *
     * `int64 fts = 7;`
     */
    public fun clearFts() {
      _builder.clearFts()
    }

    /**
     * ```
     * 此处实际为 fp, 但不知为何命名为 buvid_local
     * ```
     *
     * `string buvid_local = 8;`
     */
    public var buvidLocal: kotlin.String
      @JvmName("getBuvidLocal")
      get() = _builder.getBuvidLocal()
      @JvmName("setBuvidLocal")
      set(value) {
        _builder.setBuvidLocal(value)
      }
    /**
     * ```
     * 此处实际为 fp, 但不知为何命名为 buvid_local
     * ```
     *
     * `string buvid_local = 8;`
     */
    public fun clearBuvidLocal() {
      _builder.clearBuvidLocal()
    }

    /**
     * ```
     * 留空为 0
     * ```
     *
     * `int32 first = 9;`
     */
    public var first: kotlin.Int
      @JvmName("getFirst")
      get() = _builder.getFirst()
      @JvmName("setFirst")
      set(value) {
        _builder.setFirst(value)
      }
    /**
     * ```
     * 留空为 0
     * ```
     *
     * `int32 first = 9;`
     */
    public fun clearFirst() {
      _builder.clearFirst()
    }

    /**
     * ```
     * 进程名, 如 "tv.danmaku.bili"
     * ```
     *
     * `string proc = 10;`
     */
    public var proc: kotlin.String
      @JvmName("getProc")
      get() = _builder.getProc()
      @JvmName("setProc")
      set(value) {
        _builder.setProc(value)
      }
    /**
     * ```
     * 进程名, 如 "tv.danmaku.bili"
     * ```
     *
     * `string proc = 10;`
     */
    public fun clearProc() {
      _builder.clearProc()
    }

    /**
     * ```
     * 网络信息, 为一数组直接 toString() 的结果
     * 如 """["dummy0,fe80::18d8:6ff:fe46:c2ba%dummy0,", "wlan0,fe80::a0f4:6dff:fea8:2d37%wlan0,192.168.1.5,", "lo,::1,127.0.0.1,", "rmnet_ims00,fe80::5a02:3ff:fe04:512%rmnet_ims00,2409:815a:7c38:cee1:1773:d0b9:d163:b023,"]"""
     * ```
     *
     * `string net = 11;`
     */
    public var net: kotlin.String
      @JvmName("getNet")
      get() = _builder.getNet()
      @JvmName("setNet")
      set(value) {
        _builder.setNet(value)
      }
    /**
     * ```
     * 网络信息, 为一数组直接 toString() 的结果
     * 如 """["dummy0,fe80::18d8:6ff:fe46:c2ba%dummy0,", "wlan0,fe80::a0f4:6dff:fea8:2d37%wlan0,192.168.1.5,", "lo,::1,127.0.0.1,", "rmnet_ims00,fe80::5a02:3ff:fe04:512%rmnet_ims00,2409:815a:7c38:cee1:1773:d0b9:d163:b023,"]"""
     * ```
     *
     * `string net = 11;`
     */
    public fun clearNet() {
      _builder.clearNet()
    }

    /**
     * ```
     * 手机无线电固件版本号(`Build.getRadioVersion()`). 如 `21C20B686S000C000,21C20B686S000C000`.
     * ```
     *
     * `string band = 12;`
     */
    public var band: kotlin.String
      @JvmName("getBand")
      get() = _builder.getBand()
      @JvmName("setBand")
      set(value) {
        _builder.setBand(value)
      }
    /**
     * ```
     * 手机无线电固件版本号(`Build.getRadioVersion()`). 如 `21C20B686S000C000,21C20B686S000C000`.
     * ```
     *
     * `string band = 12;`
     */
    public fun clearBand() {
      _builder.clearBand()
    }

    /**
     * ```
     * OS 版本号, 如 "12"
     * ```
     *
     * `string osver = 13;`
     */
    public var osver: kotlin.String
      @JvmName("getOsver")
      get() = _builder.getOsver()
      @JvmName("setOsver")
      set(value) {
        _builder.setOsver(value)
      }
    /**
     * ```
     * OS 版本号, 如 "12"
     * ```
     *
     * `string osver = 13;`
     */
    public fun clearOsver() {
      _builder.clearOsver()
    }

    /**
     * ```
     * 当前毫秒时间戳
     * ```
     *
     * `int64 t = 14;`
     */
    public var t: kotlin.Long
      @JvmName("getT")
      get() = _builder.getT()
      @JvmName("setT")
      set(value) {
        _builder.setT(value)
      }
    /**
     * ```
     * 当前毫秒时间戳
     * ```
     *
     * `int64 t = 14;`
     */
    public fun clearT() {
      _builder.clearT()
    }

    /**
     * ```
     * CPU 逻辑核心计数
     * ```
     *
     * `int32 cpu_count = 15;`
     */
    public var cpuCount: kotlin.Int
      @JvmName("getCpuCount")
      get() = _builder.getCpuCount()
      @JvmName("setCpuCount")
      set(value) {
        _builder.setCpuCount(value)
      }
    /**
     * ```
     * CPU 逻辑核心计数
     * ```
     *
     * `int32 cpu_count = 15;`
     */
    public fun clearCpuCount() {
      _builder.clearCpuCount()
    }

    /**
     * ```
     * 手机 Model, 如 "NOH-AN01"
     * ```
     *
     * `string model = 16;`
     */
    public var model: kotlin.String
      @JvmName("getModel")
      get() = _builder.getModel()
      @JvmName("setModel")
      set(value) {
        _builder.setModel(value)
      }
    /**
     * ```
     * 手机 Model, 如 "NOH-AN01"
     * ```
     *
     * `string model = 16;`
     */
    public fun clearModel() {
      _builder.clearModel()
    }

    /**
     * ```
     * 手机品牌, 如 "HUAWEI"
     * ```
     *
     * `string brand = 17;`
     */
    public var brand: kotlin.String
      @JvmName("getBrand")
      get() = _builder.getBrand()
      @JvmName("setBrand")
      set(value) {
        _builder.setBrand(value)
      }
    /**
     * ```
     * 手机品牌, 如 "HUAWEI"
     * ```
     *
     * `string brand = 17;`
     */
    public fun clearBrand() {
      _builder.clearBrand()
    }

    /**
     * ```
     * 屏幕信息, 如 "1288,2646,560", 即 "{width},{height},{pixel}"
     * ```
     *
     * `string screen = 18;`
     */
    public var screen: kotlin.String
      @JvmName("getScreen")
      get() = _builder.getScreen()
      @JvmName("setScreen")
      set(value) {
        _builder.setScreen(value)
      }
    /**
     * ```
     * 屏幕信息, 如 "1288,2646,560", 即 "{width},{height},{pixel}"
     * ```
     *
     * `string screen = 18;`
     */
    public fun clearScreen() {
      _builder.clearScreen()
    }

    /**
     * ```
     * CPU 型号, 留空或根据实际情况确定
     * ```
     *
     * `string cpu_model = 19;`
     */
    public var cpuModel: kotlin.String
      @JvmName("getCpuModel")
      get() = _builder.getCpuModel()
      @JvmName("setCpuModel")
      set(value) {
        _builder.setCpuModel(value)
      }
    /**
     * ```
     * CPU 型号, 留空或根据实际情况确定
     * ```
     *
     * `string cpu_model = 19;`
     */
    public fun clearCpuModel() {
      _builder.clearCpuModel()
    }

    /**
     * ```
     * 蓝牙 MAC, 留空或根据实际情况确定
     * ```
     *
     * `string btmac = 20;`
     */
    public var btmac: kotlin.String
      @JvmName("getBtmac")
      get() = _builder.getBtmac()
      @JvmName("setBtmac")
      set(value) {
        _builder.setBtmac(value)
      }
    /**
     * ```
     * 蓝牙 MAC, 留空或根据实际情况确定
     * ```
     *
     * `string btmac = 20;`
     */
    public fun clearBtmac() {
      _builder.clearBtmac()
    }

    /**
     * ```
     * Linux 内核 bootid
     * ```
     *
     * `int64 boot = 21;`
     */
    public var boot: kotlin.Long
      @JvmName("getBoot")
      get() = _builder.getBoot()
      @JvmName("setBoot")
      set(value) {
        _builder.setBoot(value)
      }
    /**
     * ```
     * Linux 内核 bootid
     * ```
     *
     * `int64 boot = 21;`
     */
    public fun clearBoot() {
      _builder.clearBoot()
    }

    /**
     * ```
     * 模拟器(?), 如 "000"
     * ```
     *
     * `string emu = 22;`
     */
    public var emu: kotlin.String
      @JvmName("getEmu")
      get() = _builder.getEmu()
      @JvmName("setEmu")
      set(value) {
        _builder.setEmu(value)
      }
    /**
     * ```
     * 模拟器(?), 如 "000"
     * ```
     *
     * `string emu = 22;`
     */
    public fun clearEmu() {
      _builder.clearEmu()
    }

    /**
     * ```
     * 移动网络 MCC MNC, 如中国移动为 46007
     * ```
     *
     * `string oid = 23;`
     */
    public var oid: kotlin.String
      @JvmName("getOid")
      get() = _builder.getOid()
      @JvmName("setOid")
      set(value) {
        _builder.setOid(value)
      }
    /**
     * ```
     * 移动网络 MCC MNC, 如中国移动为 46007
     * ```
     *
     * `string oid = 23;`
     */
    public fun clearOid() {
      _builder.clearOid()
    }

    /**
     * ```
     * 当前网络类型, 如 "WIFI", 见 bilibili.metadata.network.NetworkType
     * ```
     *
     * `string network = 24;`
     */
    public var network: kotlin.String
      @JvmName("getNetwork")
      get() = _builder.getNetwork()
      @JvmName("setNetwork")
      set(value) {
        _builder.setNetwork(value)
      }
    /**
     * ```
     * 当前网络类型, 如 "WIFI", 见 bilibili.metadata.network.NetworkType
     * ```
     *
     * `string network = 24;`
     */
    public fun clearNetwork() {
      _builder.clearNetwork()
    }

    /**
     * ```
     * 运行内存(Byte)
     * ```
     *
     * `int64 mem = 25;`
     */
    public var mem: kotlin.Long
      @JvmName("getMem")
      get() = _builder.getMem()
      @JvmName("setMem")
      set(value) {
        _builder.setMem(value)
      }
    /**
     * ```
     * 运行内存(Byte)
     * ```
     *
     * `int64 mem = 25;`
     */
    public fun clearMem() {
      _builder.clearMem()
    }

    /**
     * ```
     * 传感器信息, 为一数组直接 toString() 的结果
     * 如 """["accelerometer-icm20690,invensense", "akm-akm09918,akm", "orientation,huawei", "als-tcs3718,ams", "proximity-tcs3718,ams", "gyroscope-icm20690,invensense", "gravity,huawei", "linear Acceleration,huawei", "rotation Vector,huawei", "airpress-bmp280,bosch", "HALL sensor,huawei", "uncalibrated Magnetic Field,Asahi Kasei Microdevices", "game Rotation Vector,huawei", "uncalibrated Gyroscope,STMicroelectronics", "significant Motion,huawei", "step Detector,huawei", "step counter,huawei", "geomagnetic Rotation Vector,huawei", "phonecall sensor,huawei", "RPC sensor,huawei", "agt,huawei", "color sensor,huawei", "uncalibrated Accelerometer,huawei", "drop sensor,huawei"]"""
     * ```
     *
     * `string sensor = 26;`
     */
    public var sensor: kotlin.String
      @JvmName("getSensor")
      get() = _builder.getSensor()
      @JvmName("setSensor")
      set(value) {
        _builder.setSensor(value)
      }
    /**
     * ```
     * 传感器信息, 为一数组直接 toString() 的结果
     * 如 """["accelerometer-icm20690,invensense", "akm-akm09918,akm", "orientation,huawei", "als-tcs3718,ams", "proximity-tcs3718,ams", "gyroscope-icm20690,invensense", "gravity,huawei", "linear Acceleration,huawei", "rotation Vector,huawei", "airpress-bmp280,bosch", "HALL sensor,huawei", "uncalibrated Magnetic Field,Asahi Kasei Microdevices", "game Rotation Vector,huawei", "uncalibrated Gyroscope,STMicroelectronics", "significant Motion,huawei", "step Detector,huawei", "step counter,huawei", "geomagnetic Rotation Vector,huawei", "phonecall sensor,huawei", "RPC sensor,huawei", "agt,huawei", "color sensor,huawei", "uncalibrated Accelerometer,huawei", "drop sensor,huawei"]"""
     * ```
     *
     * `string sensor = 26;`
     */
    public fun clearSensor() {
      _builder.clearSensor()
    }

    /**
     * ```
     * CPU 频率, 如 2045000
     * ```
     *
     * `int64 cpu_freq = 27;`
     */
    public var cpuFreq: kotlin.Long
      @JvmName("getCpuFreq")
      get() = _builder.getCpuFreq()
      @JvmName("setCpuFreq")
      set(value) {
        _builder.setCpuFreq(value)
      }
    /**
     * ```
     * CPU 频率, 如 2045000
     * ```
     *
     * `int64 cpu_freq = 27;`
     */
    public fun clearCpuFreq() {
      _builder.clearCpuFreq()
    }

    /**
     * ```
     * CPU 架构, 如 "ARM"
     * ```
     *
     * `string cpu_vendor = 28;`
     */
    public var cpuVendor: kotlin.String
      @JvmName("getCpuVendor")
      get() = _builder.getCpuVendor()
      @JvmName("setCpuVendor")
      set(value) {
        _builder.setCpuVendor(value)
      }
    /**
     * ```
     * CPU 架构, 如 "ARM"
     * ```
     *
     * `string cpu_vendor = 28;`
     */
    public fun clearCpuVendor() {
      _builder.clearCpuVendor()
    }

    /**
     * ```
     * ?
     * ```
     *
     * `string sim = 29;`
     */
    public var sim: kotlin.String
      @JvmName("getSim")
      get() = _builder.getSim()
      @JvmName("setSim")
      set(value) {
        _builder.setSim(value)
      }
    /**
     * ```
     * ?
     * ```
     *
     * `string sim = 29;`
     */
    public fun clearSim() {
      _builder.clearSim()
    }

    /**
     * ```
     * 光照传感器数值
     * ```
     *
     * `int32 brightness = 30;`
     */
    public var brightness: kotlin.Int
      @JvmName("getBrightness")
      get() = _builder.getBrightness()
      @JvmName("setBrightness")
      set(value) {
        _builder.setBrightness(value)
      }
    /**
     * ```
     * 光照传感器数值
     * ```
     *
     * `int32 brightness = 30;`
     */
    public fun clearBrightness() {
      _builder.clearBrightness()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PropsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Android Build.prop 信息, key 包括 net.hostname, ro.boot.hardware, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> props = 31;`
     */
     public val props: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PropsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getPropsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getPropsMap()
      )
    /**
     * ```
     * Android Build.prop 信息, key 包括 net.hostname, ro.boot.hardware, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> props = 31;`
     */
    @JvmName("putProps")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PropsProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putProps(key, value)
       }
    /**
     * ```
     * Android Build.prop 信息, key 包括 net.hostname, ro.boot.hardware, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> props = 31;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setProps")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PropsProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * ```
     * Android Build.prop 信息, key 包括 net.hostname, ro.boot.hardware, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> props = 31;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeProps")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PropsProxy>
      .remove(key: kotlin.String) {
         _builder.removeProps(key)
       }
    /**
     * ```
     * Android Build.prop 信息, key 包括 net.hostname, ro.boot.hardware, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> props = 31;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllProps")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PropsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllProps(map)
       }
    /**
     * ```
     * Android Build.prop 信息, key 包括 net.hostname, ro.boot.hardware, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> props = 31;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearProps")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PropsProxy>
      .clear() {
         _builder.clearProps()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SysProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 系统信息, key 包括 product, cpu_model_name, display, cpu_abi_list, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> sys = 32;`
     */
     public val sys: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SysProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getSysMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getSysMap()
      )
    /**
     * ```
     * 系统信息, key 包括 product, cpu_model_name, display, cpu_abi_list, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> sys = 32;`
     */
    @JvmName("putSys")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SysProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putSys(key, value)
       }
    /**
     * ```
     * 系统信息, key 包括 product, cpu_model_name, display, cpu_abi_list, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> sys = 32;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setSys")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SysProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * ```
     * 系统信息, key 包括 product, cpu_model_name, display, cpu_abi_list, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> sys = 32;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeSys")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SysProxy>
      .remove(key: kotlin.String) {
         _builder.removeSys(key)
       }
    /**
     * ```
     * 系统信息, key 包括 product, cpu_model_name, display, cpu_abi_list, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> sys = 32;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllSys")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SysProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllSys(map)
       }
    /**
     * ```
     * 系统信息, key 包括 product, cpu_model_name, display, cpu_abi_list, etc.
     * 具体 key-value 需要技术手段自行确定
     * ```
     *
     * `map<string, string> sys = 32;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearSys")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SysProxy>
      .clear() {
         _builder.clearSys()
       }

    /**
     * ```
     * Wifi MAC, 一般无法获取, 留空
     * ```
     *
     * `string wifimac = 33;`
     */
    public var wifimac: kotlin.String
      @JvmName("getWifimac")
      get() = _builder.getWifimac()
      @JvmName("setWifimac")
      set(value) {
        _builder.setWifimac(value)
      }
    /**
     * ```
     * Wifi MAC, 一般无法获取, 留空
     * ```
     *
     * `string wifimac = 33;`
     */
    public fun clearWifimac() {
      _builder.clearWifimac()
    }

    /**
     * ```
     * Android ID
     * ```
     *
     * `string adid = 34;`
     */
    public var adid: kotlin.String
      @JvmName("getAdid")
      get() = _builder.getAdid()
      @JvmName("setAdid")
      set(value) {
        _builder.setAdid(value)
      }
    /**
     * ```
     * Android ID
     * ```
     *
     * `string adid = 34;`
     */
    public fun clearAdid() {
      _builder.clearAdid()
    }

    /**
     * ```
     * OS 名称, 如 "android"
     * ```
     *
     * `string os = 35;`
     */
    public var os: kotlin.String
      @JvmName("getOs")
      get() = _builder.getOs()
      @JvmName("setOs")
      set(value) {
        _builder.setOs(value)
      }
    /**
     * ```
     * OS 名称, 如 "android"
     * ```
     *
     * `string os = 35;`
     */
    public fun clearOs() {
      _builder.clearOs()
    }

    /**
     * ```
     * IMEI, 一般无法获取, 留空
     * ```
     *
     * `string imei = 36;`
     */
    public var imei: kotlin.String
      @JvmName("getImei")
      get() = _builder.getImei()
      @JvmName("setImei")
      set(value) {
        _builder.setImei(value)
      }
    /**
     * ```
     * IMEI, 一般无法获取, 留空
     * ```
     *
     * `string imei = 36;`
     */
    public fun clearImei() {
      _builder.clearImei()
    }

    /**
     * ```
     * ?, 留空
     * ```
     *
     * `string cell = 37;`
     */
    public var cell: kotlin.String
      @JvmName("getCell")
      get() = _builder.getCell()
      @JvmName("setCell")
      set(value) {
        _builder.setCell(value)
      }
    /**
     * ```
     * ?, 留空
     * ```
     *
     * `string cell = 37;`
     */
    public fun clearCell() {
      _builder.clearCell()
    }

    /**
     * ```
     * IMSI, 一般无法获取, 留空
     * ```
     *
     * `string imsi = 38;`
     */
    public var imsi: kotlin.String
      @JvmName("getImsi")
      get() = _builder.getImsi()
      @JvmName("setImsi")
      set(value) {
        _builder.setImsi(value)
      }
    /**
     * ```
     * IMSI, 一般无法获取, 留空
     * ```
     *
     * `string imsi = 38;`
     */
    public fun clearImsi() {
      _builder.clearImsi()
    }

    /**
     * ```
     * ICCID, 一般无法获取, 留空
     * ```
     *
     * `string iccid = 39;`
     */
    public var iccid: kotlin.String
      @JvmName("getIccid")
      get() = _builder.getIccid()
      @JvmName("setIccid")
      set(value) {
        _builder.setIccid(value)
      }
    /**
     * ```
     * ICCID, 一般无法获取, 留空
     * ```
     *
     * `string iccid = 39;`
     */
    public fun clearIccid() {
      _builder.clearIccid()
    }

    /**
     * ```
     * 摄像头数量, 留空
     * ```
     *
     * `int32 camcnt = 40;`
     */
    public var camcnt: kotlin.Int
      @JvmName("getCamcnt")
      get() = _builder.getCamcnt()
      @JvmName("setCamcnt")
      set(value) {
        _builder.setCamcnt(value)
      }
    /**
     * ```
     * 摄像头数量, 留空
     * ```
     *
     * `int32 camcnt = 40;`
     */
    public fun clearCamcnt() {
      _builder.clearCamcnt()
    }

    /**
     * ```
     * 摄像头像素, 留空
     * ```
     *
     * `string campx = 41;`
     */
    public var campx: kotlin.String
      @JvmName("getCampx")
      get() = _builder.getCampx()
      @JvmName("setCampx")
      set(value) {
        _builder.setCampx(value)
      }
    /**
     * ```
     * 摄像头像素, 留空
     * ```
     *
     * `string campx = 41;`
     */
    public fun clearCampx() {
      _builder.clearCampx()
    }

    /**
     * ```
     * 手机内置存储空间(Byte)
     * ```
     *
     * `int64 total_space = 42;`
     */
    public var totalSpace: kotlin.Long
      @JvmName("getTotalSpace")
      get() = _builder.getTotalSpace()
      @JvmName("setTotalSpace")
      set(value) {
        _builder.setTotalSpace(value)
      }
    /**
     * ```
     * 手机内置存储空间(Byte)
     * ```
     *
     * `int64 total_space = 42;`
     */
    public fun clearTotalSpace() {
      _builder.clearTotalSpace()
    }

    /**
     * ```
     * ?, 例如 "false"
     * ```
     *
     * `string axposed = 43;`
     */
    public var axposed: kotlin.String
      @JvmName("getAxposed")
      get() = _builder.getAxposed()
      @JvmName("setAxposed")
      set(value) {
        _builder.setAxposed(value)
      }
    /**
     * ```
     * ?, 例如 "false"
     * ```
     *
     * `string axposed = 43;`
     */
    public fun clearAxposed() {
      _builder.clearAxposed()
    }

    /**
     * ```
     * ?, 留空
     * ```
     *
     * `string maps = 44;`
     */
    public var maps: kotlin.String
      @JvmName("getMaps")
      get() = _builder.getMaps()
      @JvmName("setMaps")
      set(value) {
        _builder.setMaps(value)
      }
    /**
     * ```
     * ?, 留空
     * ```
     *
     * `string maps = 44;`
     */
    public fun clearMaps() {
      _builder.clearMaps()
    }

    /**
     * ```
     * 如: "/data/user/0/tv.danmaku.bili/files"
     * ```
     *
     * `string files = 45;`
     */
    public var files: kotlin.String
      @JvmName("getFiles")
      get() = _builder.getFiles()
      @JvmName("setFiles")
      set(value) {
        _builder.setFiles(value)
      }
    /**
     * ```
     * 如: "/data/user/0/tv.danmaku.bili/files"
     * ```
     *
     * `string files = 45;`
     */
    public fun clearFiles() {
      _builder.clearFiles()
    }

    /**
     * ```
     * 是否为虚拟化(?), 如 "0"
     * ```
     *
     * `string virtual = 46;`
     */
    public var virtual: kotlin.String
      @JvmName("getVirtual")
      get() = _builder.getVirtual()
      @JvmName("setVirtual")
      set(value) {
        _builder.setVirtual(value)
      }
    /**
     * ```
     * 是否为虚拟化(?), 如 "0"
     * ```
     *
     * `string virtual = 46;`
     */
    public fun clearVirtual() {
      _builder.clearVirtual()
    }

    /**
     * ```
     * 虚拟进程, 如 "[]"
     * ```
     *
     * `string virtualproc = 47;`
     */
    public var virtualproc: kotlin.String
      @JvmName("getVirtualproc")
      get() = _builder.getVirtualproc()
      @JvmName("setVirtualproc")
      set(value) {
        _builder.setVirtualproc(value)
      }
    /**
     * ```
     * 虚拟进程, 如 "[]"
     * ```
     *
     * `string virtualproc = 47;`
     */
    public fun clearVirtualproc() {
      _builder.clearVirtualproc()
    }

    /**
     * ```
     * ?, 留空
     * ```
     *
     * `string gadid = 48;`
     */
    public var gadid: kotlin.String
      @JvmName("getGadid")
      get() = _builder.getGadid()
      @JvmName("setGadid")
      set(value) {
        _builder.setGadid(value)
      }
    /**
     * ```
     * ?, 留空
     * ```
     *
     * `string gadid = 48;`
     */
    public fun clearGadid() {
      _builder.clearGadid()
    }

    /**
     * ```
     * ?, 留空
     * ```
     *
     * `string glimit = 49;`
     */
    public var glimit: kotlin.String
      @JvmName("getGlimit")
      get() = _builder.getGlimit()
      @JvmName("setGlimit")
      set(value) {
        _builder.setGlimit(value)
      }
    /**
     * ```
     * ?, 留空
     * ```
     *
     * `string glimit = 49;`
     */
    public fun clearGlimit() {
      _builder.clearGlimit()
    }

    /**
     * ```
     * 设备安装的 APP 列表, 如 "[]"
     * ```
     *
     * `string apps = 50;`
     */
    public var apps: kotlin.String
      @JvmName("getApps")
      get() = _builder.getApps()
      @JvmName("setApps")
      set(value) {
        _builder.setApps(value)
      }
    /**
     * ```
     * 设备安装的 APP 列表, 如 "[]"
     * ```
     *
     * `string apps = 50;`
     */
    public fun clearApps() {
      _builder.clearApps()
    }

    /**
     * ```
     * 客户端 GUID
     * ```
     *
     * `string guid = 51;`
     */
    public var guid: kotlin.String
      @JvmName("getGuid")
      get() = _builder.getGuid()
      @JvmName("setGuid")
      set(value) {
        _builder.setGuid(value)
      }
    /**
     * ```
     * 客户端 GUID
     * ```
     *
     * `string guid = 51;`
     */
    public fun clearGuid() {
      _builder.clearGuid()
    }

    /**
     * ```
     * ?, 区分于用户 UID
     * ```
     *
     * `string uid = 52;`
     */
    public var uid: kotlin.String
      @JvmName("getUid")
      get() = _builder.getUid()
      @JvmName("setUid")
      set(value) {
        _builder.setUid(value)
      }
    /**
     * ```
     * ?, 区分于用户 UID
     * ```
     *
     * `string uid = 52;`
     */
    public fun clearUid() {
      _builder.clearUid()
    }

    /**
     * ```
     * ?, 留空
     * ```
     *
     * `int32 root = 53;`
     */
    public var root: kotlin.Int
      @JvmName("getRoot")
      get() = _builder.getRoot()
      @JvmName("setRoot")
      set(value) {
        _builder.setRoot(value)
      }
    /**
     * ```
     * ?, 留空
     * ```
     *
     * `int32 root = 53;`
     */
    public fun clearRoot() {
      _builder.clearRoot()
    }

    /**
     * ```
     * 摄像头放大倍数(?), 留空
     * ```
     *
     * `string camzoom = 54;`
     */
    public var camzoom: kotlin.String
      @JvmName("getCamzoom")
      get() = _builder.getCamzoom()
      @JvmName("setCamzoom")
      set(value) {
        _builder.setCamzoom(value)
      }
    /**
     * ```
     * 摄像头放大倍数(?), 留空
     * ```
     *
     * `string camzoom = 54;`
     */
    public fun clearCamzoom() {
      _builder.clearCamzoom()
    }

    /**
     * ```
     * 摄像头闪光灯(?), 留空
     * ```
     *
     * `string camlight = 55;`
     */
    public var camlight: kotlin.String
      @JvmName("getCamlight")
      get() = _builder.getCamlight()
      @JvmName("setCamlight")
      set(value) {
        _builder.setCamlight(value)
      }
    /**
     * ```
     * 摄像头闪光灯(?), 留空
     * ```
     *
     * `string camlight = 55;`
     */
    public fun clearCamlight() {
      _builder.clearCamlight()
    }

    /**
     * ```
     * OAID 匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 默认 "00000000-0000-0000-0000-000000000000"
     * ```
     *
     * `string oaid = 56;`
     */
    public var oaid: kotlin.String
      @JvmName("getOaid")
      get() = _builder.getOaid()
      @JvmName("setOaid")
      set(value) {
        _builder.setOaid(value)
      }
    /**
     * ```
     * OAID 匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 默认 "00000000-0000-0000-0000-000000000000"
     * ```
     *
     * `string oaid = 56;`
     */
    public fun clearOaid() {
      _builder.clearOaid()
    }

    /**
     * ```
     * UDID 设备唯一标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
     * ```
     *
     * `string udid = 57;`
     */
    public var udid: kotlin.String
      @JvmName("getUdid")
      get() = _builder.getUdid()
      @JvmName("setUdid")
      set(value) {
        _builder.setUdid(value)
      }
    /**
     * ```
     * UDID 设备唯一标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
     * ```
     *
     * `string udid = 57;`
     */
    public fun clearUdid() {
      _builder.clearUdid()
    }

    /**
     * ```
     * VAID 开发者匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
     * ```
     *
     * `string vaid = 58;`
     */
    public var vaid: kotlin.String
      @JvmName("getVaid")
      get() = _builder.getVaid()
      @JvmName("setVaid")
      set(value) {
        _builder.setVaid(value)
      }
    /**
     * ```
     * VAID 开发者匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
     * ```
     *
     * `string vaid = 58;`
     */
    public fun clearVaid() {
      _builder.clearVaid()
    }

    /**
     * ```
     * AAID, 应用匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
     * ```
     *
     * `string aaid = 59;`
     */
    public var aaid: kotlin.String
      @JvmName("getAaid")
      get() = _builder.getAaid()
      @JvmName("setAaid")
      set(value) {
        _builder.setAaid(value)
      }
    /**
     * ```
     * AAID, 应用匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
     * ```
     *
     * `string aaid = 59;`
     */
    public fun clearAaid() {
      _builder.clearAaid()
    }

    /**
     * ```
     * ?, 设置为 "[]"
     * ```
     *
     * `string androidapp20 = 60;`
     */
    public var androidapp20: kotlin.String
      @JvmName("getAndroidapp20")
      get() = _builder.getAndroidapp20()
      @JvmName("setAndroidapp20")
      set(value) {
        _builder.setAndroidapp20(value)
      }
    /**
     * ```
     * ?, 设置为 "[]"
     * ```
     *
     * `string androidapp20 = 60;`
     */
    public fun clearAndroidapp20() {
      _builder.clearAndroidapp20()
    }

    /**
     * ```
     * ?, 留空
     * ```
     *
     * `int32 androidappcnt = 61;`
     */
    public var androidappcnt: kotlin.Int
      @JvmName("getAndroidappcnt")
      get() = _builder.getAndroidappcnt()
      @JvmName("setAndroidappcnt")
      set(value) {
        _builder.setAndroidappcnt(value)
      }
    /**
     * ```
     * ?, 留空
     * ```
     *
     * `int32 androidappcnt = 61;`
     */
    public fun clearAndroidappcnt() {
      _builder.clearAndroidappcnt()
    }

    /**
     * ```
     * ?, 设置为 "[]"
     * ```
     *
     * `string androidsysapp20 = 62;`
     */
    public var androidsysapp20: kotlin.String
      @JvmName("getAndroidsysapp20")
      get() = _builder.getAndroidsysapp20()
      @JvmName("setAndroidsysapp20")
      set(value) {
        _builder.setAndroidsysapp20(value)
      }
    /**
     * ```
     * ?, 设置为 "[]"
     * ```
     *
     * `string androidsysapp20 = 62;`
     */
    public fun clearAndroidsysapp20() {
      _builder.clearAndroidsysapp20()
    }

    /**
     * ```
     * 当前剩余电量, 如 100
     * ```
     *
     * `int32 battery = 63;`
     */
    public var battery: kotlin.Int
      @JvmName("getBattery")
      get() = _builder.getBattery()
      @JvmName("setBattery")
      set(value) {
        _builder.setBattery(value)
      }
    /**
     * ```
     * 当前剩余电量, 如 100
     * ```
     *
     * `int32 battery = 63;`
     */
    public fun clearBattery() {
      _builder.clearBattery()
    }

    /**
     * ```
     * Android 监听电量状态, 如 "BATTERY_STATUS_DISCHARGING"
     * ```
     *
     * `string battery_state = 64;`
     */
    public var batteryState: kotlin.String
      @JvmName("getBatteryState")
      get() = _builder.getBatteryState()
      @JvmName("setBatteryState")
      set(value) {
        _builder.setBatteryState(value)
      }
    /**
     * ```
     * Android 监听电量状态, 如 "BATTERY_STATUS_DISCHARGING"
     * ```
     *
     * `string battery_state = 64;`
     */
    public fun clearBatteryState() {
      _builder.clearBatteryState()
    }

    /**
     * ```
     * Wifi BSSID, 一般无法获取, 留空
     * ```
     *
     * `string bssid = 65;`
     */
    public var bssid: kotlin.String
      @JvmName("getBssid")
      get() = _builder.getBssid()
      @JvmName("setBssid")
      set(value) {
        _builder.setBssid(value)
      }
    /**
     * ```
     * Wifi BSSID, 一般无法获取, 留空
     * ```
     *
     * `string bssid = 65;`
     */
    public fun clearBssid() {
      _builder.clearBssid()
    }

    /**
     * ```
     * ?, 如 "NOH-AN01 4.0.0.102(DEVC00E100R7P5)"
     * ```
     *
     * `string build_id = 67;`
     */
    public var buildId: kotlin.String
      @JvmName("getBuildId")
      get() = _builder.getBuildId()
      @JvmName("setBuildId")
      set(value) {
        _builder.setBuildId(value)
      }
    /**
     * ```
     * ?, 如 "NOH-AN01 4.0.0.102(DEVC00E100R7P5)"
     * ```
     *
     * `string build_id = 67;`
     */
    public fun clearBuildId() {
      _builder.clearBuildId()
    }

    /**
     * ```
     * ISO 国家代码, 如 "CN"
     * ```
     *
     * `string country_iso = 68;`
     */
    public var countryIso: kotlin.String
      @JvmName("getCountryIso")
      get() = _builder.getCountryIso()
      @JvmName("setCountryIso")
      set(value) {
        _builder.setCountryIso(value)
      }
    /**
     * ```
     * ISO 国家代码, 如 "CN"
     * ```
     *
     * `string country_iso = 68;`
     */
    public fun clearCountryIso() {
      _builder.clearCountryIso()
    }

    /**
     * ```
     * 可用运行内存(Byte)
     * ```
     *
     * `int64 free_memory = 70;`
     */
    public var freeMemory: kotlin.Long
      @JvmName("getFreeMemory")
      get() = _builder.getFreeMemory()
      @JvmName("setFreeMemory")
      set(value) {
        _builder.setFreeMemory(value)
      }
    /**
     * ```
     * 可用运行内存(Byte)
     * ```
     *
     * `int64 free_memory = 70;`
     */
    public fun clearFreeMemory() {
      _builder.clearFreeMemory()
    }

    /**
     * ```
     * 可用内置存储空间(Byte)
     * ```
     *
     * `string fstorage = 71;`
     */
    public var fstorage: kotlin.String
      @JvmName("getFstorage")
      get() = _builder.getFstorage()
      @JvmName("setFstorage")
      set(value) {
        _builder.setFstorage(value)
      }
    /**
     * ```
     * 可用内置存储空间(Byte)
     * ```
     *
     * `string fstorage = 71;`
     */
    public fun clearFstorage() {
      _builder.clearFstorage()
    }

    /**
     * ```
     * Linux kernel version
     * ```
     *
     * `string kernel_version = 74;`
     */
    public var kernelVersion: kotlin.String
      @JvmName("getKernelVersion")
      get() = _builder.getKernelVersion()
      @JvmName("setKernelVersion")
      set(value) {
        _builder.setKernelVersion(value)
      }
    /**
     * ```
     * Linux kernel version
     * ```
     *
     * `string kernel_version = 74;`
     */
    public fun clearKernelVersion() {
      _builder.clearKernelVersion()
    }

    /**
     * ```
     * 语言, 如 "zh"
     * ```
     *
     * `string languages = 75;`
     */
    public var languages: kotlin.String
      @JvmName("getLanguages")
      get() = _builder.getLanguages()
      @JvmName("setLanguages")
      set(value) {
        _builder.setLanguages(value)
      }
    /**
     * ```
     * 语言, 如 "zh"
     * ```
     *
     * `string languages = 75;`
     */
    public fun clearLanguages() {
      _builder.clearLanguages()
    }

    /**
     * ```
     * Wifi 网卡 MAC(?), 留空
     * ```
     *
     * `string mac = 76;`
     */
    public var mac: kotlin.String
      @JvmName("getMac")
      get() = _builder.getMac()
      @JvmName("setMac")
      set(value) {
        _builder.setMac(value)
      }
    /**
     * ```
     * Wifi 网卡 MAC(?), 留空
     * ```
     *
     * `string mac = 76;`
     */
    public fun clearMac() {
      _builder.clearMac()
    }

    /**
     * ```
     * 当前连接 Wifi 的 SSID, 留空
     * ```
     *
     * `string ssid = 79;`
     */
    public var ssid: kotlin.String
      @JvmName("getSsid")
      get() = _builder.getSsid()
      @JvmName("setSsid")
      set(value) {
        _builder.setSsid(value)
      }
    /**
     * ```
     * 当前连接 Wifi 的 SSID, 留空
     * ```
     *
     * `string ssid = 79;`
     */
    public fun clearSsid() {
      _builder.clearSsid()
    }

    /**
     * ```
     * ?, 留空
     * ```
     *
     * `int32 systemvolume = 80;`
     */
    public var systemvolume: kotlin.Int
      @JvmName("getSystemvolume")
      get() = _builder.getSystemvolume()
      @JvmName("setSystemvolume")
      set(value) {
        _builder.setSystemvolume(value)
      }
    /**
     * ```
     * ?, 留空
     * ```
     *
     * `int32 systemvolume = 80;`
     */
    public fun clearSystemvolume() {
      _builder.clearSystemvolume()
    }

    /**
     * ```
     * Wifi 网卡 MAC 列表(?), 留空
     * ```
     *
     * `string wifimaclist = 81;`
     */
    public var wifimaclist: kotlin.String
      @JvmName("getWifimaclist")
      get() = _builder.getWifimaclist()
      @JvmName("setWifimaclist")
      set(value) {
        _builder.setWifimaclist(value)
      }
    /**
     * ```
     * Wifi 网卡 MAC 列表(?), 留空
     * ```
     *
     * `string wifimaclist = 81;`
     */
    public fun clearWifimaclist() {
      _builder.clearWifimaclist()
    }

    /**
     * ```
     * 运行内存(Byte)
     * ```
     *
     * `int64 memory = 82;`
     */
    public var memory: kotlin.Long
      @JvmName("getMemory")
      get() = _builder.getMemory()
      @JvmName("setMemory")
      set(value) {
        _builder.setMemory(value)
      }
    /**
     * ```
     * 运行内存(Byte)
     * ```
     *
     * `int64 memory = 82;`
     */
    public fun clearMemory() {
      _builder.clearMemory()
    }

    /**
     * ```
     * 当前剩余电量, 如 "100"
     * ```
     *
     * `string str_battery = 83;`
     */
    public var strBattery: kotlin.String
      @JvmName("getStrBattery")
      get() = _builder.getStrBattery()
      @JvmName("setStrBattery")
      set(value) {
        _builder.setStrBattery(value)
      }
    /**
     * ```
     * 当前剩余电量, 如 "100"
     * ```
     *
     * `string str_battery = 83;`
     */
    public fun clearStrBattery() {
      _builder.clearStrBattery()
    }

    /**
     * ```
     * 设备是否 Root(?), 留空
     * ```
     *
     * `bool is_root = 84;`
     */
    public var isRoot: kotlin.Boolean
      @JvmName("getIsRoot")
      get() = _builder.getIsRoot()
      @JvmName("setIsRoot")
      set(value) {
        _builder.setIsRoot(value)
      }
    /**
     * ```
     * 设备是否 Root(?), 留空
     * ```
     *
     * `bool is_root = 84;`
     */
    public fun clearIsRoot() {
      _builder.clearIsRoot()
    }

    /**
     * ```
     * 光照传感器数值字符串
     * ```
     *
     * `string str_brightness = 85;`
     */
    public var strBrightness: kotlin.String
      @JvmName("getStrBrightness")
      get() = _builder.getStrBrightness()
      @JvmName("setStrBrightness")
      set(value) {
        _builder.setStrBrightness(value)
      }
    /**
     * ```
     * 光照传感器数值字符串
     * ```
     *
     * `string str_brightness = 85;`
     */
    public fun clearStrBrightness() {
      _builder.clearStrBrightness()
    }

    /**
     * ```
     * 产品id, 见 2
     * ```
     *
     * `string str_app_id = 86;`
     */
    public var strAppId: kotlin.String
      @JvmName("getStrAppId")
      get() = _builder.getStrAppId()
      @JvmName("setStrAppId")
      set(value) {
        _builder.setStrAppId(value)
      }
    /**
     * ```
     * 产品id, 见 2
     * ```
     *
     * `string str_app_id = 86;`
     */
    public fun clearStrAppId() {
      _builder.clearStrAppId()
    }

    /**
     * ```
     * 当前 IP(?), 留空
     * ```
     *
     * `string ip = 87;`
     */
    public var ip: kotlin.String
      @JvmName("getIp")
      get() = _builder.getIp()
      @JvmName("setIp")
      set(value) {
        _builder.setIp(value)
      }
    /**
     * ```
     * 当前 IP(?), 留空
     * ```
     *
     * `string ip = 87;`
     */
    public fun clearIp() {
      _builder.clearIp()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string user_agent = 88;`
     */
    public var userAgent: kotlin.String
      @JvmName("getUserAgent")
      get() = _builder.getUserAgent()
      @JvmName("setUserAgent")
      set(value) {
        _builder.setUserAgent(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string user_agent = 88;`
     */
    public fun clearUserAgent() {
      _builder.clearUserAgent()
    }

    /**
     * ```
     * ?, 如: "1.25"
     * ```
     *
     * `string light_intensity = 89;`
     */
    public var lightIntensity: kotlin.String
      @JvmName("getLightIntensity")
      get() = _builder.getLightIntensity()
      @JvmName("setLightIntensity")
      set(value) {
        _builder.setLightIntensity(value)
      }
    /**
     * ```
     * ?, 如: "1.25"
     * ```
     *
     * `string light_intensity = 89;`
     */
    public fun clearLightIntensity() {
      _builder.clearLightIntensity()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DeviceAngleProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 设备 xyz 方向角度
     * ```
     *
     * `repeated float device_angle = 90;`
     */
     public val deviceAngle: com.google.protobuf.kotlin.DslList<kotlin.Float, DeviceAngleProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDeviceAngleList()
      )
    /**
     * ```
     * 设备 xyz 方向角度
     * ```
     *
     * `repeated float device_angle = 90;`
     * @param value The deviceAngle to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addDeviceAngle")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Float, DeviceAngleProxy>.add(value: kotlin.Float) {
      _builder.addDeviceAngle(value)
    }/**
     * ```
     * 设备 xyz 方向角度
     * ```
     *
     * `repeated float device_angle = 90;`
     * @param value The deviceAngle to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignDeviceAngle")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Float, DeviceAngleProxy>.plusAssign(value: kotlin.Float) {
      add(value)
    }/**
     * ```
     * 设备 xyz 方向角度
     * ```
     *
     * `repeated float device_angle = 90;`
     * @param values The deviceAngle to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllDeviceAngle")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Float, DeviceAngleProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Float>) {
      _builder.addAllDeviceAngle(values)
    }/**
     * ```
     * 设备 xyz 方向角度
     * ```
     *
     * `repeated float device_angle = 90;`
     * @param values The deviceAngle to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllDeviceAngle")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Float, DeviceAngleProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Float>) {
      addAll(values)
    }/**
     * ```
     * 设备 xyz 方向角度
     * ```
     *
     * `repeated float device_angle = 90;`
     * @param index The index to set the value at.
     * @param value The deviceAngle to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setDeviceAngle")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.Float, DeviceAngleProxy>.set(index: kotlin.Int, value: kotlin.Float) {
      _builder.setDeviceAngle(index, value)
    }/**
     * ```
     * 设备 xyz 方向角度
     * ```
     *
     * `repeated float device_angle = 90;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearDeviceAngle")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Float, DeviceAngleProxy>.clear() {
      _builder.clearDeviceAngle()
    }
    /**
     * ```
     * GPS 传感器数量(或者是否有 GPS 传感器?), 如 "1"
     * ```
     *
     * `int64 gps_sensor = 91;`
     */
    public var gpsSensor: kotlin.Long
      @JvmName("getGpsSensor")
      get() = _builder.getGpsSensor()
      @JvmName("setGpsSensor")
      set(value) {
        _builder.setGpsSensor(value)
      }
    /**
     * ```
     * GPS 传感器数量(或者是否有 GPS 传感器?), 如 "1"
     * ```
     *
     * `int64 gps_sensor = 91;`
     */
    public fun clearGpsSensor() {
      _builder.clearGpsSensor()
    }

    /**
     * ```
     * 速度传感器数量(或者是否有速度传感器?), 如 "1"
     * ```
     *
     * `int64 speed_sensor = 92;`
     */
    public var speedSensor: kotlin.Long
      @JvmName("getSpeedSensor")
      get() = _builder.getSpeedSensor()
      @JvmName("setSpeedSensor")
      set(value) {
        _builder.setSpeedSensor(value)
      }
    /**
     * ```
     * 速度传感器数量(或者是否有速度传感器?), 如 "1"
     * ```
     *
     * `int64 speed_sensor = 92;`
     */
    public fun clearSpeedSensor() {
      _builder.clearSpeedSensor()
    }

    /**
     * ```
     * 线性加速度传感器数量(或者是否有线性加速度传感器?), 如 "1"
     * ```
     *
     * `int64 linear_speed_sensor = 93;`
     */
    public var linearSpeedSensor: kotlin.Long
      @JvmName("getLinearSpeedSensor")
      get() = _builder.getLinearSpeedSensor()
      @JvmName("setLinearSpeedSensor")
      set(value) {
        _builder.setLinearSpeedSensor(value)
      }
    /**
     * ```
     * 线性加速度传感器数量(或者是否有线性加速度传感器?), 如 "1"
     * ```
     *
     * `int64 linear_speed_sensor = 93;`
     */
    public fun clearLinearSpeedSensor() {
      _builder.clearLinearSpeedSensor()
    }

    /**
     * ```
     * 陀螺仪传感器数量(或者是否有陀螺仪传感器?), 如 "1"
     * ```
     *
     * `int64 gyroscope_sensor = 94;`
     */
    public var gyroscopeSensor: kotlin.Long
      @JvmName("getGyroscopeSensor")
      get() = _builder.getGyroscopeSensor()
      @JvmName("setGyroscopeSensor")
      set(value) {
        _builder.setGyroscopeSensor(value)
      }
    /**
     * ```
     * 陀螺仪传感器数量(或者是否有陀螺仪传感器?), 如 "1"
     * ```
     *
     * `int64 gyroscope_sensor = 94;`
     */
    public fun clearGyroscopeSensor() {
      _builder.clearGyroscopeSensor()
    }

    /**
     * ```
     * 生物识别传感器数量(或者是否有生物识别传感器?), 如 "1"
     * ```
     *
     * `int64 biometric = 95;`
     */
    public var biometric: kotlin.Long
      @JvmName("getBiometric")
      get() = _builder.getBiometric()
      @JvmName("setBiometric")
      set(value) {
        _builder.setBiometric(value)
      }
    /**
     * ```
     * 生物识别传感器数量(或者是否有生物识别传感器?), 如 "1"
     * ```
     *
     * `int64 biometric = 95;`
     */
    public fun clearBiometric() {
      _builder.clearBiometric()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class BiometricsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 生物识别传感器类型(?), 如 "touchid"
     * ```
     *
     * `repeated string biometrics = 96;`
     * @return A list containing the biometrics.
     */
    public val biometrics: com.google.protobuf.kotlin.DslList<kotlin.String, BiometricsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getBiometricsList()
      )
    /**
     * ```
     * 生物识别传感器类型(?), 如 "touchid"
     * ```
     *
     * `repeated string biometrics = 96;`
     * @param value The biometrics to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addBiometrics")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BiometricsProxy>.add(value: kotlin.String) {
      _builder.addBiometrics(value)
    }
    /**
     * ```
     * 生物识别传感器类型(?), 如 "touchid"
     * ```
     *
     * `repeated string biometrics = 96;`
     * @param value The biometrics to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignBiometrics")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BiometricsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * 生物识别传感器类型(?), 如 "touchid"
     * ```
     *
     * `repeated string biometrics = 96;`
     * @param values The biometrics to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllBiometrics")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BiometricsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllBiometrics(values)
    }
    /**
     * ```
     * 生物识别传感器类型(?), 如 "touchid"
     * ```
     *
     * `repeated string biometrics = 96;`
     * @param values The biometrics to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllBiometrics")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BiometricsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * 生物识别传感器类型(?), 如 "touchid"
     * ```
     *
     * `repeated string biometrics = 96;`
     * @param index The index to set the value at.
     * @param value The biometrics to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setBiometrics")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, BiometricsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setBiometrics(index, value)
    }/**
     * ```
     * 生物识别传感器类型(?), 如 "touchid"
     * ```
     *
     * `repeated string biometrics = 96;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearBiometrics")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, BiometricsProxy>.clear() {
      _builder.clearBiometrics()
    }
    /**
     * ```
     * 上次 Crash Dump 时的毫秒时间戳
     * ```
     *
     * `int64 last_dump_ts = 97;`
     */
    public var lastDumpTs: kotlin.Long
      @JvmName("getLastDumpTs")
      get() = _builder.getLastDumpTs()
      @JvmName("setLastDumpTs")
      set(value) {
        _builder.setLastDumpTs(value)
      }
    /**
     * ```
     * 上次 Crash Dump 时的毫秒时间戳
     * ```
     *
     * `int64 last_dump_ts = 97;`
     */
    public fun clearLastDumpTs() {
      _builder.clearLastDumpTs()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string location = 98;`
     */
    public var location: kotlin.String
      @JvmName("getLocation")
      get() = _builder.getLocation()
      @JvmName("setLocation")
      set(value) {
        _builder.setLocation(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string location = 98;`
     */
    public fun clearLocation() {
      _builder.clearLocation()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string country = 99;`
     */
    public var country: kotlin.String
      @JvmName("getCountry")
      get() = _builder.getCountry()
      @JvmName("setCountry")
      set(value) {
        _builder.setCountry(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string country = 99;`
     */
    public fun clearCountry() {
      _builder.clearCountry()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string city = 100;`
     */
    public var city: kotlin.String
      @JvmName("getCity")
      get() = _builder.getCity()
      @JvmName("setCity")
      set(value) {
        _builder.setCity(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string city = 100;`
     */
    public fun clearCity() {
      _builder.clearCity()
    }

    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 data_activity_state = 101;`
     */
    public var dataActivityState: kotlin.Int
      @JvmName("getDataActivityState")
      get() = _builder.getDataActivityState()
      @JvmName("setDataActivityState")
      set(value) {
        _builder.setDataActivityState(value)
      }
    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 data_activity_state = 101;`
     */
    public fun clearDataActivityState() {
      _builder.clearDataActivityState()
    }

    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 data_connect_state = 102;`
     */
    public var dataConnectState: kotlin.Int
      @JvmName("getDataConnectState")
      get() = _builder.getDataConnectState()
      @JvmName("setDataConnectState")
      set(value) {
        _builder.setDataConnectState(value)
      }
    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 data_connect_state = 102;`
     */
    public fun clearDataConnectState() {
      _builder.clearDataConnectState()
    }

    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 data_network_type = 103;`
     */
    public var dataNetworkType: kotlin.Int
      @JvmName("getDataNetworkType")
      get() = _builder.getDataNetworkType()
      @JvmName("setDataNetworkType")
      set(value) {
        _builder.setDataNetworkType(value)
      }
    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 data_network_type = 103;`
     */
    public fun clearDataNetworkType() {
      _builder.clearDataNetworkType()
    }

    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 voice_network_type = 104;`
     */
    public var voiceNetworkType: kotlin.Int
      @JvmName("getVoiceNetworkType")
      get() = _builder.getVoiceNetworkType()
      @JvmName("setVoiceNetworkType")
      set(value) {
        _builder.setVoiceNetworkType(value)
      }
    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 voice_network_type = 104;`
     */
    public fun clearVoiceNetworkType() {
      _builder.clearVoiceNetworkType()
    }

    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 voice_service_state = 105;`
     */
    public var voiceServiceState: kotlin.Int
      @JvmName("getVoiceServiceState")
      get() = _builder.getVoiceServiceState()
      @JvmName("setVoiceServiceState")
      set(value) {
        _builder.setVoiceServiceState(value)
      }
    /**
     * ```
     * ?, 默认为 0
     * ```
     *
     * `int32 voice_service_state = 105;`
     */
    public fun clearVoiceServiceState() {
      _builder.clearVoiceServiceState()
    }

    /**
     * ```
     * USB 是否连接, 启用为 "1", 否则为 "0"
     * ```
     *
     * `int32 usb_connected = 106;`
     */
    public var usbConnected: kotlin.Int
      @JvmName("getUsbConnected")
      get() = _builder.getUsbConnected()
      @JvmName("setUsbConnected")
      set(value) {
        _builder.setUsbConnected(value)
      }
    /**
     * ```
     * USB 是否连接, 启用为 "1", 否则为 "0"
     * ```
     *
     * `int32 usb_connected = 106;`
     */
    public fun clearUsbConnected() {
      _builder.clearUsbConnected()
    }

    /**
     * ```
     * ADB 是否启用, 启用为 "1", 否则为 "0"
     * ```
     *
     * `int32 adb_enabled = 107;`
     */
    public var adbEnabled: kotlin.Int
      @JvmName("getAdbEnabled")
      get() = _builder.getAdbEnabled()
      @JvmName("setAdbEnabled")
      set(value) {
        _builder.setAdbEnabled(value)
      }
    /**
     * ```
     * ADB 是否启用, 启用为 "1", 否则为 "0"
     * ```
     *
     * `int32 adb_enabled = 107;`
     */
    public fun clearAdbEnabled() {
      _builder.clearAdbEnabled()
    }

    /**
     * ```
     * 系统 UI 软件版本(?), 如 "14.0.0"
     * ```
     *
     * `string ui_version = 108;`
     */
    public var uiVersion: kotlin.String
      @JvmName("getUiVersion")
      get() = _builder.getUiVersion()
      @JvmName("setUiVersion")
      set(value) {
        _builder.setUiVersion(value)
      }
    /**
     * ```
     * 系统 UI 软件版本(?), 如 "14.0.0"
     * ```
     *
     * `string ui_version = 108;`
     */
    public fun clearUiVersion() {
      _builder.clearUiVersion()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class AccessibilityServiceProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 辅助服务
     * ```
     *
     * `repeated string accessibility_service = 109;`
     * @return A list containing the accessibilityService.
     */
    public val accessibilityService: com.google.protobuf.kotlin.DslList<kotlin.String, AccessibilityServiceProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getAccessibilityServiceList()
      )
    /**
     * ```
     * 辅助服务
     * ```
     *
     * `repeated string accessibility_service = 109;`
     * @param value The accessibilityService to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAccessibilityService")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, AccessibilityServiceProxy>.add(value: kotlin.String) {
      _builder.addAccessibilityService(value)
    }
    /**
     * ```
     * 辅助服务
     * ```
     *
     * `repeated string accessibility_service = 109;`
     * @param value The accessibilityService to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAccessibilityService")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AccessibilityServiceProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * 辅助服务
     * ```
     *
     * `repeated string accessibility_service = 109;`
     * @param values The accessibilityService to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllAccessibilityService")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, AccessibilityServiceProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllAccessibilityService(values)
    }
    /**
     * ```
     * 辅助服务
     * ```
     *
     * `repeated string accessibility_service = 109;`
     * @param values The accessibilityService to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllAccessibilityService")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AccessibilityServiceProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * 辅助服务
     * ```
     *
     * `repeated string accessibility_service = 109;`
     * @param index The index to set the value at.
     * @param value The accessibilityService to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setAccessibilityService")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AccessibilityServiceProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setAccessibilityService(index, value)
    }/**
     * ```
     * 辅助服务
     * ```
     *
     * `repeated string accessibility_service = 109;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearAccessibilityService")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, AccessibilityServiceProxy>.clear() {
      _builder.clearAccessibilityService()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SensorsInfoProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 传感器信息(需要和前面的 sensor 对应)
     * ```
     *
     * `repeated .datacenter.hakase.protobuf.SensorInfo sensors_info = 110;`
     */
     public val sensorsInfo: com.google.protobuf.kotlin.DslList<datacenter.hakase.protobuf.SensorInfo, SensorsInfoProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getSensorsInfoList()
      )
    /**
     * ```
     * 传感器信息(需要和前面的 sensor 对应)
     * ```
     *
     * `repeated .datacenter.hakase.protobuf.SensorInfo sensors_info = 110;`
     * @param value The sensorsInfo to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addSensorsInfo")
    public fun com.google.protobuf.kotlin.DslList<datacenter.hakase.protobuf.SensorInfo, SensorsInfoProxy>.add(value: datacenter.hakase.protobuf.SensorInfo) {
      _builder.addSensorsInfo(value)
    }
    /**
     * ```
     * 传感器信息(需要和前面的 sensor 对应)
     * ```
     *
     * `repeated .datacenter.hakase.protobuf.SensorInfo sensors_info = 110;`
     * @param value The sensorsInfo to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignSensorsInfo")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<datacenter.hakase.protobuf.SensorInfo, SensorsInfoProxy>.plusAssign(value: datacenter.hakase.protobuf.SensorInfo) {
      add(value)
    }
    /**
     * ```
     * 传感器信息(需要和前面的 sensor 对应)
     * ```
     *
     * `repeated .datacenter.hakase.protobuf.SensorInfo sensors_info = 110;`
     * @param values The sensorsInfo to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllSensorsInfo")
    public fun com.google.protobuf.kotlin.DslList<datacenter.hakase.protobuf.SensorInfo, SensorsInfoProxy>.addAll(values: kotlin.collections.Iterable<datacenter.hakase.protobuf.SensorInfo>) {
      _builder.addAllSensorsInfo(values)
    }
    /**
     * ```
     * 传感器信息(需要和前面的 sensor 对应)
     * ```
     *
     * `repeated .datacenter.hakase.protobuf.SensorInfo sensors_info = 110;`
     * @param values The sensorsInfo to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllSensorsInfo")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<datacenter.hakase.protobuf.SensorInfo, SensorsInfoProxy>.plusAssign(values: kotlin.collections.Iterable<datacenter.hakase.protobuf.SensorInfo>) {
      addAll(values)
    }
    /**
     * ```
     * 传感器信息(需要和前面的 sensor 对应)
     * ```
     *
     * `repeated .datacenter.hakase.protobuf.SensorInfo sensors_info = 110;`
     * @param index The index to set the value at.
     * @param value The sensorsInfo to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setSensorsInfo")
    public operator fun com.google.protobuf.kotlin.DslList<datacenter.hakase.protobuf.SensorInfo, SensorsInfoProxy>.set(index: kotlin.Int, value: datacenter.hakase.protobuf.SensorInfo) {
      _builder.setSensorsInfo(index, value)
    }
    /**
     * ```
     * 传感器信息(需要和前面的 sensor 对应)
     * ```
     *
     * `repeated .datacenter.hakase.protobuf.SensorInfo sensors_info = 110;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearSensorsInfo")
    public fun com.google.protobuf.kotlin.DslList<datacenter.hakase.protobuf.SensorInfo, SensorsInfoProxy>.clear() {
      _builder.clearSensorsInfo()
    }


    /**
     * ```
     * DrmId
     * ```
     *
     * `string drmid = 111;`
     */
    public var drmid: kotlin.String
      @JvmName("getDrmid")
      get() = _builder.getDrmid()
      @JvmName("setDrmid")
      set(value) {
        _builder.setDrmid(value)
      }
    /**
     * ```
     * DrmId
     * ```
     *
     * `string drmid = 111;`
     */
    public fun clearDrmid() {
      _builder.clearDrmid()
    }

    /**
     * ```
     * 是否存在电池
     * ```
     *
     * `bool battery_present = 112;`
     */
    public var batteryPresent: kotlin.Boolean
      @JvmName("getBatteryPresent")
      get() = _builder.getBatteryPresent()
      @JvmName("setBatteryPresent")
      set(value) {
        _builder.setBatteryPresent(value)
      }
    /**
     * ```
     * 是否存在电池
     * ```
     *
     * `bool battery_present = 112;`
     */
    public fun clearBatteryPresent() {
      _builder.clearBatteryPresent()
    }

    /**
     * ```
     * 电池技术, 如 "Li-poly"
     * ```
     *
     * `string battery_technology = 113;`
     */
    public var batteryTechnology: kotlin.String
      @JvmName("getBatteryTechnology")
      get() = _builder.getBatteryTechnology()
      @JvmName("setBatteryTechnology")
      set(value) {
        _builder.setBatteryTechnology(value)
      }
    /**
     * ```
     * 电池技术, 如 "Li-poly"
     * ```
     *
     * `string battery_technology = 113;`
     */
    public fun clearBatteryTechnology() {
      _builder.clearBatteryTechnology()
    }

    /**
     * ```
     * 电池温度(m℃)
     * ```
     *
     * `int32 battery_temperature = 114;`
     */
    public var batteryTemperature: kotlin.Int
      @JvmName("getBatteryTemperature")
      get() = _builder.getBatteryTemperature()
      @JvmName("setBatteryTemperature")
      set(value) {
        _builder.setBatteryTemperature(value)
      }
    /**
     * ```
     * 电池温度(m℃)
     * ```
     *
     * `int32 battery_temperature = 114;`
     */
    public fun clearBatteryTemperature() {
      _builder.clearBatteryTemperature()
    }

    /**
     * ```
     * 电池电压(mV)
     * ```
     *
     * `int32 battery_voltage = 115;`
     */
    public var batteryVoltage: kotlin.Int
      @JvmName("getBatteryVoltage")
      get() = _builder.getBatteryVoltage()
      @JvmName("setBatteryVoltage")
      set(value) {
        _builder.setBatteryVoltage(value)
      }
    /**
     * ```
     * 电池电压(mV)
     * ```
     *
     * `int32 battery_voltage = 115;`
     */
    public fun clearBatteryVoltage() {
      _builder.clearBatteryVoltage()
    }

    /**
     * ```
     * 电池是否被拔开(?), 可以为 0
     * ```
     *
     * `int32 battery_plugged = 116;`
     */
    public var batteryPlugged: kotlin.Int
      @JvmName("getBatteryPlugged")
      get() = _builder.getBatteryPlugged()
      @JvmName("setBatteryPlugged")
      set(value) {
        _builder.setBatteryPlugged(value)
      }
    /**
     * ```
     * 电池是否被拔开(?), 可以为 0
     * ```
     *
     * `int32 battery_plugged = 116;`
     */
    public fun clearBatteryPlugged() {
      _builder.clearBatteryPlugged()
    }

    /**
     * ```
     * 电池健康, 如 2
     * ```
     *
     * `int32 battery_health = 117;`
     */
    public var batteryHealth: kotlin.Int
      @JvmName("getBatteryHealth")
      get() = _builder.getBatteryHealth()
      @JvmName("setBatteryHealth")
      set(value) {
        _builder.setBatteryHealth(value)
      }
    /**
     * ```
     * 电池健康, 如 2
     * ```
     *
     * `int32 battery_health = 117;`
     */
    public fun clearBatteryHealth() {
      _builder.clearBatteryHealth()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class CpuAbiListProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * 留空即可
     * ```
     *
     * `repeated string cpu_abi_list = 118;`
     * @return A list containing the cpuAbiList.
     */
    public val cpuAbiList: com.google.protobuf.kotlin.DslList<kotlin.String, CpuAbiListProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getCpuAbiListList()
      )
    /**
     * ```
     * 留空即可
     * ```
     *
     * `repeated string cpu_abi_list = 118;`
     * @param value The cpuAbiList to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addCpuAbiList")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, CpuAbiListProxy>.add(value: kotlin.String) {
      _builder.addCpuAbiList(value)
    }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `repeated string cpu_abi_list = 118;`
     * @param value The cpuAbiList to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignCpuAbiList")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, CpuAbiListProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `repeated string cpu_abi_list = 118;`
     * @param values The cpuAbiList to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllCpuAbiList")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, CpuAbiListProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllCpuAbiList(values)
    }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `repeated string cpu_abi_list = 118;`
     * @param values The cpuAbiList to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllCpuAbiList")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, CpuAbiListProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `repeated string cpu_abi_list = 118;`
     * @param index The index to set the value at.
     * @param value The cpuAbiList to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setCpuAbiList")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, CpuAbiListProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setCpuAbiList(index, value)
    }/**
     * ```
     * 留空即可
     * ```
     *
     * `repeated string cpu_abi_list = 118;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearCpuAbiList")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, CpuAbiListProxy>.clear() {
      _builder.clearCpuAbiList()
    }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_abi_libc = 119;`
     */
    public var cpuAbiLibc: kotlin.String
      @JvmName("getCpuAbiLibc")
      get() = _builder.getCpuAbiLibc()
      @JvmName("setCpuAbiLibc")
      set(value) {
        _builder.setCpuAbiLibc(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_abi_libc = 119;`
     */
    public fun clearCpuAbiLibc() {
      _builder.clearCpuAbiLibc()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_abi_libc64 = 120;`
     */
    public var cpuAbiLibc64: kotlin.String
      @JvmName("getCpuAbiLibc64")
      get() = _builder.getCpuAbiLibc64()
      @JvmName("setCpuAbiLibc64")
      set(value) {
        _builder.setCpuAbiLibc64(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_abi_libc64 = 120;`
     */
    public fun clearCpuAbiLibc64() {
      _builder.clearCpuAbiLibc64()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_processor = 121;`
     */
    public var cpuProcessor: kotlin.String
      @JvmName("getCpuProcessor")
      get() = _builder.getCpuProcessor()
      @JvmName("setCpuProcessor")
      set(value) {
        _builder.setCpuProcessor(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_processor = 121;`
     */
    public fun clearCpuProcessor() {
      _builder.clearCpuProcessor()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_model_name = 122;`
     */
    public var cpuModelName: kotlin.String
      @JvmName("getCpuModelName")
      get() = _builder.getCpuModelName()
      @JvmName("setCpuModelName")
      set(value) {
        _builder.setCpuModelName(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_model_name = 122;`
     */
    public fun clearCpuModelName() {
      _builder.clearCpuModelName()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_hardware = 123;`
     */
    public var cpuHardware: kotlin.String
      @JvmName("getCpuHardware")
      get() = _builder.getCpuHardware()
      @JvmName("setCpuHardware")
      set(value) {
        _builder.setCpuHardware(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_hardware = 123;`
     */
    public fun clearCpuHardware() {
      _builder.clearCpuHardware()
    }

    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_features = 124;`
     */
    public var cpuFeatures: kotlin.String
      @JvmName("getCpuFeatures")
      get() = _builder.getCpuFeatures()
      @JvmName("setCpuFeatures")
      set(value) {
        _builder.setCpuFeatures(value)
      }
    /**
     * ```
     * 留空即可
     * ```
     *
     * `string cpu_features = 124;`
     */
    public fun clearCpuFeatures() {
      _builder.clearCpuFeatures()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun datacenter.hakase.protobuf.AndroidDeviceInfo.copy(block: `datacenter.hakase.protobuf`.AndroidDeviceInfoKt.Dsl.() -> kotlin.Unit): datacenter.hakase.protobuf.AndroidDeviceInfo =
  `datacenter.hakase.protobuf`.AndroidDeviceInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

